"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.<defprolog> (V1787) (let Parse_shen.<predicate*> (shen.<predicate*> V1787) (if (not (= (fail) Parse_shen.<predicate*>)) (let Parse_shen.<clauses*> (shen.<clauses*> Parse_shen.<predicate*>) (if (not (= (fail) Parse_shen.<clauses*>)) (shen.pair (hd Parse_shen.<clauses*>) (hd (shen.prolog->shen (map (lambda Parse_X (shen.insert-predicate (shen.hdtl Parse_shen.<predicate*>) Parse_X)) (shen.hdtl Parse_shen.<clauses*>))))) (fail))) (fail))))

(defun shen.prolog-error (V1796 V1797) (cond ((and (cons? V1797) (and (cons? (tl V1797)) (= () (tl (tl V1797))))) (simple-error (cn "prolog syntax error in " (shen.app V1796 (cn " here:

 " (shen.app (shen.next-50 50 (hd V1797)) "
" shen.a)) shen.a)))) (true (simple-error (cn "prolog syntax error in " (shen.app V1796 "
" shen.a))))))

(defun shen.next-50 (V1804 V1805) (cond ((= () V1805) "") ((= 0 V1804) "") ((cons? V1805) (cn (shen.decons-string (hd V1805)) (shen.next-50 (- V1804 1) (tl V1805)))) (true (shen.f_error shen.next-50))))

(defun shen.decons-string (V1807) (cond ((and (cons? V1807) (and (= cons (hd V1807)) (and (cons? (tl V1807)) (and (cons? (tl (tl V1807))) (= () (tl (tl (tl V1807)))))))) (shen.app (shen.eval-cons V1807) " " shen.s)) (true (shen.app V1807 " " shen.r))))

(defun shen.insert-predicate (V1810 V1811) (cond ((and (cons? V1811) (and (cons? (tl V1811)) (= () (tl (tl V1811))))) (cons (cons V1810 (hd V1811)) (cons :- (tl V1811)))) (true (shen.f_error shen.insert-predicate))))

(defun shen.<predicate*> (V1813) (if (cons? (hd V1813)) (let Parse_X (hd (hd V1813)) (shen.pair (hd (shen.pair (tl (hd V1813)) (shen.hdtl V1813))) Parse_X)) (fail)))

(defun shen.<clauses*> (V1815) (let YaccParse (let Parse_shen.<clause*> (shen.<clause*> V1815) (if (not (= (fail) Parse_shen.<clause*>)) (let Parse_shen.<clauses*> (shen.<clauses*> Parse_shen.<clause*>) (if (not (= (fail) Parse_shen.<clauses*>)) (shen.pair (hd Parse_shen.<clauses*>) (cons (shen.hdtl Parse_shen.<clause*>) (shen.hdtl Parse_shen.<clauses*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1815) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<clause*> (V1817) (let Parse_shen.<head*> (shen.<head*> V1817) (if (not (= (fail) Parse_shen.<head*>)) (if (and (cons? (hd Parse_shen.<head*>)) (= <-- (hd (hd Parse_shen.<head*>)))) (let Parse_shen.<body*> (shen.<body*> (shen.pair (tl (hd Parse_shen.<head*>)) (shen.hdtl Parse_shen.<head*>))) (if (not (= (fail) Parse_shen.<body*>)) (let Parse_shen.<end*> (shen.<end*> Parse_shen.<body*>) (if (not (= (fail) Parse_shen.<end*>)) (shen.pair (hd Parse_shen.<end*>) (cons (shen.hdtl Parse_shen.<head*>) (cons (shen.hdtl Parse_shen.<body*>) ()))) (fail))) (fail))) (fail)) (fail))))

(defun shen.<head*> (V1819) (let YaccParse (let Parse_shen.<term*> (shen.<term*> V1819) (if (not (= (fail) Parse_shen.<term*>)) (let Parse_shen.<head*> (shen.<head*> Parse_shen.<term*>) (if (not (= (fail) Parse_shen.<head*>)) (shen.pair (hd Parse_shen.<head*>) (cons (shen.hdtl Parse_shen.<term*>) (shen.hdtl Parse_shen.<head*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1819) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<term*> (V1821) (if (cons? (hd V1821)) (let Parse_X (hd (hd V1821)) (if (and (not (= <-- Parse_X)) (shen.legitimate-term? Parse_X)) (shen.pair (hd (shen.pair (tl (hd V1821)) (shen.hdtl V1821))) (shen.eval-cons Parse_X)) (fail))) (fail)))

(defun shen.legitimate-term? (V1827) (cond ((and (cons? V1827) (and (= cons (hd V1827)) (and (cons? (tl V1827)) (and (cons? (tl (tl V1827))) (= () (tl (tl (tl V1827)))))))) (and (shen.legitimate-term? (hd (tl V1827))) (shen.legitimate-term? (hd (tl (tl V1827)))))) ((and (cons? V1827) (and (= mode (hd V1827)) (and (cons? (tl V1827)) (and (cons? (tl (tl V1827))) (and (= + (hd (tl (tl V1827)))) (= () (tl (tl (tl V1827))))))))) (shen.legitimate-term? (hd (tl V1827)))) ((and (cons? V1827) (and (= mode (hd V1827)) (and (cons? (tl V1827)) (and (cons? (tl (tl V1827))) (and (= - (hd (tl (tl V1827)))) (= () (tl (tl (tl V1827))))))))) (shen.legitimate-term? (hd (tl V1827)))) ((cons? V1827) false) (true true)))

(defun shen.eval-cons (V1829) (cond ((and (cons? V1829) (and (= cons (hd V1829)) (and (cons? (tl V1829)) (and (cons? (tl (tl V1829))) (= () (tl (tl (tl V1829)))))))) (cons (shen.eval-cons (hd (tl V1829))) (shen.eval-cons (hd (tl (tl V1829)))))) ((and (cons? V1829) (and (= mode (hd V1829)) (and (cons? (tl V1829)) (and (cons? (tl (tl V1829))) (= () (tl (tl (tl V1829)))))))) (cons mode (cons (shen.eval-cons (hd (tl V1829))) (tl (tl V1829))))) (true V1829)))

(defun shen.<body*> (V1831) (let YaccParse (let Parse_shen.<literal*> (shen.<literal*> V1831) (if (not (= (fail) Parse_shen.<literal*>)) (let Parse_shen.<body*> (shen.<body*> Parse_shen.<literal*>) (if (not (= (fail) Parse_shen.<body*>)) (shen.pair (hd Parse_shen.<body*>) (cons (shen.hdtl Parse_shen.<literal*>) (shen.hdtl Parse_shen.<body*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1831) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<literal*> (V1833) (let YaccParse (if (and (cons? (hd V1833)) (= ! (hd (hd V1833)))) (shen.pair (hd (shen.pair (tl (hd V1833)) (shen.hdtl V1833))) (cons cut (cons (intern "Throwcontrol") ()))) (fail)) (if (= YaccParse (fail)) (if (cons? (hd V1833)) (let Parse_X (hd (hd V1833)) (if (cons? Parse_X) (shen.pair (hd (shen.pair (tl (hd V1833)) (shen.hdtl V1833))) Parse_X) (fail))) (fail)) YaccParse)))

(defun shen.<end*> (V1835) (if (cons? (hd V1835)) (let Parse_X (hd (hd V1835)) (if (= Parse_X ;) (shen.pair (hd (shen.pair (tl (hd V1835)) (shen.hdtl V1835))) Parse_X) (fail))) (fail)))

(defun cut (V1839 V1840 V1841) (let Result (thaw V1841) (if (= Result false) V1839 Result)))

(defun shen.insert_modes (V1843) (cond ((and (cons? V1843) (and (= mode (hd V1843)) (and (cons? (tl V1843)) (and (cons? (tl (tl V1843))) (= () (tl (tl (tl V1843)))))))) V1843) ((= () V1843) ()) ((cons? V1843) (cons (cons mode (cons (hd V1843) (cons + ()))) (cons mode (cons (shen.insert_modes (tl V1843)) (cons - ()))))) (true V1843)))

(defun shen.s-prolog (V1845) (map (lambda X (eval X)) (shen.prolog->shen V1845)))

(defun shen.prolog->shen (V1847) (map (lambda X (shen.compile_prolog_procedure X)) (shen.group_clauses (map (lambda X (shen.s-prolog_clause X)) (mapcan (lambda X (shen.head_abstraction X)) V1847)))))

(defun shen.s-prolog_clause (V1849) (cond ((and (cons? V1849) (and (cons? (tl V1849)) (and (= :- (hd (tl V1849))) (and (cons? (tl (tl V1849))) (= () (tl (tl (tl V1849)))))))) (cons (hd V1849) (cons :- (cons (map (lambda X (shen.s-prolog_literal X)) (hd (tl (tl V1849)))) ())))) (true (shen.f_error shen.s-prolog_clause))))

(defun shen.head_abstraction (V1851) (cond ((and (cons? V1851) (and (cons? (tl V1851)) (and (= :- (hd (tl V1851))) (and (cons? (tl (tl V1851))) (and (= () (tl (tl (tl V1851)))) (trap-error (< (shen.complexity_head (hd V1851)) (value shen.*maxcomplexity*)) (lambda _ false))))))) (cons V1851 ())) ((and (cons? V1851) (and (cons? (hd V1851)) (and (cons? (tl V1851)) (and (= :- (hd (tl V1851))) (and (cons? (tl (tl V1851))) (= () (tl (tl (tl V1851))))))))) (let Terms (map (lambda Y (gensym V)) (tl (hd V1851))) (let XTerms (shen.rcons_form (shen.remove_modes (tl (hd V1851)))) (let Literal (cons unify (cons (shen.cons_form Terms) (cons XTerms ()))) (let Clause (cons (cons (hd (hd V1851)) Terms) (cons :- (cons (cons Literal (hd (tl (tl V1851)))) ()))) (cons Clause ())))))) (true (shen.f_error shen.head_abstraction))))

(defun shen.complexity_head (V1857) (cond ((cons? V1857) (shen.safe-product (map (lambda X (shen.complexity X)) (tl V1857)))) (true (shen.f_error shen.complexity_head))))

(defun shen.safe-multiply (V1860 V1861) (* V1860 V1861))

(defun shen.complexity (V1870) (cond ((and (cons? V1870) (and (= mode (hd V1870)) (and (cons? (tl V1870)) (and (cons? (hd (tl V1870))) (and (= mode (hd (hd (tl V1870)))) (and (cons? (tl (hd (tl V1870)))) (and (cons? (tl (tl (hd (tl V1870))))) (and (= () (tl (tl (tl (hd (tl V1870)))))) (and (cons? (tl (tl V1870))) (= () (tl (tl (tl V1870))))))))))))) (shen.complexity (hd (tl V1870)))) ((and (cons? V1870) (and (= mode (hd V1870)) (and (cons? (tl V1870)) (and (cons? (hd (tl V1870))) (and (cons? (tl (tl V1870))) (and (= + (hd (tl (tl V1870)))) (= () (tl (tl (tl V1870)))))))))) (shen.safe-multiply 2 (shen.safe-multiply (shen.complexity (cons mode (cons (hd (hd (tl V1870))) (tl (tl V1870))))) (shen.complexity (cons mode (cons (tl (hd (tl V1870))) (tl (tl V1870)))))))) ((and (cons? V1870) (and (= mode (hd V1870)) (and (cons? (tl V1870)) (and (cons? (hd (tl V1870))) (and (cons? (tl (tl V1870))) (and (= - (hd (tl (tl V1870)))) (= () (tl (tl (tl V1870)))))))))) (shen.safe-multiply (shen.complexity (cons mode (cons (hd (hd (tl V1870))) (tl (tl V1870))))) (shen.complexity (cons mode (cons (tl (hd (tl V1870))) (tl (tl V1870))))))) ((and (cons? V1870) (and (= mode (hd V1870)) (and (cons? (tl V1870)) (and (cons? (tl (tl V1870))) (and (= () (tl (tl (tl V1870)))) (variable? (hd (tl V1870)))))))) 1) ((and (cons? V1870) (and (= mode (hd V1870)) (and (cons? (tl V1870)) (and (cons? (tl (tl V1870))) (and (= + (hd (tl (tl V1870)))) (= () (tl (tl (tl V1870))))))))) 2) ((and (cons? V1870) (and (= mode (hd V1870)) (and (cons? (tl V1870)) (and (cons? (tl (tl V1870))) (and (= - (hd (tl (tl V1870)))) (= () (tl (tl (tl V1870))))))))) 1) (true (shen.complexity (cons mode (cons V1870 (cons + ())))))))

(defun shen.safe-product (V1872) (cond ((= () V1872) 1) ((cons? V1872) (shen.safe-multiply (hd V1872) (shen.safe-product (tl V1872)))) (true (shen.f_error shen.safe-product))))

(defun shen.s-prolog_literal (V1874) (cond ((and (cons? V1874) (and (= is (hd V1874)) (and (cons? (tl V1874)) (and (cons? (tl (tl V1874))) (= () (tl (tl (tl V1874)))))))) (cons bind (cons (hd (tl V1874)) (cons (shen.insert_deref (hd (tl (tl V1874)))) ())))) ((and (cons? V1874) (and (= when (hd V1874)) (and (cons? (tl V1874)) (= () (tl (tl V1874)))))) (cons fwhen (cons (shen.insert_deref (hd (tl V1874))) ()))) ((and (cons? V1874) (and (= bind (hd V1874)) (and (cons? (tl V1874)) (and (cons? (tl (tl V1874))) (= () (tl (tl (tl V1874)))))))) (cons bind (cons (hd (tl V1874)) (cons (shen.insert_lazyderef (hd (tl (tl V1874)))) ())))) ((and (cons? V1874) (and (= fwhen (hd V1874)) (and (cons? (tl V1874)) (= () (tl (tl V1874)))))) (cons fwhen (cons (shen.insert_lazyderef (hd (tl V1874))) ()))) ((cons? V1874) V1874) (true (shen.f_error shen.s-prolog_literal))))

(defun shen.insert_deref (V1876) (cond ((variable? V1876) (cons shen.deref (cons V1876 (cons ProcessN ())))) ((cons? V1876) (cons (shen.insert_deref (hd V1876)) (shen.insert_deref (tl V1876)))) (true V1876)))

(defun shen.insert_lazyderef (V1878) (cond ((variable? V1878) (cons shen.lazyderef (cons V1878 (cons ProcessN ())))) ((cons? V1878) (cons (shen.insert_lazyderef (hd V1878)) (shen.insert_lazyderef (tl V1878)))) (true V1878)))

(defun shen.group_clauses (V1880) (cond ((= () V1880) ()) ((cons? V1880) (let Group (shen.collect (lambda X (shen.same_predicate? (hd V1880) X)) V1880) (let Rest (difference V1880 Group) (cons Group (shen.group_clauses Rest))))) (true (shen.f_error shen.group_clauses))))

(defun shen.collect (V1885 V1886) (cond ((= () V1886) ()) ((cons? V1886) (if (V1885 (hd V1886)) (cons (hd V1886) (shen.collect V1885 (tl V1886))) (shen.collect V1885 (tl V1886)))) (true (shen.f_error shen.collect))))

(defun shen.same_predicate? (V1905 V1906) (cond ((and (cons? V1905) (and (cons? (hd V1905)) (and (cons? V1906) (cons? (hd V1906))))) (= (hd (hd V1905)) (hd (hd V1906)))) (true (shen.f_error shen.same_predicate?))))

(defun shen.compile_prolog_procedure (V1908) (let F (shen.procedure_name V1908) (let Shen (shen.clauses-to-shen F V1908) Shen)))

(defun shen.procedure_name (V1922) (cond ((and (cons? V1922) (and (cons? (hd V1922)) (cons? (hd (hd V1922))))) (hd (hd (hd V1922)))) (true (shen.f_error shen.procedure_name))))

(defun shen.clauses-to-shen (V1925 V1926) (let Linear (map (lambda X (shen.linearise-clause X)) V1926) (let Arity (shen.prolog-aritycheck V1925 (map (lambda X (head X)) V1926)) (let Parameters (shen.parameters Arity) (let AUM_instructions (map (lambda X (shen.aum X Parameters)) Linear) (let Code (shen.catch-cut (shen.nest-disjunct (map (lambda X (shen.aum_to_shen X)) AUM_instructions))) (let ShenDef (cons define (cons V1925 (append Parameters (append (cons ProcessN (cons Continuation ())) (cons -> (cons Code ())))))) ShenDef)))))))

(defun shen.catch-cut (V1928) (cond ((not (shen.occurs? cut V1928)) V1928) (true (cons let (cons Throwcontrol (cons (cons shen.catchpoint ()) (cons (cons shen.cutpoint (cons Throwcontrol (cons V1928 ()))) ())))))))

(defun shen.catchpoint () (set shen.*catch* (+ 1 (value shen.*catch*))))

(defun shen.cutpoint (V1936 V1937) (cond ((= V1937 V1936) false) (true V1937)))

(defun shen.nest-disjunct (V1939) (cond ((and (cons? V1939) (= () (tl V1939))) (hd V1939)) ((cons? V1939) (shen.lisp-or (hd V1939) (shen.nest-disjunct (tl V1939)))) (true (shen.f_error shen.nest-disjunct))))

(defun shen.lisp-or (V1942 V1943) (cons let (cons Case (cons V1942 (cons (cons if (cons (cons = (cons Case (cons false ()))) (cons V1943 (cons Case ())))) ())))))

(defun shen.prolog-aritycheck (V1948 V1949) (cond ((and (cons? V1949) (= () (tl V1949))) (- (length (hd V1949)) 1)) ((and (cons? V1949) (cons? (tl V1949))) (if (= (length (hd V1949)) (length (hd (tl V1949)))) (shen.prolog-aritycheck V1948 (tl V1949)) (simple-error (cn "arity error in prolog procedure " (shen.app (cons V1948 ()) "
" shen.a))))) (true (shen.f_error shen.prolog-aritycheck))))

(defun shen.linearise-clause (V1951) (cond ((and (cons? V1951) (and (cons? (tl V1951)) (and (= :- (hd (tl V1951))) (and (cons? (tl (tl V1951))) (= () (tl (tl (tl V1951)))))))) (let Linear (shen.linearise (cons (hd V1951) (tl (tl V1951)))) (shen.clause_form Linear))) (true (shen.f_error shen.linearise-clause))))

(defun shen.clause_form (V1953) (cond ((and (cons? V1953) (and (cons? (tl V1953)) (= () (tl (tl V1953))))) (cons (shen.explicit_modes (hd V1953)) (cons :- (cons (shen.cf_help (hd (tl V1953))) ())))) (true (shen.f_error shen.clause_form))))

(defun shen.explicit_modes (V1955) (cond ((cons? V1955) (cons (hd V1955) (map (lambda X (shen.em_help X)) (tl V1955)))) (true (shen.f_error shen.explicit_modes))))

(defun shen.em_help (V1957) (cond ((and (cons? V1957) (and (= mode (hd V1957)) (and (cons? (tl V1957)) (and (cons? (tl (tl V1957))) (= () (tl (tl (tl V1957)))))))) V1957) (true (cons mode (cons V1957 (cons + ()))))))

(defun shen.cf_help (V1959) (cond ((and (cons? V1959) (and (= where (hd V1959)) (and (cons? (tl V1959)) (and (cons? (hd (tl V1959))) (and (= = (hd (hd (tl V1959)))) (and (cons? (tl (hd (tl V1959)))) (and (cons? (tl (tl (hd (tl V1959))))) (and (= () (tl (tl (tl (hd (tl V1959)))))) (and (cons? (tl (tl V1959))) (= () (tl (tl (tl V1959))))))))))))) (cons (cons (if (value shen.*occurs*) unify! unify) (tl (hd (tl V1959)))) (shen.cf_help (hd (tl (tl V1959)))))) (true V1959)))

(defun occurs-check (V1965) (cond ((= + V1965) (set shen.*occurs* true)) ((= - V1965) (set shen.*occurs* false)) (true (simple-error "occurs-check expects + or -
"))))

(defun shen.aum (V1968 V1969) (cond ((and (cons? V1968) (and (cons? (hd V1968)) (and (cons? (tl V1968)) (and (= :- (hd (tl V1968))) (and (cons? (tl (tl V1968))) (= () (tl (tl (tl V1968))))))))) (let MuApplication (shen.make_mu_application (cons shen.mu (cons (tl (hd V1968)) (cons (shen.continuation_call (tl (hd V1968)) (hd (tl (tl V1968)))) ()))) V1969) (shen.mu_reduction MuApplication +))) (true (shen.f_error shen.aum))))

(defun shen.continuation_call (V1972 V1973) (let VTerms (cons ProcessN (shen.extract_vars V1972)) (let VBody (shen.extract_vars V1973) (let Free (remove Throwcontrol (difference VBody VTerms)) (shen.cc_help Free V1973)))))

(defun remove (V1976 V1977) (shen.remove-h V1976 V1977 ()))

(defun shen.remove-h (V1984 V1985 V1986) (cond ((= () V1985) (reverse V1986)) ((and (cons? V1985) (= (hd V1985) V1984)) (shen.remove-h (hd V1985) (tl V1985) V1986)) ((cons? V1985) (shen.remove-h V1984 (tl V1985) (cons (hd V1985) V1986))) (true (shen.f_error shen.remove-h))))

(defun shen.cc_help (V1989 V1990) (cond ((and (= () V1989) (= () V1990)) (cons shen.pop (cons shen.the (cons shen.stack ())))) ((= () V1990) (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons V1989 (cons and (cons shen.then (cons (cons shen.pop (cons shen.the (cons shen.stack ()))) ()))))))))) ((= () V1989) (cons call (cons shen.the (cons shen.continuation (cons V1990 ()))))) (true (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons V1989 (cons and (cons shen.then (cons (cons call (cons shen.the (cons shen.continuation (cons V1990 ())))) ())))))))))))

(defun shen.make_mu_application (V1993 V1994) (cond ((and (cons? V1993) (and (= shen.mu (hd V1993)) (and (cons? (tl V1993)) (and (= () (hd (tl V1993))) (and (cons? (tl (tl V1993))) (and (= () (tl (tl (tl V1993)))) (= () V1994))))))) (hd (tl (tl V1993)))) ((and (cons? V1993) (and (= shen.mu (hd V1993)) (and (cons? (tl V1993)) (and (cons? (hd (tl V1993))) (and (cons? (tl (tl V1993))) (and (= () (tl (tl (tl V1993)))) (cons? V1994))))))) (cons (cons shen.mu (cons (hd (hd (tl V1993))) (cons (shen.make_mu_application (cons shen.mu (cons (tl (hd (tl V1993))) (tl (tl V1993)))) (tl V1994)) ()))) (cons (hd V1994) ()))) (true (shen.f_error shen.make_mu_application))))

(defun shen.mu_reduction (V2003 V2004) (cond ((and (cons? V2003) (and (cons? (hd V2003)) (and (= shen.mu (hd (hd V2003))) (and (cons? (tl (hd V2003))) (and (cons? (hd (tl (hd V2003)))) (and (= mode (hd (hd (tl (hd V2003))))) (and (cons? (tl (hd (tl (hd V2003))))) (and (cons? (tl (tl (hd (tl (hd V2003)))))) (and (= () (tl (tl (tl (hd (tl (hd V2003))))))) (and (cons? (tl (tl (hd V2003)))) (and (= () (tl (tl (tl (hd V2003))))) (and (cons? (tl V2003)) (= () (tl (tl V2003))))))))))))))) (shen.mu_reduction (cons (cons shen.mu (cons (hd (tl (hd (tl (hd V2003))))) (tl (tl (hd V2003))))) (tl V2003)) (hd (tl (tl (hd (tl (hd V2003)))))))) ((and (cons? V2003) (and (cons? (hd V2003)) (and (= shen.mu (hd (hd V2003))) (and (cons? (tl (hd V2003))) (and (cons? (tl (tl (hd V2003)))) (and (= () (tl (tl (tl (hd V2003))))) (and (cons? (tl V2003)) (and (= () (tl (tl V2003))) (= _ (hd (tl (hd V2003)))))))))))) (shen.mu_reduction (hd (tl (tl (hd V2003)))) V2004)) ((and (cons? V2003) (and (cons? (hd V2003)) (and (= shen.mu (hd (hd V2003))) (and (cons? (tl (hd V2003))) (and (cons? (tl (tl (hd V2003)))) (and (= () (tl (tl (tl (hd V2003))))) (and (cons? (tl V2003)) (and (= () (tl (tl V2003))) (shen.ephemeral_variable? (hd (tl (hd V2003))) (hd (tl V2003))))))))))) (subst (hd (tl V2003)) (hd (tl (hd V2003))) (shen.mu_reduction (hd (tl (tl (hd V2003)))) V2004))) ((and (cons? V2003) (and (cons? (hd V2003)) (and (= shen.mu (hd (hd V2003))) (and (cons? (tl (hd V2003))) (and (cons? (tl (tl (hd V2003)))) (and (= () (tl (tl (tl (hd V2003))))) (and (cons? (tl V2003)) (and (= () (tl (tl V2003))) (variable? (hd (tl (hd V2003)))))))))))) (cons let (cons (hd (tl (hd V2003))) (cons shen.be (cons (hd (tl V2003)) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V2003)))) V2004) ()))))))) ((and (cons? V2003) (and (cons? (hd V2003)) (and (= shen.mu (hd (hd V2003))) (and (cons? (tl (hd V2003))) (and (cons? (tl (tl (hd V2003)))) (and (= () (tl (tl (tl (hd V2003))))) (and (cons? (tl V2003)) (and (= () (tl (tl V2003))) (and (= - V2004) (shen.prolog_constant? (hd (tl (hd V2003))))))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V2003))))) (cons in (cons (cons if (cons (cons Z (cons is (cons identical (cons shen.to (cons (hd (tl (hd V2003))) ()))))) (cons shen.then (cons (shen.mu_reduction (hd (tl (tl (hd V2003)))) -) (cons shen.else (cons shen.failed! ())))))) ())))))))) ((and (cons? V2003) (and (cons? (hd V2003)) (and (= shen.mu (hd (hd V2003))) (and (cons? (tl (hd V2003))) (and (cons? (tl (tl (hd V2003)))) (and (= () (tl (tl (tl (hd V2003))))) (and (cons? (tl V2003)) (and (= () (tl (tl V2003))) (and (= + V2004) (shen.prolog_constant? (hd (tl (hd V2003))))))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V2003))))) (cons in (cons (cons if (cons (cons Z (cons is (cons identical (cons shen.to (cons (hd (tl (hd V2003))) ()))))) (cons shen.then (cons (shen.mu_reduction (hd (tl (tl (hd V2003)))) +) (cons shen.else (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.variable ())))) (cons shen.then (cons (cons bind (cons Z (cons shen.to (cons (hd (tl (hd V2003))) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V2003)))) +) ())))))) (cons shen.else (cons shen.failed! ())))))) ())))))) ())))))))) ((and (cons? V2003) (and (cons? (hd V2003)) (and (= shen.mu (hd (hd V2003))) (and (cons? (tl (hd V2003))) (and (cons? (hd (tl (hd V2003)))) (and (cons? (tl (tl (hd V2003)))) (and (= () (tl (tl (tl (hd V2003))))) (and (cons? (tl V2003)) (and (= () (tl (tl V2003))) (= - V2004)))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V2003))))) (cons in (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.non-empty (cons list ()))))) (cons shen.then (cons (shen.mu_reduction (cons (cons shen.mu (cons (hd (hd (tl (hd V2003)))) (cons (cons (cons shen.mu (cons (tl (hd (tl (hd V2003)))) (tl (tl (hd V2003))))) (cons (cons shen.the (cons tail (cons shen.of (cons Z ())))) ())) ()))) (cons (cons shen.the (cons head (cons shen.of (cons Z ())))) ())) -) (cons shen.else (cons shen.failed! ())))))) ())))))))) ((and (cons? V2003) (and (cons? (hd V2003)) (and (= shen.mu (hd (hd V2003))) (and (cons? (tl (hd V2003))) (and (cons? (hd (tl (hd V2003)))) (and (cons? (tl (tl (hd V2003)))) (and (= () (tl (tl (tl (hd V2003))))) (and (cons? (tl V2003)) (and (= () (tl (tl V2003))) (= + V2004)))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V2003))))) (cons in (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.non-empty (cons list ()))))) (cons shen.then (cons (shen.mu_reduction (cons (cons shen.mu (cons (hd (hd (tl (hd V2003)))) (cons (cons (cons shen.mu (cons (tl (hd (tl (hd V2003)))) (tl (tl (hd V2003))))) (cons (cons shen.the (cons tail (cons shen.of (cons Z ())))) ())) ()))) (cons (cons shen.the (cons head (cons shen.of (cons Z ())))) ())) +) (cons shen.else (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.variable ())))) (cons shen.then (cons (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons (shen.extract_vars (hd (tl (hd V2003)))) (cons and (cons shen.then (cons (cons bind (cons Z (cons shen.to (cons (shen.rcons_form (shen.remove_modes (hd (tl (hd V2003))))) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V2003)))) +) ())))))) ())))))))) (cons shen.else (cons shen.failed! ())))))) ())))))) ())))))))) (true V2003)))

(defun shen.rcons_form (V2006) (cond ((cons? V2006) (cons cons (cons (shen.rcons_form (hd V2006)) (cons (shen.rcons_form (tl V2006)) ())))) (true V2006)))

(defun shen.remove_modes (V2008) (cond ((and (cons? V2008) (and (= mode (hd V2008)) (and (cons? (tl V2008)) (and (cons? (tl (tl V2008))) (and (= + (hd (tl (tl V2008)))) (= () (tl (tl (tl V2008))))))))) (shen.remove_modes (hd (tl V2008)))) ((and (cons? V2008) (and (= mode (hd V2008)) (and (cons? (tl V2008)) (and (cons? (tl (tl V2008))) (and (= - (hd (tl (tl V2008)))) (= () (tl (tl (tl V2008))))))))) (shen.remove_modes (hd (tl V2008)))) ((cons? V2008) (cons (shen.remove_modes (hd V2008)) (shen.remove_modes (tl V2008)))) (true V2008)))

(defun shen.ephemeral_variable? (V2011 V2012) (and (variable? V2011) (variable? V2012)))

(defun shen.prolog_constant? (V2022) (cond ((cons? V2022) false) (true true)))

(defun shen.aum_to_shen (V2024) (cond ((and (cons? V2024) (and (= let (hd V2024)) (and (cons? (tl V2024)) (and (cons? (tl (tl V2024))) (and (= shen.be (hd (tl (tl V2024)))) (and (cons? (tl (tl (tl V2024)))) (and (cons? (tl (tl (tl (tl V2024))))) (and (= in (hd (tl (tl (tl (tl V2024)))))) (and (cons? (tl (tl (tl (tl (tl V2024)))))) (= () (tl (tl (tl (tl (tl (tl V2024)))))))))))))))) (cons let (cons (hd (tl V2024)) (cons (shen.aum_to_shen (hd (tl (tl (tl V2024))))) (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V2024))))))) ()))))) ((and (cons? V2024) (and (= shen.the (hd V2024)) (and (cons? (tl V2024)) (and (= shen.result (hd (tl V2024))) (and (cons? (tl (tl V2024))) (and (= shen.of (hd (tl (tl V2024)))) (and (cons? (tl (tl (tl V2024)))) (and (= shen.dereferencing (hd (tl (tl (tl V2024))))) (and (cons? (tl (tl (tl (tl V2024))))) (= () (tl (tl (tl (tl (tl V2024))))))))))))))) (cons shen.lazyderef (cons (shen.aum_to_shen (hd (tl (tl (tl (tl V2024)))))) (cons ProcessN ())))) ((and (cons? V2024) (and (= if (hd V2024)) (and (cons? (tl V2024)) (and (cons? (tl (tl V2024))) (and (= shen.then (hd (tl (tl V2024)))) (and (cons? (tl (tl (tl V2024)))) (and (cons? (tl (tl (tl (tl V2024))))) (and (= shen.else (hd (tl (tl (tl (tl V2024)))))) (and (cons? (tl (tl (tl (tl (tl V2024)))))) (= () (tl (tl (tl (tl (tl (tl V2024)))))))))))))))) (cons if (cons (shen.aum_to_shen (hd (tl V2024))) (cons (shen.aum_to_shen (hd (tl (tl (tl V2024))))) (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V2024))))))) ()))))) ((and (cons? V2024) (and (cons? (tl V2024)) (and (= is (hd (tl V2024))) (and (cons? (tl (tl V2024))) (and (= shen.a (hd (tl (tl V2024)))) (and (cons? (tl (tl (tl V2024)))) (and (= shen.variable (hd (tl (tl (tl V2024))))) (= () (tl (tl (tl (tl V2024)))))))))))) (cons shen.pvar? (cons (hd V2024) ()))) ((and (cons? V2024) (and (cons? (tl V2024)) (and (= is (hd (tl V2024))) (and (cons? (tl (tl V2024))) (and (= shen.a (hd (tl (tl V2024)))) (and (cons? (tl (tl (tl V2024)))) (and (= shen.non-empty (hd (tl (tl (tl V2024))))) (and (cons? (tl (tl (tl (tl V2024))))) (and (= list (hd (tl (tl (tl (tl V2024)))))) (= () (tl (tl (tl (tl (tl V2024))))))))))))))) (cons cons? (cons (hd V2024) ()))) ((and (cons? V2024) (and (= shen.rename (hd V2024)) (and (cons? (tl V2024)) (and (= shen.the (hd (tl V2024))) (and (cons? (tl (tl V2024))) (and (= shen.variables (hd (tl (tl V2024)))) (and (cons? (tl (tl (tl V2024)))) (and (= in (hd (tl (tl (tl V2024))))) (and (cons? (tl (tl (tl (tl V2024))))) (and (= () (hd (tl (tl (tl (tl V2024)))))) (and (cons? (tl (tl (tl (tl (tl V2024)))))) (and (= and (hd (tl (tl (tl (tl (tl V2024))))))) (and (cons? (tl (tl (tl (tl (tl (tl V2024))))))) (and (= shen.then (hd (tl (tl (tl (tl (tl (tl V2024)))))))) (and (cons? (tl (tl (tl (tl (tl (tl (tl V2024)))))))) (= () (tl (tl (tl (tl (tl (tl (tl (tl V2024)))))))))))))))))))))))) (shen.aum_to_shen (hd (tl (tl (tl (tl (tl (tl (tl V2024)))))))))) ((and (cons? V2024) (and (= shen.rename (hd V2024)) (and (cons? (tl V2024)) (and (= shen.the (hd (tl V2024))) (and (cons? (tl (tl V2024))) (and (= shen.variables (hd (tl (tl V2024)))) (and (cons? (tl (tl (tl V2024)))) (and (= in (hd (tl (tl (tl V2024))))) (and (cons? (tl (tl (tl (tl V2024))))) (and (cons? (hd (tl (tl (tl (tl V2024)))))) (and (cons? (tl (tl (tl (tl (tl V2024)))))) (and (= and (hd (tl (tl (tl (tl (tl V2024))))))) (and (cons? (tl (tl (tl (tl (tl (tl V2024))))))) (and (= shen.then (hd (tl (tl (tl (tl (tl (tl V2024)))))))) (and (cons? (tl (tl (tl (tl (tl (tl (tl V2024)))))))) (= () (tl (tl (tl (tl (tl (tl (tl (tl V2024)))))))))))))))))))))))) (cons let (cons (hd (hd (tl (tl (tl (tl V2024)))))) (cons (cons shen.newpv (cons ProcessN ())) (cons (shen.aum_to_shen (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons (tl (hd (tl (tl (tl (tl V2024)))))) (tl (tl (tl (tl (tl V2024))))))))))) ()))))) ((and (cons? V2024) (and (= bind (hd V2024)) (and (cons? (tl V2024)) (and (cons? (tl (tl V2024))) (and (= shen.to (hd (tl (tl V2024)))) (and (cons? (tl (tl (tl V2024)))) (and (cons? (tl (tl (tl (tl V2024))))) (and (= in (hd (tl (tl (tl (tl V2024)))))) (and (cons? (tl (tl (tl (tl (tl V2024)))))) (= () (tl (tl (tl (tl (tl (tl V2024)))))))))))))))) (cons do (cons (cons shen.bindv (cons (hd (tl V2024)) (cons (shen.chwild (hd (tl (tl (tl V2024))))) (cons ProcessN ())))) (cons (cons let (cons Result (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V2024))))))) (cons (cons do (cons (cons shen.unbindv (cons (hd (tl V2024)) (cons ProcessN ()))) (cons Result ()))) ())))) ())))) ((and (cons? V2024) (and (cons? (tl V2024)) (and (= is (hd (tl V2024))) (and (cons? (tl (tl V2024))) (and (= identical (hd (tl (tl V2024)))) (and (cons? (tl (tl (tl V2024)))) (and (= shen.to (hd (tl (tl (tl V2024))))) (and (cons? (tl (tl (tl (tl V2024))))) (= () (tl (tl (tl (tl (tl V2024)))))))))))))) (cons = (cons (hd (tl (tl (tl (tl V2024))))) (cons (hd V2024) ())))) ((= shen.failed! V2024) false) ((and (cons? V2024) (and (= shen.the (hd V2024)) (and (cons? (tl V2024)) (and (= head (hd (tl V2024))) (and (cons? (tl (tl V2024))) (and (= shen.of (hd (tl (tl V2024)))) (and (cons? (tl (tl (tl V2024)))) (= () (tl (tl (tl (tl V2024)))))))))))) (cons hd (tl (tl (tl V2024))))) ((and (cons? V2024) (and (= shen.the (hd V2024)) (and (cons? (tl V2024)) (and (= tail (hd (tl V2024))) (and (cons? (tl (tl V2024))) (and (= shen.of (hd (tl (tl V2024)))) (and (cons? (tl (tl (tl V2024)))) (= () (tl (tl (tl (tl V2024)))))))))))) (cons tl (tl (tl (tl V2024))))) ((and (cons? V2024) (and (= shen.pop (hd V2024)) (and (cons? (tl V2024)) (and (= shen.the (hd (tl V2024))) (and (cons? (tl (tl V2024))) (and (= shen.stack (hd (tl (tl V2024)))) (= () (tl (tl (tl V2024)))))))))) (cons do (cons (cons shen.incinfs ()) (cons (cons thaw (cons Continuation ())) ())))) ((and (cons? V2024) (and (= call (hd V2024)) (and (cons? (tl V2024)) (and (= shen.the (hd (tl V2024))) (and (cons? (tl (tl V2024))) (and (= shen.continuation (hd (tl (tl V2024)))) (and (cons? (tl (tl (tl V2024)))) (= () (tl (tl (tl (tl V2024)))))))))))) (cons do (cons (cons shen.incinfs ()) (cons (shen.call_the_continuation (shen.chwild (hd (tl (tl (tl V2024))))) ProcessN Continuation) ())))) (true V2024)))

(defun shen.chwild (V2026) (cond ((= V2026 _) (cons shen.newpv (cons ProcessN ()))) ((cons? V2026) (map (lambda Z (shen.chwild Z)) V2026)) (true V2026)))

(defun shen.newpv (V2028) (let Count+1 (+ (<-address (value shen.*varcounter*) V2028) 1) (let IncVar (address-> (value shen.*varcounter*) V2028 Count+1) (let Vector (<-address (value shen.*prologvectors*) V2028) (let ResizeVectorIfNeeded (if (= Count+1 (limit Vector)) (shen.resizeprocessvector V2028 Count+1) shen.skip) (shen.mk-pvar Count+1))))))

(defun shen.resizeprocessvector (V2031 V2032) (let Vector (<-address (value shen.*prologvectors*) V2031) (let BigVector (shen.resize-vector Vector (+ V2032 V2032) shen.-null-) (address-> (value shen.*prologvectors*) V2031 BigVector))))

(defun shen.resize-vector (V2036 V2037 V2038) (let BigVector (address-> (absvector (+ 1 V2037)) 0 V2037) (shen.copy-vector V2036 BigVector (limit V2036) V2037 V2038)))

(defun shen.copy-vector (V2044 V2045 V2046 V2047 V2048) (shen.copy-vector-stage-2 (+ 1 V2046) (+ V2047 1) V2048 (shen.copy-vector-stage-1 1 V2044 V2045 (+ 1 V2046))))

(defun shen.copy-vector-stage-1 (V2056 V2057 V2058 V2059) (cond ((= V2059 V2056) V2058) (true (shen.copy-vector-stage-1 (+ 1 V2056) V2057 (address-> V2058 V2056 (<-address V2057 V2056)) V2059))))

(defun shen.copy-vector-stage-2 (V2067 V2068 V2069 V2070) (cond ((= V2068 V2067) V2070) (true (shen.copy-vector-stage-2 (+ V2067 1) V2068 V2069 (address-> V2070 V2067 V2069)))))

(defun shen.mk-pvar (V2072) (address-> (address-> (absvector 2) 0 shen.pvar) 1 V2072))

(defun shen.pvar? (V2074) (and (absvector? V2074) (= (<-address/or V2074 0 (freeze shen.not-pvar)) shen.pvar)))

(defun shen.bindv (V2078 V2079 V2080) (let Vector (<-address (value shen.*prologvectors*) V2080) (address-> Vector (<-address V2078 1) V2079)))

(defun shen.unbindv (V2083 V2084) (let Vector (<-address (value shen.*prologvectors*) V2084) (address-> Vector (<-address V2083 1) shen.-null-)))

(defun shen.incinfs () (set shen.*infs* (+ 1 (value shen.*infs*))))

(defun shen.call_the_continuation (V2088 V2089 V2090) (cond ((and (cons? V2088) (and (cons? (hd V2088)) (= () (tl V2088)))) (cons (hd (hd V2088)) (append (tl (hd V2088)) (cons V2089 (cons V2090 ()))))) ((and (cons? V2088) (cons? (hd V2088))) (let NewContinuation (shen.newcontinuation (tl V2088) V2089 V2090) (cons (hd (hd V2088)) (append (tl (hd V2088)) (cons V2089 (cons NewContinuation ())))))) (true (shen.f_error shen.call_the_continuation))))

(defun shen.newcontinuation (V2094 V2095 V2096) (cond ((= () V2094) V2096) ((and (cons? V2094) (cons? (hd V2094))) (cons freeze (cons (cons (hd (hd V2094)) (append (tl (hd V2094)) (cons V2095 (cons (shen.newcontinuation (tl V2094) V2095 V2096) ())))) ()))) (true (shen.f_error shen.newcontinuation))))

(defun return (V2104 V2105 V2106) (shen.deref V2104 V2105))

(defun shen.measure&return (V2114 V2115 V2116) (do (shen.prhush (shen.app (value shen.*infs*) " inferences
" shen.a) (stoutput)) (shen.deref V2114 V2115)))

(defun unify (V2121 V2122 V2123 V2124) (shen.lzy= (shen.lazyderef V2121 V2123) (shen.lazyderef V2122 V2123) V2123 V2124))

(defun shen.lzy= (V2146 V2147 V2148 V2149) (cond ((= V2147 V2146) (thaw V2149)) ((shen.pvar? V2146) (bind V2146 V2147 V2148 V2149)) ((shen.pvar? V2147) (bind V2147 V2146 V2148 V2149)) ((and (cons? V2146) (cons? V2147)) (shen.lzy= (shen.lazyderef (hd V2146) V2148) (shen.lazyderef (hd V2147) V2148) V2148 (freeze (shen.lzy= (shen.lazyderef (tl V2146) V2148) (shen.lazyderef (tl V2147) V2148) V2148 V2149)))) (true false)))

(defun shen.deref (V2152 V2153) (cond ((cons? V2152) (cons (shen.deref (hd V2152) V2153) (shen.deref (tl V2152) V2153))) (true (if (shen.pvar? V2152) (let Value (shen.valvector V2152 V2153) (if (= Value shen.-null-) V2152 (shen.deref Value V2153))) V2152))))

(defun shen.lazyderef (V2156 V2157) (if (shen.pvar? V2156) (let Value (shen.valvector V2156 V2157) (if (= Value shen.-null-) V2156 (shen.lazyderef Value V2157))) V2156))

(defun shen.valvector (V2160 V2161) (<-address (<-address (value shen.*prologvectors*) V2161) (<-address V2160 1)))

(defun unify! (V2166 V2167 V2168 V2169) (shen.lzy=! (shen.lazyderef V2166 V2168) (shen.lazyderef V2167 V2168) V2168 V2169))

(defun shen.lzy=! (V2191 V2192 V2193 V2194) (cond ((= V2192 V2191) (thaw V2194)) ((and (shen.pvar? V2191) (not (shen.occurs? V2191 (shen.deref V2192 V2193)))) (bind V2191 V2192 V2193 V2194)) ((and (shen.pvar? V2192) (not (shen.occurs? V2192 (shen.deref V2191 V2193)))) (bind V2192 V2191 V2193 V2194)) ((and (cons? V2191) (cons? V2192)) (shen.lzy=! (shen.lazyderef (hd V2191) V2193) (shen.lazyderef (hd V2192) V2193) V2193 (freeze (shen.lzy=! (shen.lazyderef (tl V2191) V2193) (shen.lazyderef (tl V2192) V2193) V2193 V2194)))) (true false)))

(defun shen.occurs? (V2206 V2207) (cond ((= V2207 V2206) true) ((cons? V2207) (or (shen.occurs? V2206 (hd V2207)) (shen.occurs? V2206 (tl V2207)))) (true false)))

(defun identical (V2212 V2213 V2214 V2215) (shen.lzy== (shen.lazyderef V2212 V2214) (shen.lazyderef V2213 V2214) V2214 V2215))

(defun shen.lzy== (V2237 V2238 V2239 V2240) (cond ((= V2238 V2237) (thaw V2240)) ((and (cons? V2237) (cons? V2238)) (shen.lzy== (shen.lazyderef (hd V2237) V2239) (shen.lazyderef (hd V2238) V2239) V2239 (freeze (shen.lzy== (tl V2237) (tl V2238) V2239 V2240)))) (true false)))

(defun shen.pvar (V2242) (cn "Var" (shen.app (<-address V2242 1) "" shen.a)))

(defun bind (V2247 V2248 V2249 V2250) (do (shen.bindv V2247 V2248 V2249) (let Result (thaw V2250) (do (shen.unbindv V2247 V2249) Result))))

(defun fwhen (V2268 V2269 V2270) (cond ((= true V2268) (thaw V2270)) ((= false V2268) false) (true (simple-error (cn "fwhen expects a boolean: not " (shen.app V2268 "%" shen.s))))))

(defun call (V2286 V2287 V2288) (cond ((cons? V2286) (shen.call-help (function (shen.lazyderef (hd V2286) V2287)) (tl V2286) V2287 V2288)) (true false)))

(defun shen.call-help (V2293 V2294 V2295 V2296) (cond ((= () V2294) (V2293 V2295 V2296)) ((cons? V2294) (shen.call-help (V2293 (hd V2294)) (tl V2294) V2295 V2296)) (true (shen.f_error shen.call-help))))

(defun shen.intprolog (V2298) (cond ((and (cons? V2298) (cons? (hd V2298))) (let ProcessN (shen.start-new-prolog-process) (shen.intprolog-help (hd (hd V2298)) (shen.insert-prolog-variables (cons (tl (hd V2298)) (cons (tl V2298) ())) ProcessN) ProcessN))) (true (shen.f_error shen.intprolog))))

(defun shen.intprolog-help (V2302 V2303 V2304) (cond ((and (cons? V2303) (and (cons? (tl V2303)) (= () (tl (tl V2303))))) (shen.intprolog-help-help V2302 (hd V2303) (hd (tl V2303)) V2304)) (true (shen.f_error shen.intprolog-help))))

(defun shen.intprolog-help-help (V2309 V2310 V2311 V2312) (cond ((= () V2310) (V2309 V2312 (freeze (shen.call-rest V2311 V2312)))) ((cons? V2310) (shen.intprolog-help-help (V2309 (hd V2310)) (tl V2310) V2311 V2312)) (true (shen.f_error shen.intprolog-help-help))))

(defun shen.call-rest (V2317 V2318) (cond ((= () V2317) true) ((and (cons? V2317) (and (cons? (hd V2317)) (cons? (tl (hd V2317))))) (shen.call-rest (cons (cons ((hd (hd V2317)) (hd (tl (hd V2317)))) (tl (tl (hd V2317)))) (tl V2317)) V2318)) ((and (cons? V2317) (and (cons? (hd V2317)) (= () (tl (hd V2317))))) ((hd (hd V2317)) V2318 (freeze (shen.call-rest (tl V2317) V2318)))) (true (shen.f_error shen.call-rest))))

(defun shen.start-new-prolog-process () (let IncrementProcessCounter (set shen.*process-counter* (+ 1 (value shen.*process-counter*))) (shen.initialise-prolog IncrementProcessCounter)))

(defun shen.insert-prolog-variables (V2321 V2322) (shen.insert-prolog-variables-help V2321 (shen.flatten V2321) V2322))

(defun shen.insert-prolog-variables-help (V2330 V2331 V2332) (cond ((= () V2331) V2330) ((and (cons? V2331) (variable? (hd V2331))) (let V (shen.newpv V2332) (let XV/Y (subst V (hd V2331) V2330) (let Z-Y (remove (hd V2331) (tl V2331)) (shen.insert-prolog-variables-help XV/Y Z-Y V2332))))) ((cons? V2331) (shen.insert-prolog-variables-help V2330 (tl V2331) V2332)) (true (shen.f_error shen.insert-prolog-variables-help))))

(defun shen.initialise-prolog (V2334) (let Vector (address-> (value shen.*prologvectors*) V2334 (shen.fillvector (vector 10) 1 10 shen.-null-)) (let Counter (address-> (value shen.*varcounter*) V2334 1) V2334)))



