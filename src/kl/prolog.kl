"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.<defprolog> (V1612) (let Parse_shen.<predicate*> (shen.<predicate*> V1612) (if (not (= (fail) Parse_shen.<predicate*>)) (let Parse_shen.<clauses*> (shen.<clauses*> Parse_shen.<predicate*>) (if (not (= (fail) Parse_shen.<clauses*>)) (shen.pair (hd Parse_shen.<clauses*>) (hd (shen.prolog->shen (map (lambda Parse_X (shen.insert-predicate (shen.hdtl Parse_shen.<predicate*>) Parse_X)) (shen.hdtl Parse_shen.<clauses*>))))) (fail))) (fail))))

(defun shen.prolog-error (V1621 V1622) (cond ((and (cons? V1622) (and (cons? (tl V1622)) (= () (tl (tl V1622))))) (simple-error (cn "prolog syntax error in " (shen.app V1621 (cn " here:

 " (shen.app (shen.next-50 50 (hd V1622)) "
" shen.a)) shen.a)))) (true (simple-error (cn "prolog syntax error in " (shen.app V1621 "
" shen.a))))))

(defun shen.next-50 (V1629 V1630) (cond ((= () V1630) "") ((= 0 V1629) "") ((cons? V1630) (cn (shen.decons-string (hd V1630)) (shen.next-50 (- V1629 1) (tl V1630)))) (true (shen.f_error shen.next-50))))

(defun shen.decons-string (V1632) (cond ((and (cons? V1632) (and (= cons (hd V1632)) (and (cons? (tl V1632)) (and (cons? (tl (tl V1632))) (= () (tl (tl (tl V1632)))))))) (shen.app (shen.eval-cons V1632) " " shen.s)) (true (shen.app V1632 " " shen.r))))

(defun shen.insert-predicate (V1635 V1636) (cond ((and (cons? V1636) (and (cons? (tl V1636)) (= () (tl (tl V1636))))) (cons (cons V1635 (hd V1636)) (cons :- (tl V1636)))) (true (shen.f_error shen.insert-predicate))))

(defun shen.<predicate*> (V1638) (if (cons? (hd V1638)) (let Parse_X (hd (hd V1638)) (shen.pair (hd (shen.pair (tl (hd V1638)) (shen.hdtl V1638))) Parse_X)) (fail)))

(defun shen.<clauses*> (V1640) (let YaccParse (let Parse_shen.<clause*> (shen.<clause*> V1640) (if (not (= (fail) Parse_shen.<clause*>)) (let Parse_shen.<clauses*> (shen.<clauses*> Parse_shen.<clause*>) (if (not (= (fail) Parse_shen.<clauses*>)) (shen.pair (hd Parse_shen.<clauses*>) (cons (shen.hdtl Parse_shen.<clause*>) (shen.hdtl Parse_shen.<clauses*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1640) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<clause*> (V1642) (let Parse_shen.<head*> (shen.<head*> V1642) (if (not (= (fail) Parse_shen.<head*>)) (if (and (cons? (hd Parse_shen.<head*>)) (= <-- (hd (hd Parse_shen.<head*>)))) (let Parse_shen.<body*> (shen.<body*> (shen.pair (tl (hd Parse_shen.<head*>)) (shen.hdtl Parse_shen.<head*>))) (if (not (= (fail) Parse_shen.<body*>)) (let Parse_shen.<end*> (shen.<end*> Parse_shen.<body*>) (if (not (= (fail) Parse_shen.<end*>)) (shen.pair (hd Parse_shen.<end*>) (cons (shen.hdtl Parse_shen.<head*>) (cons (shen.hdtl Parse_shen.<body*>) ()))) (fail))) (fail))) (fail)) (fail))))

(defun shen.<head*> (V1644) (let YaccParse (let Parse_shen.<term*> (shen.<term*> V1644) (if (not (= (fail) Parse_shen.<term*>)) (let Parse_shen.<head*> (shen.<head*> Parse_shen.<term*>) (if (not (= (fail) Parse_shen.<head*>)) (shen.pair (hd Parse_shen.<head*>) (cons (shen.hdtl Parse_shen.<term*>) (shen.hdtl Parse_shen.<head*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1644) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<term*> (V1646) (if (cons? (hd V1646)) (let Parse_X (hd (hd V1646)) (if (and (not (= <-- Parse_X)) (shen.legitimate-term? Parse_X)) (shen.pair (hd (shen.pair (tl (hd V1646)) (shen.hdtl V1646))) (shen.eval-cons Parse_X)) (fail))) (fail)))

(defun shen.legitimate-term? (V1652) (cond ((and (cons? V1652) (and (= cons (hd V1652)) (and (cons? (tl V1652)) (and (cons? (tl (tl V1652))) (= () (tl (tl (tl V1652)))))))) (and (shen.legitimate-term? (hd (tl V1652))) (shen.legitimate-term? (hd (tl (tl V1652)))))) ((and (cons? V1652) (and (= mode (hd V1652)) (and (cons? (tl V1652)) (and (cons? (tl (tl V1652))) (and (= + (hd (tl (tl V1652)))) (= () (tl (tl (tl V1652))))))))) (shen.legitimate-term? (hd (tl V1652)))) ((and (cons? V1652) (and (= mode (hd V1652)) (and (cons? (tl V1652)) (and (cons? (tl (tl V1652))) (and (= - (hd (tl (tl V1652)))) (= () (tl (tl (tl V1652))))))))) (shen.legitimate-term? (hd (tl V1652)))) ((cons? V1652) false) (true true)))

(defun shen.eval-cons (V1654) (cond ((and (cons? V1654) (and (= cons (hd V1654)) (and (cons? (tl V1654)) (and (cons? (tl (tl V1654))) (= () (tl (tl (tl V1654)))))))) (cons (shen.eval-cons (hd (tl V1654))) (shen.eval-cons (hd (tl (tl V1654)))))) ((and (cons? V1654) (and (= mode (hd V1654)) (and (cons? (tl V1654)) (and (cons? (tl (tl V1654))) (= () (tl (tl (tl V1654)))))))) (cons mode (cons (shen.eval-cons (hd (tl V1654))) (tl (tl V1654))))) (true V1654)))

(defun shen.<body*> (V1656) (let YaccParse (let Parse_shen.<literal*> (shen.<literal*> V1656) (if (not (= (fail) Parse_shen.<literal*>)) (let Parse_shen.<body*> (shen.<body*> Parse_shen.<literal*>) (if (not (= (fail) Parse_shen.<body*>)) (shen.pair (hd Parse_shen.<body*>) (cons (shen.hdtl Parse_shen.<literal*>) (shen.hdtl Parse_shen.<body*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1656) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<literal*> (V1658) (let YaccParse (if (and (cons? (hd V1658)) (= ! (hd (hd V1658)))) (shen.pair (hd (shen.pair (tl (hd V1658)) (shen.hdtl V1658))) (cons cut (cons (intern "Throwcontrol") ()))) (fail)) (if (= YaccParse (fail)) (if (cons? (hd V1658)) (let Parse_X (hd (hd V1658)) (if (cons? Parse_X) (shen.pair (hd (shen.pair (tl (hd V1658)) (shen.hdtl V1658))) Parse_X) (fail))) (fail)) YaccParse)))

(defun shen.<end*> (V1660) (if (cons? (hd V1660)) (let Parse_X (hd (hd V1660)) (if (= Parse_X ;) (shen.pair (hd (shen.pair (tl (hd V1660)) (shen.hdtl V1660))) Parse_X) (fail))) (fail)))

(defun cut (V1664 V1665 V1666) (let Result (thaw V1666) (if (= Result false) V1664 Result)))

(defun shen.insert_modes (V1668) (cond ((and (cons? V1668) (and (= mode (hd V1668)) (and (cons? (tl V1668)) (and (cons? (tl (tl V1668))) (= () (tl (tl (tl V1668)))))))) V1668) ((= () V1668) ()) ((cons? V1668) (cons (cons mode (cons (hd V1668) (cons + ()))) (cons mode (cons (shen.insert_modes (tl V1668)) (cons - ()))))) (true V1668)))

(defun shen.s-prolog (V1670) (map (lambda X (eval X)) (shen.prolog->shen V1670)))

(defun shen.prolog->shen (V1672) (map (lambda X (shen.compile_prolog_procedure X)) (shen.group_clauses (map (lambda X (shen.s-prolog_clause X)) (mapcan (lambda X (shen.head_abstraction X)) V1672)))))

(defun shen.s-prolog_clause (V1674) (cond ((and (cons? V1674) (and (cons? (tl V1674)) (and (= :- (hd (tl V1674))) (and (cons? (tl (tl V1674))) (= () (tl (tl (tl V1674)))))))) (cons (hd V1674) (cons :- (cons (map (lambda X (shen.s-prolog_literal X)) (hd (tl (tl V1674)))) ())))) (true (shen.f_error shen.s-prolog_clause))))

(defun shen.head_abstraction (V1676) (cond ((and (cons? V1676) (and (cons? (tl V1676)) (and (= :- (hd (tl V1676))) (and (cons? (tl (tl V1676))) (and (= () (tl (tl (tl V1676)))) (< (shen.complexity_head (hd V1676)) (value shen.*maxcomplexity*))))))) (cons V1676 ())) ((and (cons? V1676) (and (cons? (hd V1676)) (and (cons? (tl V1676)) (and (= :- (hd (tl V1676))) (and (cons? (tl (tl V1676))) (= () (tl (tl (tl V1676))))))))) (let Terms (map (lambda Y (gensym V)) (tl (hd V1676))) (let XTerms (shen.rcons_form (shen.remove_modes (tl (hd V1676)))) (let Literal (cons unify (cons (shen.cons_form Terms) (cons XTerms ()))) (let Clause (cons (cons (hd (hd V1676)) Terms) (cons :- (cons (cons Literal (hd (tl (tl V1676)))) ()))) (cons Clause ())))))) (true (shen.f_error shen.head_abstraction))))

(defun shen.complexity_head (V1682) (cond ((cons? V1682) (shen.product (map (lambda X (shen.complexity X)) (tl V1682)))) (true (shen.f_error shen.complexity_head))))

(defun shen.complexity (V1691) (cond ((and (cons? V1691) (and (= mode (hd V1691)) (and (cons? (tl V1691)) (and (cons? (hd (tl V1691))) (and (= mode (hd (hd (tl V1691)))) (and (cons? (tl (hd (tl V1691)))) (and (cons? (tl (tl (hd (tl V1691))))) (and (= () (tl (tl (tl (hd (tl V1691)))))) (and (cons? (tl (tl V1691))) (= () (tl (tl (tl V1691))))))))))))) (shen.complexity (hd (tl V1691)))) ((and (cons? V1691) (and (= mode (hd V1691)) (and (cons? (tl V1691)) (and (cons? (hd (tl V1691))) (and (cons? (tl (tl V1691))) (and (= + (hd (tl (tl V1691)))) (= () (tl (tl (tl V1691)))))))))) (* 2 (* (shen.complexity (cons mode (cons (hd (hd (tl V1691))) (tl (tl V1691))))) (shen.complexity (cons mode (cons (tl (hd (tl V1691))) (tl (tl V1691)))))))) ((and (cons? V1691) (and (= mode (hd V1691)) (and (cons? (tl V1691)) (and (cons? (hd (tl V1691))) (and (cons? (tl (tl V1691))) (and (= - (hd (tl (tl V1691)))) (= () (tl (tl (tl V1691)))))))))) (* (shen.complexity (cons mode (cons (hd (hd (tl V1691))) (tl (tl V1691))))) (shen.complexity (cons mode (cons (tl (hd (tl V1691))) (tl (tl V1691))))))) ((and (cons? V1691) (and (= mode (hd V1691)) (and (cons? (tl V1691)) (and (cons? (tl (tl V1691))) (and (= () (tl (tl (tl V1691)))) (variable? (hd (tl V1691)))))))) 1) ((and (cons? V1691) (and (= mode (hd V1691)) (and (cons? (tl V1691)) (and (cons? (tl (tl V1691))) (and (= + (hd (tl (tl V1691)))) (= () (tl (tl (tl V1691))))))))) 2) ((and (cons? V1691) (and (= mode (hd V1691)) (and (cons? (tl V1691)) (and (cons? (tl (tl V1691))) (and (= - (hd (tl (tl V1691)))) (= () (tl (tl (tl V1691))))))))) 1) (true (shen.complexity (cons mode (cons V1691 (cons + ())))))))

(defun shen.product (V1693) (cond ((= () V1693) 1) ((cons? V1693) (* (hd V1693) (shen.product (tl V1693)))) (true (shen.f_error shen.product))))

(defun shen.s-prolog_literal (V1695) (cond ((and (cons? V1695) (and (= is (hd V1695)) (and (cons? (tl V1695)) (and (cons? (tl (tl V1695))) (= () (tl (tl (tl V1695)))))))) (cons bind (cons (hd (tl V1695)) (cons (shen.insert_deref (hd (tl (tl V1695)))) ())))) ((and (cons? V1695) (and (= when (hd V1695)) (and (cons? (tl V1695)) (= () (tl (tl V1695)))))) (cons fwhen (cons (shen.insert_deref (hd (tl V1695))) ()))) ((and (cons? V1695) (and (= bind (hd V1695)) (and (cons? (tl V1695)) (and (cons? (tl (tl V1695))) (= () (tl (tl (tl V1695)))))))) (cons bind (cons (hd (tl V1695)) (cons (shen.insert_lazyderef (hd (tl (tl V1695)))) ())))) ((and (cons? V1695) (and (= fwhen (hd V1695)) (and (cons? (tl V1695)) (= () (tl (tl V1695)))))) (cons fwhen (cons (shen.insert_lazyderef (hd (tl V1695))) ()))) ((cons? V1695) V1695) (true (shen.f_error shen.s-prolog_literal))))

(defun shen.insert_deref (V1697) (cond ((variable? V1697) (cons shen.deref (cons V1697 (cons ProcessN ())))) ((cons? V1697) (cons (shen.insert_deref (hd V1697)) (shen.insert_deref (tl V1697)))) (true V1697)))

(defun shen.insert_lazyderef (V1699) (cond ((variable? V1699) (cons shen.lazyderef (cons V1699 (cons ProcessN ())))) ((cons? V1699) (cons (shen.insert_lazyderef (hd V1699)) (shen.insert_lazyderef (tl V1699)))) (true V1699)))

(defun shen.group_clauses (V1701) (cond ((= () V1701) ()) ((cons? V1701) (let Group (shen.collect (lambda X (shen.same_predicate? (hd V1701) X)) V1701) (let Rest (difference V1701 Group) (cons Group (shen.group_clauses Rest))))) (true (shen.f_error shen.group_clauses))))

(defun shen.collect (V1706 V1707) (cond ((= () V1707) ()) ((cons? V1707) (if (V1706 (hd V1707)) (cons (hd V1707) (shen.collect V1706 (tl V1707))) (shen.collect V1706 (tl V1707)))) (true (shen.f_error shen.collect))))

(defun shen.same_predicate? (V1726 V1727) (cond ((and (cons? V1726) (and (cons? (hd V1726)) (and (cons? V1727) (cons? (hd V1727))))) (= (hd (hd V1726)) (hd (hd V1727)))) (true (shen.f_error shen.same_predicate?))))

(defun shen.compile_prolog_procedure (V1729) (let F (shen.procedure_name V1729) (let Shen (shen.clauses-to-shen F V1729) Shen)))

(defun shen.procedure_name (V1743) (cond ((and (cons? V1743) (and (cons? (hd V1743)) (cons? (hd (hd V1743))))) (hd (hd (hd V1743)))) (true (shen.f_error shen.procedure_name))))

(defun shen.clauses-to-shen (V1746 V1747) (let Linear (map (lambda X (shen.linearise-clause X)) V1747) (let Arity (shen.prolog-aritycheck V1746 (map (lambda X (head X)) V1747)) (let Parameters (shen.parameters Arity) (let AUM_instructions (map (lambda X (shen.aum X Parameters)) Linear) (let Code (shen.catch-cut (shen.nest-disjunct (map (lambda X (shen.aum_to_shen X)) AUM_instructions))) (let ShenDef (cons define (cons V1746 (append Parameters (append (cons ProcessN (cons Continuation ())) (cons -> (cons Code ())))))) ShenDef)))))))

(defun shen.catch-cut (V1749) (cond ((not (shen.occurs? cut V1749)) V1749) (true (cons let (cons Throwcontrol (cons (cons shen.catchpoint ()) (cons (cons shen.cutpoint (cons Throwcontrol (cons V1749 ()))) ())))))))

(defun shen.catchpoint () (set shen.*catch* (+ 1 (value shen.*catch*))))

(defun shen.cutpoint (V1757 V1758) (cond ((= V1758 V1757) false) (true V1758)))

(defun shen.nest-disjunct (V1760) (cond ((and (cons? V1760) (= () (tl V1760))) (hd V1760)) ((cons? V1760) (shen.lisp-or (hd V1760) (shen.nest-disjunct (tl V1760)))) (true (shen.f_error shen.nest-disjunct))))

(defun shen.lisp-or (V1763 V1764) (cons let (cons Case (cons V1763 (cons (cons if (cons (cons = (cons Case (cons false ()))) (cons V1764 (cons Case ())))) ())))))

(defun shen.prolog-aritycheck (V1769 V1770) (cond ((and (cons? V1770) (= () (tl V1770))) (- (length (hd V1770)) 1)) ((and (cons? V1770) (cons? (tl V1770))) (if (= (length (hd V1770)) (length (hd (tl V1770)))) (shen.prolog-aritycheck V1769 (tl V1770)) (simple-error (cn "arity error in prolog procedure " (shen.app (cons V1769 ()) "
" shen.a))))) (true (shen.f_error shen.prolog-aritycheck))))

(defun shen.linearise-clause (V1772) (cond ((and (cons? V1772) (and (cons? (tl V1772)) (and (= :- (hd (tl V1772))) (and (cons? (tl (tl V1772))) (= () (tl (tl (tl V1772)))))))) (let Linear (shen.linearise (cons (hd V1772) (tl (tl V1772)))) (shen.clause_form Linear))) (true (shen.f_error shen.linearise-clause))))

(defun shen.clause_form (V1774) (cond ((and (cons? V1774) (and (cons? (tl V1774)) (= () (tl (tl V1774))))) (cons (shen.explicit_modes (hd V1774)) (cons :- (cons (shen.cf_help (hd (tl V1774))) ())))) (true (shen.f_error shen.clause_form))))

(defun shen.explicit_modes (V1776) (cond ((cons? V1776) (cons (hd V1776) (map (lambda X (shen.em_help X)) (tl V1776)))) (true (shen.f_error shen.explicit_modes))))

(defun shen.em_help (V1778) (cond ((and (cons? V1778) (and (= mode (hd V1778)) (and (cons? (tl V1778)) (and (cons? (tl (tl V1778))) (= () (tl (tl (tl V1778)))))))) V1778) (true (cons mode (cons V1778 (cons + ()))))))

(defun shen.cf_help (V1780) (cond ((and (cons? V1780) (and (= where (hd V1780)) (and (cons? (tl V1780)) (and (cons? (hd (tl V1780))) (and (= = (hd (hd (tl V1780)))) (and (cons? (tl (hd (tl V1780)))) (and (cons? (tl (tl (hd (tl V1780))))) (and (= () (tl (tl (tl (hd (tl V1780)))))) (and (cons? (tl (tl V1780))) (= () (tl (tl (tl V1780))))))))))))) (cons (cons (if (value shen.*occurs*) unify! unify) (tl (hd (tl V1780)))) (shen.cf_help (hd (tl (tl V1780)))))) (true V1780)))

(defun occurs-check (V1786) (cond ((= + V1786) (set shen.*occurs* true)) ((= - V1786) (set shen.*occurs* false)) (true (simple-error "occurs-check expects + or -
"))))

(defun shen.aum (V1789 V1790) (cond ((and (cons? V1789) (and (cons? (hd V1789)) (and (cons? (tl V1789)) (and (= :- (hd (tl V1789))) (and (cons? (tl (tl V1789))) (= () (tl (tl (tl V1789))))))))) (let MuApplication (shen.make_mu_application (cons shen.mu (cons (tl (hd V1789)) (cons (shen.continuation_call (tl (hd V1789)) (hd (tl (tl V1789)))) ()))) V1790) (shen.mu_reduction MuApplication +))) (true (shen.f_error shen.aum))))

(defun shen.continuation_call (V1793 V1794) (let VTerms (cons ProcessN (shen.extract_vars V1793)) (let VBody (shen.extract_vars V1794) (let Free (remove Throwcontrol (difference VBody VTerms)) (shen.cc_help Free V1794)))))

(defun remove (V1797 V1798) (shen.remove-h V1797 V1798 ()))

(defun shen.remove-h (V1805 V1806 V1807) (cond ((= () V1806) (reverse V1807)) ((and (cons? V1806) (= (hd V1806) V1805)) (shen.remove-h (hd V1806) (tl V1806) V1807)) ((cons? V1806) (shen.remove-h V1805 (tl V1806) (cons (hd V1806) V1807))) (true (shen.f_error shen.remove-h))))

(defun shen.cc_help (V1810 V1811) (cond ((and (= () V1810) (= () V1811)) (cons shen.pop (cons shen.the (cons shen.stack ())))) ((= () V1811) (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons V1810 (cons and (cons shen.then (cons (cons shen.pop (cons shen.the (cons shen.stack ()))) ()))))))))) ((= () V1810) (cons call (cons shen.the (cons shen.continuation (cons V1811 ()))))) (true (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons V1810 (cons and (cons shen.then (cons (cons call (cons shen.the (cons shen.continuation (cons V1811 ())))) ())))))))))))

(defun shen.make_mu_application (V1814 V1815) (cond ((and (cons? V1814) (and (= shen.mu (hd V1814)) (and (cons? (tl V1814)) (and (= () (hd (tl V1814))) (and (cons? (tl (tl V1814))) (and (= () (tl (tl (tl V1814)))) (= () V1815))))))) (hd (tl (tl V1814)))) ((and (cons? V1814) (and (= shen.mu (hd V1814)) (and (cons? (tl V1814)) (and (cons? (hd (tl V1814))) (and (cons? (tl (tl V1814))) (and (= () (tl (tl (tl V1814)))) (cons? V1815))))))) (cons (cons shen.mu (cons (hd (hd (tl V1814))) (cons (shen.make_mu_application (cons shen.mu (cons (tl (hd (tl V1814))) (tl (tl V1814)))) (tl V1815)) ()))) (cons (hd V1815) ()))) (true (shen.f_error shen.make_mu_application))))

(defun shen.mu_reduction (V1824 V1825) (cond ((and (cons? V1824) (and (cons? (hd V1824)) (and (= shen.mu (hd (hd V1824))) (and (cons? (tl (hd V1824))) (and (cons? (hd (tl (hd V1824)))) (and (= mode (hd (hd (tl (hd V1824))))) (and (cons? (tl (hd (tl (hd V1824))))) (and (cons? (tl (tl (hd (tl (hd V1824)))))) (and (= () (tl (tl (tl (hd (tl (hd V1824))))))) (and (cons? (tl (tl (hd V1824)))) (and (= () (tl (tl (tl (hd V1824))))) (and (cons? (tl V1824)) (= () (tl (tl V1824))))))))))))))) (shen.mu_reduction (cons (cons shen.mu (cons (hd (tl (hd (tl (hd V1824))))) (tl (tl (hd V1824))))) (tl V1824)) (hd (tl (tl (hd (tl (hd V1824)))))))) ((and (cons? V1824) (and (cons? (hd V1824)) (and (= shen.mu (hd (hd V1824))) (and (cons? (tl (hd V1824))) (and (cons? (tl (tl (hd V1824)))) (and (= () (tl (tl (tl (hd V1824))))) (and (cons? (tl V1824)) (and (= () (tl (tl V1824))) (= _ (hd (tl (hd V1824)))))))))))) (shen.mu_reduction (hd (tl (tl (hd V1824)))) V1825)) ((and (cons? V1824) (and (cons? (hd V1824)) (and (= shen.mu (hd (hd V1824))) (and (cons? (tl (hd V1824))) (and (cons? (tl (tl (hd V1824)))) (and (= () (tl (tl (tl (hd V1824))))) (and (cons? (tl V1824)) (and (= () (tl (tl V1824))) (shen.ephemeral_variable? (hd (tl (hd V1824))) (hd (tl V1824))))))))))) (subst (hd (tl V1824)) (hd (tl (hd V1824))) (shen.mu_reduction (hd (tl (tl (hd V1824)))) V1825))) ((and (cons? V1824) (and (cons? (hd V1824)) (and (= shen.mu (hd (hd V1824))) (and (cons? (tl (hd V1824))) (and (cons? (tl (tl (hd V1824)))) (and (= () (tl (tl (tl (hd V1824))))) (and (cons? (tl V1824)) (and (= () (tl (tl V1824))) (variable? (hd (tl (hd V1824)))))))))))) (cons let (cons (hd (tl (hd V1824))) (cons shen.be (cons (hd (tl V1824)) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V1824)))) V1825) ()))))))) ((and (cons? V1824) (and (cons? (hd V1824)) (and (= shen.mu (hd (hd V1824))) (and (cons? (tl (hd V1824))) (and (cons? (tl (tl (hd V1824)))) (and (= () (tl (tl (tl (hd V1824))))) (and (cons? (tl V1824)) (and (= () (tl (tl V1824))) (and (= - V1825) (shen.prolog_constant? (hd (tl (hd V1824))))))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V1824))))) (cons in (cons (cons if (cons (cons Z (cons is (cons identical (cons shen.to (cons (hd (tl (hd V1824))) ()))))) (cons shen.then (cons (shen.mu_reduction (hd (tl (tl (hd V1824)))) -) (cons shen.else (cons shen.failed! ())))))) ())))))))) ((and (cons? V1824) (and (cons? (hd V1824)) (and (= shen.mu (hd (hd V1824))) (and (cons? (tl (hd V1824))) (and (cons? (tl (tl (hd V1824)))) (and (= () (tl (tl (tl (hd V1824))))) (and (cons? (tl V1824)) (and (= () (tl (tl V1824))) (and (= + V1825) (shen.prolog_constant? (hd (tl (hd V1824))))))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V1824))))) (cons in (cons (cons if (cons (cons Z (cons is (cons identical (cons shen.to (cons (hd (tl (hd V1824))) ()))))) (cons shen.then (cons (shen.mu_reduction (hd (tl (tl (hd V1824)))) +) (cons shen.else (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.variable ())))) (cons shen.then (cons (cons bind (cons Z (cons shen.to (cons (hd (tl (hd V1824))) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V1824)))) +) ())))))) (cons shen.else (cons shen.failed! ())))))) ())))))) ())))))))) ((and (cons? V1824) (and (cons? (hd V1824)) (and (= shen.mu (hd (hd V1824))) (and (cons? (tl (hd V1824))) (and (cons? (hd (tl (hd V1824)))) (and (cons? (tl (tl (hd V1824)))) (and (= () (tl (tl (tl (hd V1824))))) (and (cons? (tl V1824)) (and (= () (tl (tl V1824))) (= - V1825)))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V1824))))) (cons in (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.non-empty (cons list ()))))) (cons shen.then (cons (shen.mu_reduction (cons (cons shen.mu (cons (hd (hd (tl (hd V1824)))) (cons (cons (cons shen.mu (cons (tl (hd (tl (hd V1824)))) (tl (tl (hd V1824))))) (cons (cons shen.the (cons tail (cons shen.of (cons Z ())))) ())) ()))) (cons (cons shen.the (cons head (cons shen.of (cons Z ())))) ())) -) (cons shen.else (cons shen.failed! ())))))) ())))))))) ((and (cons? V1824) (and (cons? (hd V1824)) (and (= shen.mu (hd (hd V1824))) (and (cons? (tl (hd V1824))) (and (cons? (hd (tl (hd V1824)))) (and (cons? (tl (tl (hd V1824)))) (and (= () (tl (tl (tl (hd V1824))))) (and (cons? (tl V1824)) (and (= () (tl (tl V1824))) (= + V1825)))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V1824))))) (cons in (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.non-empty (cons list ()))))) (cons shen.then (cons (shen.mu_reduction (cons (cons shen.mu (cons (hd (hd (tl (hd V1824)))) (cons (cons (cons shen.mu (cons (tl (hd (tl (hd V1824)))) (tl (tl (hd V1824))))) (cons (cons shen.the (cons tail (cons shen.of (cons Z ())))) ())) ()))) (cons (cons shen.the (cons head (cons shen.of (cons Z ())))) ())) +) (cons shen.else (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.variable ())))) (cons shen.then (cons (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons (shen.extract_vars (hd (tl (hd V1824)))) (cons and (cons shen.then (cons (cons bind (cons Z (cons shen.to (cons (shen.rcons_form (shen.remove_modes (hd (tl (hd V1824))))) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V1824)))) +) ())))))) ())))))))) (cons shen.else (cons shen.failed! ())))))) ())))))) ())))))))) (true V1824)))

(defun shen.rcons_form (V1827) (cond ((cons? V1827) (cons cons (cons (shen.rcons_form (hd V1827)) (cons (shen.rcons_form (tl V1827)) ())))) (true V1827)))

(defun shen.remove_modes (V1829) (cond ((and (cons? V1829) (and (= mode (hd V1829)) (and (cons? (tl V1829)) (and (cons? (tl (tl V1829))) (and (= + (hd (tl (tl V1829)))) (= () (tl (tl (tl V1829))))))))) (shen.remove_modes (hd (tl V1829)))) ((and (cons? V1829) (and (= mode (hd V1829)) (and (cons? (tl V1829)) (and (cons? (tl (tl V1829))) (and (= - (hd (tl (tl V1829)))) (= () (tl (tl (tl V1829))))))))) (shen.remove_modes (hd (tl V1829)))) ((cons? V1829) (cons (shen.remove_modes (hd V1829)) (shen.remove_modes (tl V1829)))) (true V1829)))

(defun shen.ephemeral_variable? (V1832 V1833) (and (variable? V1832) (variable? V1833)))

(defun shen.prolog_constant? (V1843) (cond ((cons? V1843) false) (true true)))

(defun shen.aum_to_shen (V1845) (cond ((and (cons? V1845) (and (= let (hd V1845)) (and (cons? (tl V1845)) (and (cons? (tl (tl V1845))) (and (= shen.be (hd (tl (tl V1845)))) (and (cons? (tl (tl (tl V1845)))) (and (cons? (tl (tl (tl (tl V1845))))) (and (= in (hd (tl (tl (tl (tl V1845)))))) (and (cons? (tl (tl (tl (tl (tl V1845)))))) (= () (tl (tl (tl (tl (tl (tl V1845)))))))))))))))) (cons let (cons (hd (tl V1845)) (cons (shen.aum_to_shen (hd (tl (tl (tl V1845))))) (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V1845))))))) ()))))) ((and (cons? V1845) (and (= shen.the (hd V1845)) (and (cons? (tl V1845)) (and (= shen.result (hd (tl V1845))) (and (cons? (tl (tl V1845))) (and (= shen.of (hd (tl (tl V1845)))) (and (cons? (tl (tl (tl V1845)))) (and (= shen.dereferencing (hd (tl (tl (tl V1845))))) (and (cons? (tl (tl (tl (tl V1845))))) (= () (tl (tl (tl (tl (tl V1845))))))))))))))) (cons shen.lazyderef (cons (shen.aum_to_shen (hd (tl (tl (tl (tl V1845)))))) (cons ProcessN ())))) ((and (cons? V1845) (and (= if (hd V1845)) (and (cons? (tl V1845)) (and (cons? (tl (tl V1845))) (and (= shen.then (hd (tl (tl V1845)))) (and (cons? (tl (tl (tl V1845)))) (and (cons? (tl (tl (tl (tl V1845))))) (and (= shen.else (hd (tl (tl (tl (tl V1845)))))) (and (cons? (tl (tl (tl (tl (tl V1845)))))) (= () (tl (tl (tl (tl (tl (tl V1845)))))))))))))))) (cons if (cons (shen.aum_to_shen (hd (tl V1845))) (cons (shen.aum_to_shen (hd (tl (tl (tl V1845))))) (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V1845))))))) ()))))) ((and (cons? V1845) (and (cons? (tl V1845)) (and (= is (hd (tl V1845))) (and (cons? (tl (tl V1845))) (and (= shen.a (hd (tl (tl V1845)))) (and (cons? (tl (tl (tl V1845)))) (and (= shen.variable (hd (tl (tl (tl V1845))))) (= () (tl (tl (tl (tl V1845)))))))))))) (cons shen.pvar? (cons (hd V1845) ()))) ((and (cons? V1845) (and (cons? (tl V1845)) (and (= is (hd (tl V1845))) (and (cons? (tl (tl V1845))) (and (= shen.a (hd (tl (tl V1845)))) (and (cons? (tl (tl (tl V1845)))) (and (= shen.non-empty (hd (tl (tl (tl V1845))))) (and (cons? (tl (tl (tl (tl V1845))))) (and (= list (hd (tl (tl (tl (tl V1845)))))) (= () (tl (tl (tl (tl (tl V1845))))))))))))))) (cons cons? (cons (hd V1845) ()))) ((and (cons? V1845) (and (= shen.rename (hd V1845)) (and (cons? (tl V1845)) (and (= shen.the (hd (tl V1845))) (and (cons? (tl (tl V1845))) (and (= shen.variables (hd (tl (tl V1845)))) (and (cons? (tl (tl (tl V1845)))) (and (= in (hd (tl (tl (tl V1845))))) (and (cons? (tl (tl (tl (tl V1845))))) (and (= () (hd (tl (tl (tl (tl V1845)))))) (and (cons? (tl (tl (tl (tl (tl V1845)))))) (and (= and (hd (tl (tl (tl (tl (tl V1845))))))) (and (cons? (tl (tl (tl (tl (tl (tl V1845))))))) (and (= shen.then (hd (tl (tl (tl (tl (tl (tl V1845)))))))) (and (cons? (tl (tl (tl (tl (tl (tl (tl V1845)))))))) (= () (tl (tl (tl (tl (tl (tl (tl (tl V1845)))))))))))))))))))))))) (shen.aum_to_shen (hd (tl (tl (tl (tl (tl (tl (tl V1845)))))))))) ((and (cons? V1845) (and (= shen.rename (hd V1845)) (and (cons? (tl V1845)) (and (= shen.the (hd (tl V1845))) (and (cons? (tl (tl V1845))) (and (= shen.variables (hd (tl (tl V1845)))) (and (cons? (tl (tl (tl V1845)))) (and (= in (hd (tl (tl (tl V1845))))) (and (cons? (tl (tl (tl (tl V1845))))) (and (cons? (hd (tl (tl (tl (tl V1845)))))) (and (cons? (tl (tl (tl (tl (tl V1845)))))) (and (= and (hd (tl (tl (tl (tl (tl V1845))))))) (and (cons? (tl (tl (tl (tl (tl (tl V1845))))))) (and (= shen.then (hd (tl (tl (tl (tl (tl (tl V1845)))))))) (and (cons? (tl (tl (tl (tl (tl (tl (tl V1845)))))))) (= () (tl (tl (tl (tl (tl (tl (tl (tl V1845)))))))))))))))))))))))) (cons let (cons (hd (hd (tl (tl (tl (tl V1845)))))) (cons (cons shen.newpv (cons ProcessN ())) (cons (shen.aum_to_shen (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons (tl (hd (tl (tl (tl (tl V1845)))))) (tl (tl (tl (tl (tl V1845))))))))))) ()))))) ((and (cons? V1845) (and (= bind (hd V1845)) (and (cons? (tl V1845)) (and (cons? (tl (tl V1845))) (and (= shen.to (hd (tl (tl V1845)))) (and (cons? (tl (tl (tl V1845)))) (and (cons? (tl (tl (tl (tl V1845))))) (and (= in (hd (tl (tl (tl (tl V1845)))))) (and (cons? (tl (tl (tl (tl (tl V1845)))))) (= () (tl (tl (tl (tl (tl (tl V1845)))))))))))))))) (cons do (cons (cons shen.bindv (cons (hd (tl V1845)) (cons (shen.chwild (hd (tl (tl (tl V1845))))) (cons ProcessN ())))) (cons (cons let (cons Result (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V1845))))))) (cons (cons do (cons (cons shen.unbindv (cons (hd (tl V1845)) (cons ProcessN ()))) (cons Result ()))) ())))) ())))) ((and (cons? V1845) (and (cons? (tl V1845)) (and (= is (hd (tl V1845))) (and (cons? (tl (tl V1845))) (and (= identical (hd (tl (tl V1845)))) (and (cons? (tl (tl (tl V1845)))) (and (= shen.to (hd (tl (tl (tl V1845))))) (and (cons? (tl (tl (tl (tl V1845))))) (= () (tl (tl (tl (tl (tl V1845)))))))))))))) (cons = (cons (hd (tl (tl (tl (tl V1845))))) (cons (hd V1845) ())))) ((= shen.failed! V1845) false) ((and (cons? V1845) (and (= shen.the (hd V1845)) (and (cons? (tl V1845)) (and (= head (hd (tl V1845))) (and (cons? (tl (tl V1845))) (and (= shen.of (hd (tl (tl V1845)))) (and (cons? (tl (tl (tl V1845)))) (= () (tl (tl (tl (tl V1845)))))))))))) (cons hd (tl (tl (tl V1845))))) ((and (cons? V1845) (and (= shen.the (hd V1845)) (and (cons? (tl V1845)) (and (= tail (hd (tl V1845))) (and (cons? (tl (tl V1845))) (and (= shen.of (hd (tl (tl V1845)))) (and (cons? (tl (tl (tl V1845)))) (= () (tl (tl (tl (tl V1845)))))))))))) (cons tl (tl (tl (tl V1845))))) ((and (cons? V1845) (and (= shen.pop (hd V1845)) (and (cons? (tl V1845)) (and (= shen.the (hd (tl V1845))) (and (cons? (tl (tl V1845))) (and (= shen.stack (hd (tl (tl V1845)))) (= () (tl (tl (tl V1845)))))))))) (cons do (cons (cons shen.incinfs ()) (cons (cons thaw (cons Continuation ())) ())))) ((and (cons? V1845) (and (= call (hd V1845)) (and (cons? (tl V1845)) (and (= shen.the (hd (tl V1845))) (and (cons? (tl (tl V1845))) (and (= shen.continuation (hd (tl (tl V1845)))) (and (cons? (tl (tl (tl V1845)))) (= () (tl (tl (tl (tl V1845)))))))))))) (cons do (cons (cons shen.incinfs ()) (cons (shen.call_the_continuation (shen.chwild (hd (tl (tl (tl V1845))))) ProcessN Continuation) ())))) (true V1845)))

(defun shen.chwild (V1847) (cond ((= V1847 _) (cons shen.newpv (cons ProcessN ()))) ((cons? V1847) (map (lambda Z (shen.chwild Z)) V1847)) (true V1847)))

(defun shen.newpv (V1849) (let Count+1 (+ (<-address (value shen.*varcounter*) V1849) 1) (let IncVar (address-> (value shen.*varcounter*) V1849 Count+1) (let Vector (<-address (value shen.*prologvectors*) V1849) (let ResizeVectorIfNeeded (if (= Count+1 (limit Vector)) (shen.resizeprocessvector V1849 Count+1) shen.skip) (shen.mk-pvar Count+1))))))

(defun shen.resizeprocessvector (V1852 V1853) (let Vector (<-address (value shen.*prologvectors*) V1852) (let BigVector (shen.resize-vector Vector (+ V1853 V1853) shen.-null-) (address-> (value shen.*prologvectors*) V1852 BigVector))))

(defun shen.resize-vector (V1857 V1858 V1859) (let BigVector (address-> (absvector (+ 1 V1858)) 0 V1858) (shen.copy-vector V1857 BigVector (limit V1857) V1858 V1859)))

(defun shen.copy-vector (V1865 V1866 V1867 V1868 V1869) (shen.copy-vector-stage-2 (+ 1 V1867) (+ V1868 1) V1869 (shen.copy-vector-stage-1 1 V1865 V1866 (+ 1 V1867))))

(defun shen.copy-vector-stage-1 (V1877 V1878 V1879 V1880) (cond ((= V1880 V1877) V1879) (true (shen.copy-vector-stage-1 (+ 1 V1877) V1878 (address-> V1879 V1877 (<-address V1878 V1877)) V1880))))

(defun shen.copy-vector-stage-2 (V1888 V1889 V1890 V1891) (cond ((= V1889 V1888) V1891) (true (shen.copy-vector-stage-2 (+ V1888 1) V1889 V1890 (address-> V1891 V1888 V1890)))))

(defun shen.mk-pvar (V1893) (address-> (address-> (absvector 2) 0 shen.pvar) 1 V1893))

(defun shen.pvar? (V1895) (and (absvector? V1895) (= (<-address/or V1895 0 (freeze shen.not-pvar)) shen.pvar)))

(defun shen.bindv (V1899 V1900 V1901) (let Vector (<-address (value shen.*prologvectors*) V1901) (address-> Vector (<-address V1899 1) V1900)))

(defun shen.unbindv (V1904 V1905) (let Vector (<-address (value shen.*prologvectors*) V1905) (address-> Vector (<-address V1904 1) shen.-null-)))

(defun shen.incinfs () (set shen.*infs* (+ 1 (value shen.*infs*))))

(defun shen.call_the_continuation (V1909 V1910 V1911) (cond ((and (cons? V1909) (and (cons? (hd V1909)) (= () (tl V1909)))) (cons (hd (hd V1909)) (append (tl (hd V1909)) (cons V1910 (cons V1911 ()))))) ((and (cons? V1909) (cons? (hd V1909))) (let NewContinuation (shen.newcontinuation (tl V1909) V1910 V1911) (cons (hd (hd V1909)) (append (tl (hd V1909)) (cons V1910 (cons NewContinuation ())))))) (true (shen.f_error shen.call_the_continuation))))

(defun shen.newcontinuation (V1915 V1916 V1917) (cond ((= () V1915) V1917) ((and (cons? V1915) (cons? (hd V1915))) (cons freeze (cons (cons (hd (hd V1915)) (append (tl (hd V1915)) (cons V1916 (cons (shen.newcontinuation (tl V1915) V1916 V1917) ())))) ()))) (true (shen.f_error shen.newcontinuation))))

(defun return (V1925 V1926 V1927) (shen.deref V1925 V1926))

(defun shen.measure&return (V1935 V1936 V1937) (do (shen.prhush (shen.app (value shen.*infs*) " inferences
" shen.a) (stoutput)) (shen.deref V1935 V1936)))

(defun unify (V1942 V1943 V1944 V1945) (shen.lzy= (shen.lazyderef V1942 V1944) (shen.lazyderef V1943 V1944) V1944 V1945))

(defun shen.lzy= (V1967 V1968 V1969 V1970) (cond ((= V1968 V1967) (thaw V1970)) ((shen.pvar? V1967) (bind V1967 V1968 V1969 V1970)) ((shen.pvar? V1968) (bind V1968 V1967 V1969 V1970)) ((and (cons? V1967) (cons? V1968)) (shen.lzy= (shen.lazyderef (hd V1967) V1969) (shen.lazyderef (hd V1968) V1969) V1969 (freeze (shen.lzy= (shen.lazyderef (tl V1967) V1969) (shen.lazyderef (tl V1968) V1969) V1969 V1970)))) (true false)))

(defun shen.deref (V1973 V1974) (cond ((cons? V1973) (cons (shen.deref (hd V1973) V1974) (shen.deref (tl V1973) V1974))) (true (if (shen.pvar? V1973) (let Value (shen.valvector V1973 V1974) (if (= Value shen.-null-) V1973 (shen.deref Value V1974))) V1973))))

(defun shen.lazyderef (V1977 V1978) (if (shen.pvar? V1977) (let Value (shen.valvector V1977 V1978) (if (= Value shen.-null-) V1977 (shen.lazyderef Value V1978))) V1977))

(defun shen.valvector (V1981 V1982) (<-address (<-address (value shen.*prologvectors*) V1982) (<-address V1981 1)))

(defun unify! (V1987 V1988 V1989 V1990) (shen.lzy=! (shen.lazyderef V1987 V1989) (shen.lazyderef V1988 V1989) V1989 V1990))

(defun shen.lzy=! (V2012 V2013 V2014 V2015) (cond ((= V2013 V2012) (thaw V2015)) ((and (shen.pvar? V2012) (not (shen.occurs? V2012 (shen.deref V2013 V2014)))) (bind V2012 V2013 V2014 V2015)) ((and (shen.pvar? V2013) (not (shen.occurs? V2013 (shen.deref V2012 V2014)))) (bind V2013 V2012 V2014 V2015)) ((and (cons? V2012) (cons? V2013)) (shen.lzy=! (shen.lazyderef (hd V2012) V2014) (shen.lazyderef (hd V2013) V2014) V2014 (freeze (shen.lzy=! (shen.lazyderef (tl V2012) V2014) (shen.lazyderef (tl V2013) V2014) V2014 V2015)))) (true false)))

(defun shen.occurs? (V2027 V2028) (cond ((= V2028 V2027) true) ((cons? V2028) (or (shen.occurs? V2027 (hd V2028)) (shen.occurs? V2027 (tl V2028)))) (true false)))

(defun identical (V2033 V2034 V2035 V2036) (shen.lzy== (shen.lazyderef V2033 V2035) (shen.lazyderef V2034 V2035) V2035 V2036))

(defun shen.lzy== (V2058 V2059 V2060 V2061) (cond ((= V2059 V2058) (thaw V2061)) ((and (cons? V2058) (cons? V2059)) (shen.lzy== (shen.lazyderef (hd V2058) V2060) (shen.lazyderef (hd V2059) V2060) V2060 (freeze (shen.lzy== (tl V2058) (tl V2059) V2060 V2061)))) (true false)))

(defun shen.pvar (V2063) (cn "Var" (shen.app (<-address V2063 1) "" shen.a)))

(defun bind (V2068 V2069 V2070 V2071) (do (shen.bindv V2068 V2069 V2070) (let Result (thaw V2071) (do (shen.unbindv V2068 V2070) Result))))

(defun fwhen (V2089 V2090 V2091) (cond ((= true V2089) (thaw V2091)) ((= false V2089) false) (true (simple-error (cn "fwhen expects a boolean: not " (shen.app V2089 "%" shen.s))))))

(defun call (V2107 V2108 V2109) (cond ((cons? V2107) (shen.call-help (function (shen.lazyderef (hd V2107) V2108)) (tl V2107) V2108 V2109)) (true false)))

(defun shen.call-help (V2114 V2115 V2116 V2117) (cond ((= () V2115) (V2114 V2116 V2117)) ((cons? V2115) (shen.call-help (V2114 (hd V2115)) (tl V2115) V2116 V2117)) (true (shen.f_error shen.call-help))))

(defun shen.intprolog (V2119) (cond ((and (cons? V2119) (cons? (hd V2119))) (let ProcessN (shen.start-new-prolog-process) (shen.intprolog-help (hd (hd V2119)) (shen.insert-prolog-variables (cons (tl (hd V2119)) (cons (tl V2119) ())) ProcessN) ProcessN))) (true (shen.f_error shen.intprolog))))

(defun shen.intprolog-help (V2123 V2124 V2125) (cond ((and (cons? V2124) (and (cons? (tl V2124)) (= () (tl (tl V2124))))) (shen.intprolog-help-help V2123 (hd V2124) (hd (tl V2124)) V2125)) (true (shen.f_error shen.intprolog-help))))

(defun shen.intprolog-help-help (V2130 V2131 V2132 V2133) (cond ((= () V2131) (V2130 V2133 (freeze (shen.call-rest V2132 V2133)))) ((cons? V2131) (shen.intprolog-help-help (V2130 (hd V2131)) (tl V2131) V2132 V2133)) (true (shen.f_error shen.intprolog-help-help))))

(defun shen.call-rest (V2138 V2139) (cond ((= () V2138) true) ((and (cons? V2138) (and (cons? (hd V2138)) (cons? (tl (hd V2138))))) (shen.call-rest (cons (cons ((hd (hd V2138)) (hd (tl (hd V2138)))) (tl (tl (hd V2138)))) (tl V2138)) V2139)) ((and (cons? V2138) (and (cons? (hd V2138)) (= () (tl (hd V2138))))) ((hd (hd V2138)) V2139 (freeze (shen.call-rest (tl V2138) V2139)))) (true (shen.f_error shen.call-rest))))

(defun shen.start-new-prolog-process () (let IncrementProcessCounter (set shen.*process-counter* (+ 1 (value shen.*process-counter*))) (shen.initialise-prolog IncrementProcessCounter)))

(defun shen.insert-prolog-variables (V2142 V2143) (shen.insert-prolog-variables-help V2142 (shen.flatten V2142) V2143))

(defun shen.insert-prolog-variables-help (V2151 V2152 V2153) (cond ((= () V2152) V2151) ((and (cons? V2152) (variable? (hd V2152))) (let V (shen.newpv V2153) (let XV/Y (subst V (hd V2152) V2151) (let Z-Y (remove (hd V2152) (tl V2152)) (shen.insert-prolog-variables-help XV/Y Z-Y V2153))))) ((cons? V2152) (shen.insert-prolog-variables-help V2151 (tl V2152) V2153)) (true (shen.f_error shen.insert-prolog-variables-help))))

(defun shen.initialise-prolog (V2155) (let Vector (address-> (value shen.*prologvectors*) V2155 (shen.fillvector (vector 10) 1 10 shen.-null-)) (let Counter (address-> (value shen.*varcounter*) V2155 1) V2155)))



