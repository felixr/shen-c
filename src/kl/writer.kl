"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun pr (V4006 V4007) (trap-error (shen.prh V4006 V4007 0) (lambda E V4006)))

(defun shen.prh (V4011 V4012 V4013) (shen.prh V4011 V4012 (shen.write-char-and-inc V4011 V4012 V4013)))

(defun shen.write-char-and-inc (V4017 V4018 V4019) (do (write-byte (string->n (pos V4017 V4019)) V4018) (+ V4019 1)))

(defun print (V4021) (let String (shen.insert V4021 "~S") (let Print (shen.prhush String (stoutput)) V4021)))

(defun shen.prhush (V4024 V4025) (if (value *hush*) V4024 (pr V4024 V4025)))

(defun shen.mkstr (V4028 V4029) (cond ((string? V4028) (shen.mkstr-l (shen.proc-nl V4028) V4029)) (true (shen.mkstr-r (cons shen.proc-nl (cons V4028 ())) V4029))))

(defun shen.mkstr-l (V4032 V4033) (cond ((= () V4033) V4032) ((cons? V4033) (shen.mkstr-l (shen.insert-l (hd V4033) V4032) (tl V4033))) (true (shen.f_error shen.mkstr-l))))

(defun shen.insert-l (V4038 V4039) (cond ((= "" V4039) "") ((and (shen.+string? V4039) (and (= "~" (pos V4039 0)) (and (shen.+string? (tlstr V4039)) (= "A" (pos (tlstr V4039) 0))))) (cons shen.app (cons V4038 (cons (tlstr (tlstr V4039)) (cons shen.a ()))))) ((and (shen.+string? V4039) (and (= "~" (pos V4039 0)) (and (shen.+string? (tlstr V4039)) (= "R" (pos (tlstr V4039) 0))))) (cons shen.app (cons V4038 (cons (tlstr (tlstr V4039)) (cons shen.r ()))))) ((and (shen.+string? V4039) (and (= "~" (pos V4039 0)) (and (shen.+string? (tlstr V4039)) (= "S" (pos (tlstr V4039) 0))))) (cons shen.app (cons V4038 (cons (tlstr (tlstr V4039)) (cons shen.s ()))))) ((shen.+string? V4039) (shen.factor-cn (cons cn (cons (pos V4039 0) (cons (shen.insert-l V4038 (tlstr V4039)) ()))))) ((and (cons? V4039) (and (= cn (hd V4039)) (and (cons? (tl V4039)) (and (cons? (tl (tl V4039))) (= () (tl (tl (tl V4039)))))))) (cons cn (cons (hd (tl V4039)) (cons (shen.insert-l V4038 (hd (tl (tl V4039)))) ())))) ((and (cons? V4039) (and (= shen.app (hd V4039)) (and (cons? (tl V4039)) (and (cons? (tl (tl V4039))) (and (cons? (tl (tl (tl V4039)))) (= () (tl (tl (tl (tl V4039)))))))))) (cons shen.app (cons (hd (tl V4039)) (cons (shen.insert-l V4038 (hd (tl (tl V4039)))) (tl (tl (tl V4039))))))) (true (shen.f_error shen.insert-l))))

(defun shen.factor-cn (V4041) (cond ((and (cons? V4041) (and (= cn (hd V4041)) (and (cons? (tl V4041)) (and (cons? (tl (tl V4041))) (and (cons? (hd (tl (tl V4041)))) (and (= cn (hd (hd (tl (tl V4041))))) (and (cons? (tl (hd (tl (tl V4041))))) (and (cons? (tl (tl (hd (tl (tl V4041)))))) (and (= () (tl (tl (tl (hd (tl (tl V4041))))))) (and (= () (tl (tl (tl V4041)))) (and (string? (hd (tl V4041))) (string? (hd (tl (hd (tl (tl V4041))))))))))))))))) (cons cn (cons (cn (hd (tl V4041)) (hd (tl (hd (tl (tl V4041)))))) (tl (tl (hd (tl (tl V4041)))))))) (true V4041)))

(defun shen.proc-nl (V4043) (cond ((= "" V4043) "") ((and (shen.+string? V4043) (and (= "~" (pos V4043 0)) (and (shen.+string? (tlstr V4043)) (= "%" (pos (tlstr V4043) 0))))) (cn (n->string 10) (shen.proc-nl (tlstr (tlstr V4043))))) ((shen.+string? V4043) (cn (pos V4043 0) (shen.proc-nl (tlstr V4043)))) (true (shen.f_error shen.proc-nl))))

(defun shen.mkstr-r (V4046 V4047) (cond ((= () V4047) V4046) ((cons? V4047) (shen.mkstr-r (cons shen.insert (cons (hd V4047) (cons V4046 ()))) (tl V4047))) (true (shen.f_error shen.mkstr-r))))

(defun shen.insert (V4050 V4051) (shen.insert-h V4050 V4051 ""))

(defun shen.insert-h (V4057 V4058 V4059) (cond ((= "" V4058) V4059) ((and (shen.+string? V4058) (and (= "~" (pos V4058 0)) (and (shen.+string? (tlstr V4058)) (= "A" (pos (tlstr V4058) 0))))) (cn V4059 (shen.app V4057 (tlstr (tlstr V4058)) shen.a))) ((and (shen.+string? V4058) (and (= "~" (pos V4058 0)) (and (shen.+string? (tlstr V4058)) (= "R" (pos (tlstr V4058) 0))))) (cn V4059 (shen.app V4057 (tlstr (tlstr V4058)) shen.r))) ((and (shen.+string? V4058) (and (= "~" (pos V4058 0)) (and (shen.+string? (tlstr V4058)) (= "S" (pos (tlstr V4058) 0))))) (cn V4059 (shen.app V4057 (tlstr (tlstr V4058)) shen.s))) ((shen.+string? V4058) (shen.insert-h V4057 (tlstr V4058) (cn V4059 (pos V4058 0)))) (true (shen.f_error shen.insert-h))))

(defun shen.app (V4063 V4064 V4065) (cn (shen.arg->str V4063 V4065) V4064))

(defun shen.arg->str (V4073 V4074) (cond ((= V4073 (fail)) "...") ((shen.list? V4073) (shen.list->str V4073 V4074)) ((string? V4073) (shen.str->str V4073 V4074)) ((absvector? V4073) (shen.vector->str V4073 V4074)) (true (shen.atom->str V4073))))

(defun shen.list->str (V4077 V4078) (cond ((= shen.r V4078) (@s "(" (@s (shen.iter-list V4077 shen.r (shen.maxseq)) ")"))) (true (@s "[" (@s (shen.iter-list V4077 V4078 (shen.maxseq)) "]")))))

(defun shen.maxseq () (value *maximum-print-sequence-size*))

(defun shen.iter-list (V4092 V4093 V4094) (cond ((= () V4092) "") ((= 0 V4094) "... etc") ((and (cons? V4092) (= () (tl V4092))) (shen.arg->str (hd V4092) V4093)) ((cons? V4092) (@s (shen.arg->str (hd V4092) V4093) (@s " " (shen.iter-list (tl V4092) V4093 (- V4094 1))))) (true (@s "|" (@s " " (shen.arg->str V4092 V4093))))))

(defun shen.str->str (V4101 V4102) (cond ((= shen.a V4102) V4101) (true (@s (n->string 34) (@s V4101 (n->string 34))))))

(defun shen.vector->str (V4105 V4106) (if (shen.print-vector? V4105) ((function (<-address V4105 0)) V4105) (if (vector? V4105) (@s "<" (@s (shen.iter-vector V4105 1 V4106 (shen.maxseq)) ">")) (@s "<" (@s "<" (@s (shen.iter-vector V4105 0 V4106 (shen.maxseq)) ">>"))))))

(defun shen.print-vector? (V4108) (let Zero (<-address V4108 0) (if (= Zero shen.tuple) true (if (= Zero shen.pvar) true (if (= Zero shen.dictionary) true (if (not (number? Zero)) (shen.fbound? Zero) false))))))

(defun shen.fbound? (V4110) (trap-error (do (shen.lookup-func V4110) true) (lambda E false)))

(defun shen.tuple (V4112) (cn "(@p " (shen.app (<-address V4112 1) (cn " " (shen.app (<-address V4112 2) ")" shen.s)) shen.s)))

(defun shen.dictionary (V4114) "(dict ...)")

(defun shen.iter-vector (V4125 V4126 V4127 V4128) (cond ((= 0 V4128) "... etc") (true (let Item (<-address/or V4125 V4126 (freeze shen.out-of-bounds)) (let Next (<-address/or V4125 (+ V4126 1) (freeze shen.out-of-bounds)) (if (= Item shen.out-of-bounds) "" (if (= Next shen.out-of-bounds) (shen.arg->str Item V4127) (@s (shen.arg->str Item V4127) (@s " " (shen.iter-vector V4125 (+ V4126 1) V4127 (- V4128 1)))))))))))

(defun shen.atom->str (V4130) (trap-error (str V4130) (lambda E (shen.funexstring))))

(defun shen.funexstring () (@s "" (@s "f" (@s "u" (@s "n" (@s "e" (@s (shen.arg->str (gensym (intern "x")) shen.a) "")))))))

(defun shen.list? (V4132) (or (empty? V4132) (cons? V4132)))



