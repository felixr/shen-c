"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun pr (V3881 V3882) (trap-error (shen.prh V3881 V3882 0) (lambda E V3881)))

(defun shen.prh (V3886 V3887 V3888) (shen.prh V3886 V3887 (shen.write-char-and-inc V3886 V3887 V3888)))

(defun shen.write-char-and-inc (V3892 V3893 V3894) (do (write-byte (string->n (pos V3892 V3894)) V3893) (+ V3894 1)))

(defun print (V3896) (let String (shen.insert V3896 "~S") (let Print (shen.prhush String (stoutput)) V3896)))

(defun shen.prhush (V3899 V3900) (if (value *hush*) V3899 (pr V3899 V3900)))

(defun shen.mkstr (V3903 V3904) (cond ((string? V3903) (shen.mkstr-l (shen.proc-nl V3903) V3904)) (true (shen.mkstr-r (cons shen.proc-nl (cons V3903 ())) V3904))))

(defun shen.mkstr-l (V3907 V3908) (cond ((= () V3908) V3907) ((cons? V3908) (shen.mkstr-l (shen.insert-l (hd V3908) V3907) (tl V3908))) (true (shen.f_error shen.mkstr-l))))

(defun shen.insert-l (V3913 V3914) (cond ((= "" V3914) "") ((and (shen.+string? V3914) (and (= "~" (pos V3914 0)) (and (shen.+string? (tlstr V3914)) (= "A" (pos (tlstr V3914) 0))))) (cons shen.app (cons V3913 (cons (tlstr (tlstr V3914)) (cons shen.a ()))))) ((and (shen.+string? V3914) (and (= "~" (pos V3914 0)) (and (shen.+string? (tlstr V3914)) (= "R" (pos (tlstr V3914) 0))))) (cons shen.app (cons V3913 (cons (tlstr (tlstr V3914)) (cons shen.r ()))))) ((and (shen.+string? V3914) (and (= "~" (pos V3914 0)) (and (shen.+string? (tlstr V3914)) (= "S" (pos (tlstr V3914) 0))))) (cons shen.app (cons V3913 (cons (tlstr (tlstr V3914)) (cons shen.s ()))))) ((shen.+string? V3914) (shen.factor-cn (cons cn (cons (pos V3914 0) (cons (shen.insert-l V3913 (tlstr V3914)) ()))))) ((and (cons? V3914) (and (= cn (hd V3914)) (and (cons? (tl V3914)) (and (cons? (tl (tl V3914))) (= () (tl (tl (tl V3914)))))))) (cons cn (cons (hd (tl V3914)) (cons (shen.insert-l V3913 (hd (tl (tl V3914)))) ())))) ((and (cons? V3914) (and (= shen.app (hd V3914)) (and (cons? (tl V3914)) (and (cons? (tl (tl V3914))) (and (cons? (tl (tl (tl V3914)))) (= () (tl (tl (tl (tl V3914)))))))))) (cons shen.app (cons (hd (tl V3914)) (cons (shen.insert-l V3913 (hd (tl (tl V3914)))) (tl (tl (tl V3914))))))) (true (shen.f_error shen.insert-l))))

(defun shen.factor-cn (V3916) (cond ((and (cons? V3916) (and (= cn (hd V3916)) (and (cons? (tl V3916)) (and (cons? (tl (tl V3916))) (and (cons? (hd (tl (tl V3916)))) (and (= cn (hd (hd (tl (tl V3916))))) (and (cons? (tl (hd (tl (tl V3916))))) (and (cons? (tl (tl (hd (tl (tl V3916)))))) (and (= () (tl (tl (tl (hd (tl (tl V3916))))))) (and (= () (tl (tl (tl V3916)))) (and (string? (hd (tl V3916))) (string? (hd (tl (hd (tl (tl V3916))))))))))))))))) (cons cn (cons (cn (hd (tl V3916)) (hd (tl (hd (tl (tl V3916)))))) (tl (tl (hd (tl (tl V3916)))))))) (true V3916)))

(defun shen.proc-nl (V3918) (cond ((= "" V3918) "") ((and (shen.+string? V3918) (and (= "~" (pos V3918 0)) (and (shen.+string? (tlstr V3918)) (= "%" (pos (tlstr V3918) 0))))) (cn (n->string 10) (shen.proc-nl (tlstr (tlstr V3918))))) ((shen.+string? V3918) (cn (pos V3918 0) (shen.proc-nl (tlstr V3918)))) (true (shen.f_error shen.proc-nl))))

(defun shen.mkstr-r (V3921 V3922) (cond ((= () V3922) V3921) ((cons? V3922) (shen.mkstr-r (cons shen.insert (cons (hd V3922) (cons V3921 ()))) (tl V3922))) (true (shen.f_error shen.mkstr-r))))

(defun shen.insert (V3925 V3926) (shen.insert-h V3925 V3926 ""))

(defun shen.insert-h (V3932 V3933 V3934) (cond ((= "" V3933) V3934) ((and (shen.+string? V3933) (and (= "~" (pos V3933 0)) (and (shen.+string? (tlstr V3933)) (= "A" (pos (tlstr V3933) 0))))) (cn V3934 (shen.app V3932 (tlstr (tlstr V3933)) shen.a))) ((and (shen.+string? V3933) (and (= "~" (pos V3933 0)) (and (shen.+string? (tlstr V3933)) (= "R" (pos (tlstr V3933) 0))))) (cn V3934 (shen.app V3932 (tlstr (tlstr V3933)) shen.r))) ((and (shen.+string? V3933) (and (= "~" (pos V3933 0)) (and (shen.+string? (tlstr V3933)) (= "S" (pos (tlstr V3933) 0))))) (cn V3934 (shen.app V3932 (tlstr (tlstr V3933)) shen.s))) ((shen.+string? V3933) (shen.insert-h V3932 (tlstr V3933) (cn V3934 (pos V3933 0)))) (true (shen.f_error shen.insert-h))))

(defun shen.app (V3938 V3939 V3940) (cn (shen.arg->str V3938 V3940) V3939))

(defun shen.arg->str (V3948 V3949) (cond ((= V3948 (fail)) "...") ((shen.list? V3948) (shen.list->str V3948 V3949)) ((string? V3948) (shen.str->str V3948 V3949)) ((absvector? V3948) (shen.vector->str V3948 V3949)) (true (shen.atom->str V3948))))

(defun shen.list->str (V3952 V3953) (cond ((= shen.r V3953) (@s "(" (@s (shen.iter-list V3952 shen.r (shen.maxseq)) ")"))) (true (@s "[" (@s (shen.iter-list V3952 V3953 (shen.maxseq)) "]")))))

(defun shen.maxseq () (value *maximum-print-sequence-size*))

(defun shen.iter-list (V3967 V3968 V3969) (cond ((= () V3967) "") ((= 0 V3969) "... etc") ((and (cons? V3967) (= () (tl V3967))) (shen.arg->str (hd V3967) V3968)) ((cons? V3967) (@s (shen.arg->str (hd V3967) V3968) (@s " " (shen.iter-list (tl V3967) V3968 (- V3969 1))))) (true (@s "|" (@s " " (shen.arg->str V3967 V3968))))))

(defun shen.str->str (V3976 V3977) (cond ((= shen.a V3977) V3976) (true (@s (n->string 34) (@s V3976 (n->string 34))))))

(defun shen.vector->str (V3980 V3981) (if (shen.print-vector? V3980) ((function (<-address V3980 0)) V3980) (if (vector? V3980) (@s "<" (@s (shen.iter-vector V3980 1 V3981 (shen.maxseq)) ">")) (@s "<" (@s "<" (@s (shen.iter-vector V3980 0 V3981 (shen.maxseq)) ">>"))))))

(defun shen.print-vector? (V3983) (let Zero (<-address V3983 0) (if (= Zero shen.tuple) true (if (= Zero shen.pvar) true (if (not (number? Zero)) (shen.fbound? Zero) false)))))

(defun shen.fbound? (V3985) (trap-error (do (shen.lookup-func V3985 (value shen.*symbol-table*)) true) (lambda E false)))

(defun shen.tuple (V3987) (cn "(@p " (shen.app (<-address V3987 1) (cn " " (shen.app (<-address V3987 2) ")" shen.s)) shen.s)))

(defun shen.iter-vector (V3998 V3999 V4000 V4001) (cond ((= 0 V4001) "... etc") (true (let Item (trap-error (<-address V3998 V3999) (lambda E shen.out-of-bounds)) (let Next (trap-error (<-address V3998 (+ V3999 1)) (lambda E shen.out-of-bounds)) (if (= Item shen.out-of-bounds) "" (if (= Next shen.out-of-bounds) (shen.arg->str Item V4000) (@s (shen.arg->str Item V4000) (@s " " (shen.iter-vector V3998 (+ V3999 1) V4000 (- V4001 1)))))))))))

(defun shen.atom->str (V4003) (trap-error (str V4003) (lambda E (shen.funexstring))))

(defun shen.funexstring () (@s "" (@s "f" (@s "u" (@s "n" (@s "e" (@s (shen.arg->str (gensym (intern "x")) shen.a) "")))))))

(defun shen.list? (V4005) (or (empty? V4005) (cons? V4005)))



