"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun read-char-code (V2336) (read-byte V2336))

(defun read-file-as-bytelist (V2338) (shen.read-file-as-Xlist V2338 (lambda S (read-byte S))))

(defun read-file-as-charlist (V2340) (shen.read-file-as-Xlist V2340 (lambda S (read-char-code S))))

(defun shen.read-file-as-Xlist (V2343 V2344) (let Stream (open V2343 in) (let X (V2344 Stream) (let Xs (shen.read-file-as-Xlist-help Stream V2344 X ()) (let Close (close Stream) (reverse Xs))))))

(defun shen.read-file-as-Xlist-help (V2349 V2350 V2351 V2352) (cond ((= -1 V2351) V2352) (true (shen.read-file-as-Xlist-help V2349 V2350 (V2350 V2349) (cons V2351 V2352)))))

(defun read-file-as-string (V2354) (let Stream (open V2354 in) (shen.rfas-h Stream (read-char-code Stream) "")))

(defun shen.rfas-h (V2358 V2359 V2360) (cond ((= -1 V2359) (do (close V2358) V2360)) (true (shen.rfas-h V2358 (read-char-code V2358) (cn V2360 (n->string V2359))))))

(defun input (V2362) (eval-kl (read V2362)))

(defun input+ (V2365 V2366) (let Mono? (shen.monotype V2365) (let Input (read V2366) (if (= false (shen.typecheck Input (shen.demodulate V2365))) (simple-error (cn "type error: " (shen.app Input (cn " is not of type " (shen.app V2365 "
" shen.r)) shen.r))) (eval-kl Input)))))

(defun shen.monotype (V2368) (cond ((cons? V2368) (map (lambda Z (shen.monotype Z)) V2368)) (true (if (variable? V2368) (simple-error (cn "input+ expects a monotype: not " (shen.app V2368 "
" shen.a))) V2368))))

(defun read (V2370) (hd (shen.read-loop V2370 (read-char-code V2370) ())))

(defun it () (value shen.*it*))

(defun shen.read-loop (V2378 V2379 V2380) (cond ((= 94 V2379) (simple-error "read aborted")) ((= -1 V2379) (if (empty? V2380) (simple-error "error: empty stream") (compile (lambda X (shen.<st_input> X)) V2380 (lambda E E)))) ((shen.terminator? V2379) (let AllChars (append V2380 (cons V2379 ())) (let It (shen.record-it AllChars) (let Read (compile (lambda X (shen.<st_input> X)) AllChars (lambda E shen.nextbyte)) (if (or (= Read shen.nextbyte) (empty? Read)) (shen.read-loop V2378 (read-char-code V2378) AllChars) Read))))) (true (shen.read-loop V2378 (read-char-code V2378) (append V2380 (cons V2379 ()))))))

(defun shen.terminator? (V2382) (element? V2382 (cons 9 (cons 10 (cons 13 (cons 32 (cons 34 (cons 41 (cons 93 ())))))))))

(defun lineread (V2384) (shen.lineread-loop (read-char-code V2384) () V2384))

(defun shen.lineread-loop (V2389 V2390 V2391) (cond ((= -1 V2389) (if (empty? V2390) (simple-error "empty stream") (compile (lambda X (shen.<st_input> X)) V2390 (lambda E E)))) ((= V2389 (shen.hat)) (simple-error "line read aborted")) ((element? V2389 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda X (shen.<st_input> X)) V2390 (lambda E shen.nextline)) (let It (shen.record-it V2390) (if (or (= Line shen.nextline) (empty? Line)) (shen.lineread-loop (read-char-code V2391) (append V2390 (cons V2389 ())) V2391) Line)))) (true (shen.lineread-loop (read-char-code V2391) (append V2390 (cons V2389 ())) V2391))))

(defun shen.record-it (V2393) (let TrimLeft (shen.trim-whitespace V2393) (let TrimRight (shen.trim-whitespace (reverse TrimLeft)) (let Trimmed (reverse TrimRight) (shen.record-it-h Trimmed)))))

(defun shen.trim-whitespace (V2395) (cond ((and (cons? V2395) (element? (hd V2395) (cons 9 (cons 10 (cons 13 (cons 32 ())))))) (shen.trim-whitespace (tl V2395))) (true V2395)))

(defun shen.record-it-h (V2397) (do (set shen.*it* (shen.cn-all (map (lambda X (n->string X)) V2397))) V2397))

(defun shen.cn-all (V2399) (cond ((= () V2399) "") ((cons? V2399) (cn (hd V2399) (shen.cn-all (tl V2399)))) (true (shen.f_error shen.cn-all))))

(defun read-file (V2401) (let Charlist (read-file-as-charlist V2401) (compile (lambda X (shen.<st_input> X)) Charlist (lambda X (shen.read-error X)))))

(defun read-from-string (V2403) (let Ns (map (lambda X (string->n X)) (explode V2403)) (compile (lambda X (shen.<st_input> X)) Ns (lambda X (shen.read-error X)))))

(defun shen.read-error (V2411) (cond ((and (cons? V2411) (and (cons? (hd V2411)) (and (cons? (tl V2411)) (= () (tl (tl V2411)))))) (simple-error (cn "read error here:

 " (shen.app (shen.compress-50 50 (hd V2411)) "
" shen.a)))) (true (simple-error "read error
"))))

(defun shen.compress-50 (V2418 V2419) (cond ((= () V2419) "") ((= 0 V2418) "") ((cons? V2419) (cn (n->string (hd V2419)) (shen.compress-50 (- V2418 1) (tl V2419)))) (true (shen.f_error shen.compress-50))))

(defun shen.<st_input> (V2421) (let YaccParse (let Parse_shen.<lsb> (shen.<lsb> V2421) (if (not (= (fail) Parse_shen.<lsb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lsb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rsb> (shen.<rsb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rsb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rsb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (cons (macroexpand (shen.cons_form (shen.hdtl Parse_shen.<st_input1>))) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<lrb> (shen.<lrb> V2421) (if (not (= (fail) Parse_shen.<lrb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lrb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rrb> (shen.<rrb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rrb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rrb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (shen.package-macro (macroexpand (shen.hdtl Parse_shen.<st_input1>)) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<lcurly> (shen.<lcurly> V2421) (if (not (= (fail) Parse_shen.<lcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<lcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons { (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<rcurly> (shen.<rcurly> V2421) (if (not (= (fail) Parse_shen.<rcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<rcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons } (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<bar> (shen.<bar> V2421) (if (not (= (fail) Parse_shen.<bar>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<bar>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons bar! (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<semicolon> (shen.<semicolon> V2421) (if (not (= (fail) Parse_shen.<semicolon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<semicolon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons ; (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V2421) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<equal> (shen.<equal> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<equal>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<equal>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons := (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V2421) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<minus> (shen.<minus> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons :- (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V2421) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons : (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<comma> (shen.<comma> V2421) (if (not (= (fail) Parse_shen.<comma>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comma>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (intern ",") (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<comment> (shen.<comment> V2421) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<atom> (shen.<atom> V2421) (if (not (= (fail) Parse_shen.<atom>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<atom>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (macroexpand (shen.hdtl Parse_shen.<atom>)) (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<whitespaces> (shen.<whitespaces> V2421) (if (not (= (fail) Parse_shen.<whitespaces>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<whitespaces>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2421) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))

(defun shen.<lsb> (V2423) (if (and (cons? (hd V2423)) (= 91 (hd (hd V2423)))) (shen.pair (hd (shen.pair (tl (hd V2423)) (shen.hdtl V2423))) shen.skip) (fail)))

(defun shen.<rsb> (V2425) (if (and (cons? (hd V2425)) (= 93 (hd (hd V2425)))) (shen.pair (hd (shen.pair (tl (hd V2425)) (shen.hdtl V2425))) shen.skip) (fail)))

(defun shen.<lcurly> (V2427) (if (and (cons? (hd V2427)) (= 123 (hd (hd V2427)))) (shen.pair (hd (shen.pair (tl (hd V2427)) (shen.hdtl V2427))) shen.skip) (fail)))

(defun shen.<rcurly> (V2429) (if (and (cons? (hd V2429)) (= 125 (hd (hd V2429)))) (shen.pair (hd (shen.pair (tl (hd V2429)) (shen.hdtl V2429))) shen.skip) (fail)))

(defun shen.<bar> (V2431) (if (and (cons? (hd V2431)) (= 124 (hd (hd V2431)))) (shen.pair (hd (shen.pair (tl (hd V2431)) (shen.hdtl V2431))) shen.skip) (fail)))

(defun shen.<semicolon> (V2433) (if (and (cons? (hd V2433)) (= 59 (hd (hd V2433)))) (shen.pair (hd (shen.pair (tl (hd V2433)) (shen.hdtl V2433))) shen.skip) (fail)))

(defun shen.<colon> (V2435) (if (and (cons? (hd V2435)) (= 58 (hd (hd V2435)))) (shen.pair (hd (shen.pair (tl (hd V2435)) (shen.hdtl V2435))) shen.skip) (fail)))

(defun shen.<comma> (V2437) (if (and (cons? (hd V2437)) (= 44 (hd (hd V2437)))) (shen.pair (hd (shen.pair (tl (hd V2437)) (shen.hdtl V2437))) shen.skip) (fail)))

(defun shen.<equal> (V2439) (if (and (cons? (hd V2439)) (= 61 (hd (hd V2439)))) (shen.pair (hd (shen.pair (tl (hd V2439)) (shen.hdtl V2439))) shen.skip) (fail)))

(defun shen.<minus> (V2441) (if (and (cons? (hd V2441)) (= 45 (hd (hd V2441)))) (shen.pair (hd (shen.pair (tl (hd V2441)) (shen.hdtl V2441))) shen.skip) (fail)))

(defun shen.<lrb> (V2443) (if (and (cons? (hd V2443)) (= 40 (hd (hd V2443)))) (shen.pair (hd (shen.pair (tl (hd V2443)) (shen.hdtl V2443))) shen.skip) (fail)))

(defun shen.<rrb> (V2445) (if (and (cons? (hd V2445)) (= 41 (hd (hd V2445)))) (shen.pair (hd (shen.pair (tl (hd V2445)) (shen.hdtl V2445))) shen.skip) (fail)))

(defun shen.<atom> (V2447) (let YaccParse (let Parse_shen.<str> (shen.<str> V2447) (if (not (= (fail) Parse_shen.<str>)) (shen.pair (hd Parse_shen.<str>) (shen.control-chars (shen.hdtl Parse_shen.<str>))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<number> (shen.<number> V2447) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<sym> (shen.<sym> V2447) (if (not (= (fail) Parse_shen.<sym>)) (shen.pair (hd Parse_shen.<sym>) (if (= (shen.hdtl Parse_shen.<sym>) "<>") (cons vector (cons 0 ())) (intern (shen.hdtl Parse_shen.<sym>)))) (fail))) YaccParse)) YaccParse)))

(defun shen.control-chars (V2449) (cond ((= () V2449) "") ((and (cons? V2449) (and (= "c" (hd V2449)) (and (cons? (tl V2449)) (= "#" (hd (tl V2449)))))) (let CodePoint (shen.code-point (tl (tl V2449))) (let AfterCodePoint (shen.after-codepoint (tl (tl V2449))) (@s (n->string (shen.decimalise CodePoint)) (shen.control-chars AfterCodePoint))))) ((cons? V2449) (@s (hd V2449) (shen.control-chars (tl V2449)))) (true (shen.f_error shen.control-chars))))

(defun shen.code-point (V2453) (cond ((and (cons? V2453) (= ";" (hd V2453))) "") ((and (cons? V2453) (element? (hd V2453) (cons "0" (cons "1" (cons "2" (cons "3" (cons "4" (cons "5" (cons "6" (cons "7" (cons "8" (cons "9" (cons "0" ()))))))))))))) (cons (hd V2453) (shen.code-point (tl V2453)))) (true (simple-error (cn "code point parse error " (shen.app V2453 "
" shen.a))))))

(defun shen.after-codepoint (V2459) (cond ((= () V2459) ()) ((and (cons? V2459) (= ";" (hd V2459))) (tl V2459)) ((cons? V2459) (shen.after-codepoint (tl V2459))) (true (shen.f_error shen.after-codepoint))))

(defun shen.decimalise (V2461) (shen.pre (reverse (shen.digits->integers V2461)) 0))

(defun shen.digits->integers (V2467) (cond ((and (cons? V2467) (= "0" (hd V2467))) (cons 0 (shen.digits->integers (tl V2467)))) ((and (cons? V2467) (= "1" (hd V2467))) (cons 1 (shen.digits->integers (tl V2467)))) ((and (cons? V2467) (= "2" (hd V2467))) (cons 2 (shen.digits->integers (tl V2467)))) ((and (cons? V2467) (= "3" (hd V2467))) (cons 3 (shen.digits->integers (tl V2467)))) ((and (cons? V2467) (= "4" (hd V2467))) (cons 4 (shen.digits->integers (tl V2467)))) ((and (cons? V2467) (= "5" (hd V2467))) (cons 5 (shen.digits->integers (tl V2467)))) ((and (cons? V2467) (= "6" (hd V2467))) (cons 6 (shen.digits->integers (tl V2467)))) ((and (cons? V2467) (= "7" (hd V2467))) (cons 7 (shen.digits->integers (tl V2467)))) ((and (cons? V2467) (= "8" (hd V2467))) (cons 8 (shen.digits->integers (tl V2467)))) ((and (cons? V2467) (= "9" (hd V2467))) (cons 9 (shen.digits->integers (tl V2467)))) (true ())))

(defun shen.<sym> (V2469) (let Parse_shen.<alpha> (shen.<alpha> V2469) (if (not (= (fail) Parse_shen.<alpha>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alpha>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))))

(defun shen.<alphanums> (V2471) (let YaccParse (let Parse_shen.<alphanum> (shen.<alphanum> V2471) (if (not (= (fail) Parse_shen.<alphanum>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alphanum>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alphanum>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2471) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) "") (fail))) YaccParse)))

(defun shen.<alphanum> (V2473) (let YaccParse (let Parse_shen.<alpha> (shen.<alpha> V2473) (if (not (= (fail) Parse_shen.<alpha>)) (shen.pair (hd Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alpha>)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<num> (shen.<num> V2473) (if (not (= (fail) Parse_shen.<num>)) (shen.pair (hd Parse_shen.<num>) (shen.hdtl Parse_shen.<num>)) (fail))) YaccParse)))

(defun shen.<num> (V2475) (if (cons? (hd V2475)) (let Parse_Char (hd (hd V2475)) (if (shen.numbyte? Parse_Char) (shen.pair (hd (shen.pair (tl (hd V2475)) (shen.hdtl V2475))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.numbyte? (V2481) (cond ((= 48 V2481) true) ((= 49 V2481) true) ((= 50 V2481) true) ((= 51 V2481) true) ((= 52 V2481) true) ((= 53 V2481) true) ((= 54 V2481) true) ((= 55 V2481) true) ((= 56 V2481) true) ((= 57 V2481) true) (true false)))

(defun shen.<alpha> (V2483) (if (cons? (hd V2483)) (let Parse_Char (hd (hd V2483)) (if (shen.symbol-code? Parse_Char) (shen.pair (hd (shen.pair (tl (hd V2483)) (shen.hdtl V2483))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.symbol-code? (V2485) (or (= V2485 126) (or (and (> V2485 94) (< V2485 123)) (or (and (> V2485 59) (< V2485 91)) (or (and (> V2485 41) (and (< V2485 58) (not (= V2485 44)))) (or (and (> V2485 34) (< V2485 40)) (= V2485 33)))))))

(defun shen.<str> (V2487) (let Parse_shen.<dbq> (shen.<dbq> V2487) (if (not (= (fail) Parse_shen.<dbq>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<dbq>) (if (not (= (fail) Parse_shen.<strcontents>)) (let Parse_shen.<dbq> (shen.<dbq> Parse_shen.<strcontents>) (if (not (= (fail) Parse_shen.<dbq>)) (shen.pair (hd Parse_shen.<dbq>) (shen.hdtl Parse_shen.<strcontents>)) (fail))) (fail))) (fail))))

(defun shen.<dbq> (V2489) (if (cons? (hd V2489)) (let Parse_Char (hd (hd V2489)) (if (= Parse_Char 34) (shen.pair (hd (shen.pair (tl (hd V2489)) (shen.hdtl V2489))) Parse_Char) (fail))) (fail)))

(defun shen.<strcontents> (V2491) (let YaccParse (let Parse_shen.<strc> (shen.<strc> V2491) (if (not (= (fail) Parse_shen.<strc>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<strc>) (if (not (= (fail) Parse_shen.<strcontents>)) (shen.pair (hd Parse_shen.<strcontents>) (cons (shen.hdtl Parse_shen.<strc>) (shen.hdtl Parse_shen.<strcontents>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2491) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<byte> (V2493) (if (cons? (hd V2493)) (let Parse_Char (hd (hd V2493)) (shen.pair (hd (shen.pair (tl (hd V2493)) (shen.hdtl V2493))) (n->string Parse_Char))) (fail)))

(defun shen.<strc> (V2495) (if (cons? (hd V2495)) (let Parse_Char (hd (hd V2495)) (if (not (= Parse_Char 34)) (shen.pair (hd (shen.pair (tl (hd V2495)) (shen.hdtl V2495))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.<number> (V2497) (let YaccParse (let Parse_shen.<minus> (shen.<minus> V2497) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (- 0 (shen.hdtl Parse_shen.<number>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<plus> (shen.<plus> V2497) (if (not (= (fail) Parse_shen.<plus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<plus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<predigits> (shen.<predigits> V2497) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<postdigits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1)))) (fail))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<digits> (shen.<digits> V2497) (if (not (= (fail) Parse_shen.<digits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<digits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<predigits> (shen.<predigits> V2497) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (shen.pair (hd Parse_shen.<postdigits>) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digits> (shen.<digits> V2497) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))

(defun shen.<E> (V2499) (if (and (cons? (hd V2499)) (= 101 (hd (hd V2499)))) (shen.pair (hd (shen.pair (tl (hd V2499)) (shen.hdtl V2499))) shen.skip) (fail)))

(defun shen.<log10> (V2501) (let YaccParse (let Parse_shen.<minus> (shen.<minus> V2501) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (- 0 (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digits> (shen.<digits> V2501) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) YaccParse)))

(defun shen.<plus> (V2503) (if (cons? (hd V2503)) (let Parse_Char (hd (hd V2503)) (if (= Parse_Char 43) (shen.pair (hd (shen.pair (tl (hd V2503)) (shen.hdtl V2503))) Parse_Char) (fail))) (fail)))

(defun shen.<stop> (V2505) (if (cons? (hd V2505)) (let Parse_Char (hd (hd V2505)) (if (= Parse_Char 46) (shen.pair (hd (shen.pair (tl (hd V2505)) (shen.hdtl V2505))) Parse_Char) (fail))) (fail)))

(defun shen.<predigits> (V2507) (let YaccParse (let Parse_shen.<digits> (shen.<digits> V2507) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2507) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<postdigits> (V2509) (let Parse_shen.<digits> (shen.<digits> V2509) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))))

(defun shen.<digits> (V2511) (let YaccParse (let Parse_shen.<digit> (shen.<digit> V2511) (if (not (= (fail) Parse_shen.<digit>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<digit>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (cons (shen.hdtl Parse_shen.<digit>) (shen.hdtl Parse_shen.<digits>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digit> (shen.<digit> V2511) (if (not (= (fail) Parse_shen.<digit>)) (shen.pair (hd Parse_shen.<digit>) (cons (shen.hdtl Parse_shen.<digit>) ())) (fail))) YaccParse)))

(defun shen.<digit> (V2513) (if (cons? (hd V2513)) (let Parse_X (hd (hd V2513)) (if (shen.numbyte? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2513)) (shen.hdtl V2513))) (shen.byte->digit Parse_X)) (fail))) (fail)))

(defun shen.byte->digit (V2515) (cond ((= 48 V2515) 0) ((= 49 V2515) 1) ((= 50 V2515) 2) ((= 51 V2515) 3) ((= 52 V2515) 4) ((= 53 V2515) 5) ((= 54 V2515) 6) ((= 55 V2515) 7) ((= 56 V2515) 8) ((= 57 V2515) 9) (true (shen.f_error shen.byte->digit))))

(defun shen.pre (V2520 V2521) (cond ((= () V2520) 0) ((cons? V2520) (+ (* (shen.expt 10 V2521) (hd V2520)) (shen.pre (tl V2520) (+ V2521 1)))) (true (shen.f_error shen.pre))))

(defun shen.post (V2526 V2527) (cond ((= () V2526) 0) ((cons? V2526) (+ (* (shen.expt 10 (- 0 V2527)) (hd V2526)) (shen.post (tl V2526) (+ V2527 1)))) (true (shen.f_error shen.post))))

(defun shen.expt (V2532 V2533) (cond ((= 0 V2533) 1) ((> V2533 0) (* V2532 (shen.expt V2532 (- V2533 1)))) (true (* 1.0 (/ (shen.expt V2532 (+ V2533 1)) V2532)))))

(defun shen.<st_input1> (V2535) (let Parse_shen.<st_input> (shen.<st_input> V2535) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))))

(defun shen.<st_input2> (V2537) (let Parse_shen.<st_input> (shen.<st_input> V2537) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))))

(defun shen.<comment> (V2539) (let YaccParse (let Parse_shen.<singleline> (shen.<singleline> V2539) (if (not (= (fail) Parse_shen.<singleline>)) (shen.pair (hd Parse_shen.<singleline>) shen.skip) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<multiline> (shen.<multiline> V2539) (if (not (= (fail) Parse_shen.<multiline>)) (shen.pair (hd Parse_shen.<multiline>) shen.skip) (fail))) YaccParse)))

(defun shen.<singleline> (V2541) (let Parse_shen.<backslash> (shen.<backslash> V2541) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<anysingle>)) (let Parse_shen.<return> (shen.<return> Parse_shen.<anysingle>) (if (not (= (fail) Parse_shen.<return>)) (shen.pair (hd Parse_shen.<return>) shen.skip) (fail))) (fail))) (fail))) (fail))))

(defun shen.<backslash> (V2543) (if (and (cons? (hd V2543)) (= 92 (hd (hd V2543)))) (shen.pair (hd (shen.pair (tl (hd V2543)) (shen.hdtl V2543))) shen.skip) (fail)))

(defun shen.<anysingle> (V2545) (let YaccParse (let Parse_shen.<non-return> (shen.<non-return> V2545) (if (not (= (fail) Parse_shen.<non-return>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<non-return>) (if (not (= (fail) Parse_shen.<anysingle>)) (shen.pair (hd Parse_shen.<anysingle>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2545) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) shen.skip) (fail))) YaccParse)))

(defun shen.<non-return> (V2547) (if (cons? (hd V2547)) (let Parse_X (hd (hd V2547)) (if (not (element? Parse_X (cons 10 (cons 13 ())))) (shen.pair (hd (shen.pair (tl (hd V2547)) (shen.hdtl V2547))) shen.skip) (fail))) (fail)))

(defun shen.<return> (V2549) (if (cons? (hd V2549)) (let Parse_X (hd (hd V2549)) (if (element? Parse_X (cons 10 (cons 13 ()))) (shen.pair (hd (shen.pair (tl (hd V2549)) (shen.hdtl V2549))) shen.skip) (fail))) (fail)))

(defun shen.<multiline> (V2551) (let Parse_shen.<backslash> (shen.<backslash> V2551) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<times> (shen.<times> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (fail))))

(defun shen.<times> (V2553) (if (and (cons? (hd V2553)) (= 42 (hd (hd V2553)))) (shen.pair (hd (shen.pair (tl (hd V2553)) (shen.hdtl V2553))) shen.skip) (fail)))

(defun shen.<anymulti> (V2555) (let YaccParse (let Parse_shen.<comment> (shen.<comment> V2555) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<times> (shen.<times> V2555) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<backslash>)) (shen.pair (hd Parse_shen.<backslash>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (if (cons? (hd V2555)) (let Parse_X (hd (hd V2555)) (let Parse_shen.<anymulti> (shen.<anymulti> (shen.pair (tl (hd V2555)) (shen.hdtl V2555))) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail)))) (fail)) YaccParse)) YaccParse)))

(defun shen.<whitespaces> (V2557) (let YaccParse (let Parse_shen.<whitespace> (shen.<whitespace> V2557) (if (not (= (fail) Parse_shen.<whitespace>)) (let Parse_shen.<whitespaces> (shen.<whitespaces> Parse_shen.<whitespace>) (if (not (= (fail) Parse_shen.<whitespaces>)) (shen.pair (hd Parse_shen.<whitespaces>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<whitespace> (shen.<whitespace> V2557) (if (not (= (fail) Parse_shen.<whitespace>)) (shen.pair (hd Parse_shen.<whitespace>) shen.skip) (fail))) YaccParse)))

(defun shen.<whitespace> (V2559) (if (cons? (hd V2559)) (let Parse_X (hd (hd V2559)) (if (let Parse_Case Parse_X (or (= Parse_Case 32) (or (= Parse_Case 13) (or (= Parse_Case 10) (= Parse_Case 9))))) (shen.pair (hd (shen.pair (tl (hd V2559)) (shen.hdtl V2559))) shen.skip) (fail))) (fail)))

(defun shen.cons_form (V2561) (cond ((= () V2561) ()) ((and (cons? V2561) (and (cons? (tl V2561)) (and (cons? (tl (tl V2561))) (and (= () (tl (tl (tl V2561)))) (= (hd (tl V2561)) bar!))))) (cons cons (cons (hd V2561) (tl (tl V2561))))) ((cons? V2561) (cons cons (cons (hd V2561) (cons (shen.cons_form (tl V2561)) ())))) (true (shen.f_error shen.cons_form))))

(defun shen.package-macro (V2566 V2567) (cond ((and (cons? V2566) (and (= $ (hd V2566)) (and (cons? (tl V2566)) (= () (tl (tl V2566)))))) (append (explode (hd (tl V2566))) V2567)) ((and (cons? V2566) (and (= package (hd V2566)) (and (cons? (tl V2566)) (and (= null (hd (tl V2566))) (cons? (tl (tl V2566))))))) (append (tl (tl (tl V2566))) V2567)) ((and (cons? V2566) (and (= package (hd V2566)) (and (cons? (tl V2566)) (cons? (tl (tl V2566)))))) (let ListofExceptions (shen.eval-without-macros (hd (tl (tl V2566)))) (let External (shen.record-exceptions ListofExceptions (hd (tl V2566))) (let PackageNameDot (intern (cn (str (hd (tl V2566))) ".")) (let ExpPackageNameDot (explode PackageNameDot) (let Packaged (shen.packageh PackageNameDot ListofExceptions (tl (tl (tl V2566))) ExpPackageNameDot) (let Internal (shen.record-internal (hd (tl V2566)) (shen.internal-symbols ExpPackageNameDot Packaged)) (append Packaged V2567)))))))) (true (cons V2566 V2567))))

(defun shen.record-exceptions (V2570 V2571) (let CurrExceptions (get/or V2571 shen.external-symbols (freeze ()) (value *property-vector*)) (let AllExceptions (union V2570 CurrExceptions) (put V2571 shen.external-symbols AllExceptions (value *property-vector*)))))

(defun shen.record-internal (V2574 V2575) (put V2574 shen.internal-symbols (union V2575 (get/or V2574 shen.internal-symbols (freeze ()) (value *property-vector*))) (value *property-vector*)))

(defun shen.internal-symbols (V2586 V2587) (cond ((and (symbol? V2587) (shen.prefix? V2586 (explode V2587))) (cons V2587 ())) ((cons? V2587) (union (shen.internal-symbols V2586 (hd V2587)) (shen.internal-symbols V2586 (tl V2587)))) (true ())))

(defun shen.packageh (V2604 V2605 V2606 V2607) (cond ((cons? V2606) (cons (shen.packageh V2604 V2605 (hd V2606) V2607) (shen.packageh V2604 V2605 (tl V2606) V2607))) ((or (shen.sysfunc? V2606) (or (variable? V2606) (or (element? V2606 V2605) (or (shen.doubleunderline? V2606) (shen.singleunderline? V2606))))) V2606) ((and (symbol? V2606) (let ExplodeX (explode V2606) (and (not (shen.prefix? (cons "s" (cons "h" (cons "e" (cons "n" (cons "." ()))))) ExplodeX)) (not (shen.prefix? V2607 ExplodeX))))) (concat V2604 V2606)) (true V2606)))



