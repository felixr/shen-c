"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun read-char-code (V2157) (read-byte V2157))

(defun read-file-as-bytelist (V2159) (shen.read-file-as-Xlist V2159 (lambda S (read-byte S))))

(defun read-file-as-charlist (V2161) (shen.read-file-as-Xlist V2161 (lambda S (read-char-code S))))

(defun shen.read-file-as-Xlist (V2164 V2165) (let Stream (open V2164 in) (let X (V2165 Stream) (let Xs (shen.read-file-as-Xlist-help Stream V2165 X ()) (let Close (close Stream) (reverse Xs))))))

(defun shen.read-file-as-Xlist-help (V2170 V2171 V2172 V2173) (cond ((= -1 V2172) V2173) (true (shen.read-file-as-Xlist-help V2170 V2171 (V2171 V2170) (cons V2172 V2173)))))

(defun read-file-as-string (V2175) (let Stream (open V2175 in) (shen.rfas-h Stream (read-char-code Stream) "")))

(defun shen.rfas-h (V2179 V2180 V2181) (cond ((= -1 V2180) (do (close V2179) V2181)) (true (shen.rfas-h V2179 (read-char-code V2179) (cn V2181 (n->string V2180))))))

(defun input (V2183) (eval-kl (read V2183)))

(defun input+ (V2186 V2187) (let Mono? (shen.monotype V2186) (let Input (read V2187) (if (= false (shen.typecheck Input (shen.demodulate V2186))) (simple-error (cn "type error: " (shen.app Input (cn " is not of type " (shen.app V2186 "
" shen.r)) shen.r))) (eval-kl Input)))))

(defun shen.monotype (V2189) (cond ((cons? V2189) (map (lambda Z (shen.monotype Z)) V2189)) (true (if (variable? V2189) (simple-error (cn "input+ expects a monotype: not " (shen.app V2189 "
" shen.a))) V2189))))

(defun read (V2191) (hd (shen.read-loop V2191 (read-char-code V2191) ())))

(defun it () (value shen.*it*))

(defun shen.read-loop (V2199 V2200 V2201) (cond ((= 94 V2200) (simple-error "read aborted")) ((= -1 V2200) (if (empty? V2201) (simple-error "error: empty stream") (compile (lambda X (shen.<st_input> X)) V2201 (lambda E E)))) ((shen.terminator? V2200) (let AllChars (append V2201 (cons V2200 ())) (let It (shen.record-it AllChars) (let Read (compile (lambda X (shen.<st_input> X)) AllChars (lambda E shen.nextbyte)) (if (or (= Read shen.nextbyte) (empty? Read)) (shen.read-loop V2199 (read-char-code V2199) AllChars) Read))))) (true (shen.read-loop V2199 (read-char-code V2199) (append V2201 (cons V2200 ()))))))

(defun shen.terminator? (V2203) (element? V2203 (cons 9 (cons 10 (cons 13 (cons 32 (cons 34 (cons 41 (cons 93 ())))))))))

(defun lineread (V2205) (shen.lineread-loop (read-char-code V2205) () V2205))

(defun shen.lineread-loop (V2210 V2211 V2212) (cond ((= -1 V2210) (if (empty? V2211) (simple-error "empty stream") (compile (lambda X (shen.<st_input> X)) V2211 (lambda E E)))) ((= V2210 (shen.hat)) (simple-error "line read aborted")) ((element? V2210 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda X (shen.<st_input> X)) V2211 (lambda E shen.nextline)) (let It (shen.record-it V2211) (if (or (= Line shen.nextline) (empty? Line)) (shen.lineread-loop (read-char-code V2212) (append V2211 (cons V2210 ())) V2212) Line)))) (true (shen.lineread-loop (read-char-code V2212) (append V2211 (cons V2210 ())) V2212))))

(defun shen.record-it (V2214) (let TrimLeft (shen.trim-whitespace V2214) (let TrimRight (shen.trim-whitespace (reverse TrimLeft)) (let Trimmed (reverse TrimRight) (shen.record-it-h Trimmed)))))

(defun shen.trim-whitespace (V2216) (cond ((and (cons? V2216) (element? (hd V2216) (cons 9 (cons 10 (cons 13 (cons 32 ())))))) (shen.trim-whitespace (tl V2216))) (true V2216)))

(defun shen.record-it-h (V2218) (do (set shen.*it* (shen.cn-all (map (lambda X (n->string X)) V2218))) V2218))

(defun shen.cn-all (V2220) (cond ((= () V2220) "") ((cons? V2220) (cn (hd V2220) (shen.cn-all (tl V2220)))) (true (shen.f_error shen.cn-all))))

(defun read-file (V2222) (let Charlist (read-file-as-charlist V2222) (compile (lambda X (shen.<st_input> X)) Charlist (lambda X (shen.read-error X)))))

(defun read-from-string (V2224) (let Ns (map (lambda X (string->n X)) (explode V2224)) (compile (lambda X (shen.<st_input> X)) Ns (lambda X (shen.read-error X)))))

(defun shen.read-error (V2232) (cond ((and (cons? V2232) (and (cons? (hd V2232)) (and (cons? (tl V2232)) (= () (tl (tl V2232)))))) (simple-error (cn "read error here:

 " (shen.app (shen.compress-50 50 (hd V2232)) "
" shen.a)))) (true (simple-error "read error
"))))

(defun shen.compress-50 (V2239 V2240) (cond ((= () V2240) "") ((= 0 V2239) "") ((cons? V2240) (cn (n->string (hd V2240)) (shen.compress-50 (- V2239 1) (tl V2240)))) (true (shen.f_error shen.compress-50))))

(defun shen.<st_input> (V2242) (let YaccParse (let Parse_shen.<lsb> (shen.<lsb> V2242) (if (not (= (fail) Parse_shen.<lsb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lsb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rsb> (shen.<rsb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rsb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rsb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (cons (macroexpand (shen.cons_form (shen.hdtl Parse_shen.<st_input1>))) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<lrb> (shen.<lrb> V2242) (if (not (= (fail) Parse_shen.<lrb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lrb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rrb> (shen.<rrb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rrb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rrb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (shen.package-macro (macroexpand (shen.hdtl Parse_shen.<st_input1>)) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<lcurly> (shen.<lcurly> V2242) (if (not (= (fail) Parse_shen.<lcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<lcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons { (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<rcurly> (shen.<rcurly> V2242) (if (not (= (fail) Parse_shen.<rcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<rcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons } (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<bar> (shen.<bar> V2242) (if (not (= (fail) Parse_shen.<bar>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<bar>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons bar! (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<semicolon> (shen.<semicolon> V2242) (if (not (= (fail) Parse_shen.<semicolon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<semicolon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons ; (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V2242) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<equal> (shen.<equal> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<equal>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<equal>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons := (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V2242) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<minus> (shen.<minus> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons :- (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V2242) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons : (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<comma> (shen.<comma> V2242) (if (not (= (fail) Parse_shen.<comma>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comma>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (intern ",") (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<comment> (shen.<comment> V2242) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<atom> (shen.<atom> V2242) (if (not (= (fail) Parse_shen.<atom>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<atom>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (macroexpand (shen.hdtl Parse_shen.<atom>)) (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<whitespaces> (shen.<whitespaces> V2242) (if (not (= (fail) Parse_shen.<whitespaces>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<whitespaces>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2242) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))

(defun shen.<lsb> (V2244) (if (and (cons? (hd V2244)) (= 91 (hd (hd V2244)))) (shen.pair (hd (shen.pair (tl (hd V2244)) (shen.hdtl V2244))) shen.skip) (fail)))

(defun shen.<rsb> (V2246) (if (and (cons? (hd V2246)) (= 93 (hd (hd V2246)))) (shen.pair (hd (shen.pair (tl (hd V2246)) (shen.hdtl V2246))) shen.skip) (fail)))

(defun shen.<lcurly> (V2248) (if (and (cons? (hd V2248)) (= 123 (hd (hd V2248)))) (shen.pair (hd (shen.pair (tl (hd V2248)) (shen.hdtl V2248))) shen.skip) (fail)))

(defun shen.<rcurly> (V2250) (if (and (cons? (hd V2250)) (= 125 (hd (hd V2250)))) (shen.pair (hd (shen.pair (tl (hd V2250)) (shen.hdtl V2250))) shen.skip) (fail)))

(defun shen.<bar> (V2252) (if (and (cons? (hd V2252)) (= 124 (hd (hd V2252)))) (shen.pair (hd (shen.pair (tl (hd V2252)) (shen.hdtl V2252))) shen.skip) (fail)))

(defun shen.<semicolon> (V2254) (if (and (cons? (hd V2254)) (= 59 (hd (hd V2254)))) (shen.pair (hd (shen.pair (tl (hd V2254)) (shen.hdtl V2254))) shen.skip) (fail)))

(defun shen.<colon> (V2256) (if (and (cons? (hd V2256)) (= 58 (hd (hd V2256)))) (shen.pair (hd (shen.pair (tl (hd V2256)) (shen.hdtl V2256))) shen.skip) (fail)))

(defun shen.<comma> (V2258) (if (and (cons? (hd V2258)) (= 44 (hd (hd V2258)))) (shen.pair (hd (shen.pair (tl (hd V2258)) (shen.hdtl V2258))) shen.skip) (fail)))

(defun shen.<equal> (V2260) (if (and (cons? (hd V2260)) (= 61 (hd (hd V2260)))) (shen.pair (hd (shen.pair (tl (hd V2260)) (shen.hdtl V2260))) shen.skip) (fail)))

(defun shen.<minus> (V2262) (if (and (cons? (hd V2262)) (= 45 (hd (hd V2262)))) (shen.pair (hd (shen.pair (tl (hd V2262)) (shen.hdtl V2262))) shen.skip) (fail)))

(defun shen.<lrb> (V2264) (if (and (cons? (hd V2264)) (= 40 (hd (hd V2264)))) (shen.pair (hd (shen.pair (tl (hd V2264)) (shen.hdtl V2264))) shen.skip) (fail)))

(defun shen.<rrb> (V2266) (if (and (cons? (hd V2266)) (= 41 (hd (hd V2266)))) (shen.pair (hd (shen.pair (tl (hd V2266)) (shen.hdtl V2266))) shen.skip) (fail)))

(defun shen.<atom> (V2268) (let YaccParse (let Parse_shen.<str> (shen.<str> V2268) (if (not (= (fail) Parse_shen.<str>)) (shen.pair (hd Parse_shen.<str>) (shen.control-chars (shen.hdtl Parse_shen.<str>))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<number> (shen.<number> V2268) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<sym> (shen.<sym> V2268) (if (not (= (fail) Parse_shen.<sym>)) (shen.pair (hd Parse_shen.<sym>) (if (= (shen.hdtl Parse_shen.<sym>) "<>") (cons vector (cons 0 ())) (intern (shen.hdtl Parse_shen.<sym>)))) (fail))) YaccParse)) YaccParse)))

(defun shen.control-chars (V2270) (cond ((= () V2270) "") ((and (cons? V2270) (and (= "c" (hd V2270)) (and (cons? (tl V2270)) (= "#" (hd (tl V2270)))))) (let CodePoint (shen.code-point (tl (tl V2270))) (let AfterCodePoint (shen.after-codepoint (tl (tl V2270))) (@s (n->string (shen.decimalise CodePoint)) (shen.control-chars AfterCodePoint))))) ((cons? V2270) (@s (hd V2270) (shen.control-chars (tl V2270)))) (true (shen.f_error shen.control-chars))))

(defun shen.code-point (V2274) (cond ((and (cons? V2274) (= ";" (hd V2274))) "") ((and (cons? V2274) (element? (hd V2274) (cons "0" (cons "1" (cons "2" (cons "3" (cons "4" (cons "5" (cons "6" (cons "7" (cons "8" (cons "9" (cons "0" ()))))))))))))) (cons (hd V2274) (shen.code-point (tl V2274)))) (true (simple-error (cn "code point parse error " (shen.app V2274 "
" shen.a))))))

(defun shen.after-codepoint (V2280) (cond ((= () V2280) ()) ((and (cons? V2280) (= ";" (hd V2280))) (tl V2280)) ((cons? V2280) (shen.after-codepoint (tl V2280))) (true (shen.f_error shen.after-codepoint))))

(defun shen.decimalise (V2282) (shen.pre (reverse (shen.digits->integers V2282)) 0))

(defun shen.digits->integers (V2288) (cond ((and (cons? V2288) (= "0" (hd V2288))) (cons 0 (shen.digits->integers (tl V2288)))) ((and (cons? V2288) (= "1" (hd V2288))) (cons 1 (shen.digits->integers (tl V2288)))) ((and (cons? V2288) (= "2" (hd V2288))) (cons 2 (shen.digits->integers (tl V2288)))) ((and (cons? V2288) (= "3" (hd V2288))) (cons 3 (shen.digits->integers (tl V2288)))) ((and (cons? V2288) (= "4" (hd V2288))) (cons 4 (shen.digits->integers (tl V2288)))) ((and (cons? V2288) (= "5" (hd V2288))) (cons 5 (shen.digits->integers (tl V2288)))) ((and (cons? V2288) (= "6" (hd V2288))) (cons 6 (shen.digits->integers (tl V2288)))) ((and (cons? V2288) (= "7" (hd V2288))) (cons 7 (shen.digits->integers (tl V2288)))) ((and (cons? V2288) (= "8" (hd V2288))) (cons 8 (shen.digits->integers (tl V2288)))) ((and (cons? V2288) (= "9" (hd V2288))) (cons 9 (shen.digits->integers (tl V2288)))) (true ())))

(defun shen.<sym> (V2290) (let Parse_shen.<alpha> (shen.<alpha> V2290) (if (not (= (fail) Parse_shen.<alpha>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alpha>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))))

(defun shen.<alphanums> (V2292) (let YaccParse (let Parse_shen.<alphanum> (shen.<alphanum> V2292) (if (not (= (fail) Parse_shen.<alphanum>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alphanum>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alphanum>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2292) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) "") (fail))) YaccParse)))

(defun shen.<alphanum> (V2294) (let YaccParse (let Parse_shen.<alpha> (shen.<alpha> V2294) (if (not (= (fail) Parse_shen.<alpha>)) (shen.pair (hd Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alpha>)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<num> (shen.<num> V2294) (if (not (= (fail) Parse_shen.<num>)) (shen.pair (hd Parse_shen.<num>) (shen.hdtl Parse_shen.<num>)) (fail))) YaccParse)))

(defun shen.<num> (V2296) (if (cons? (hd V2296)) (let Parse_Char (hd (hd V2296)) (if (shen.numbyte? Parse_Char) (shen.pair (hd (shen.pair (tl (hd V2296)) (shen.hdtl V2296))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.numbyte? (V2302) (cond ((= 48 V2302) true) ((= 49 V2302) true) ((= 50 V2302) true) ((= 51 V2302) true) ((= 52 V2302) true) ((= 53 V2302) true) ((= 54 V2302) true) ((= 55 V2302) true) ((= 56 V2302) true) ((= 57 V2302) true) (true false)))

(defun shen.<alpha> (V2304) (if (cons? (hd V2304)) (let Parse_Char (hd (hd V2304)) (if (shen.symbol-code? Parse_Char) (shen.pair (hd (shen.pair (tl (hd V2304)) (shen.hdtl V2304))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.symbol-code? (V2306) (or (= V2306 126) (or (and (> V2306 94) (< V2306 123)) (or (and (> V2306 59) (< V2306 91)) (or (and (> V2306 41) (and (< V2306 58) (not (= V2306 44)))) (or (and (> V2306 34) (< V2306 40)) (= V2306 33)))))))

(defun shen.<str> (V2308) (let Parse_shen.<dbq> (shen.<dbq> V2308) (if (not (= (fail) Parse_shen.<dbq>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<dbq>) (if (not (= (fail) Parse_shen.<strcontents>)) (let Parse_shen.<dbq> (shen.<dbq> Parse_shen.<strcontents>) (if (not (= (fail) Parse_shen.<dbq>)) (shen.pair (hd Parse_shen.<dbq>) (shen.hdtl Parse_shen.<strcontents>)) (fail))) (fail))) (fail))))

(defun shen.<dbq> (V2310) (if (cons? (hd V2310)) (let Parse_Char (hd (hd V2310)) (if (= Parse_Char 34) (shen.pair (hd (shen.pair (tl (hd V2310)) (shen.hdtl V2310))) Parse_Char) (fail))) (fail)))

(defun shen.<strcontents> (V2312) (let YaccParse (let Parse_shen.<strc> (shen.<strc> V2312) (if (not (= (fail) Parse_shen.<strc>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<strc>) (if (not (= (fail) Parse_shen.<strcontents>)) (shen.pair (hd Parse_shen.<strcontents>) (cons (shen.hdtl Parse_shen.<strc>) (shen.hdtl Parse_shen.<strcontents>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2312) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<byte> (V2314) (if (cons? (hd V2314)) (let Parse_Char (hd (hd V2314)) (shen.pair (hd (shen.pair (tl (hd V2314)) (shen.hdtl V2314))) (n->string Parse_Char))) (fail)))

(defun shen.<strc> (V2316) (if (cons? (hd V2316)) (let Parse_Char (hd (hd V2316)) (if (not (= Parse_Char 34)) (shen.pair (hd (shen.pair (tl (hd V2316)) (shen.hdtl V2316))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.<number> (V2318) (let YaccParse (let Parse_shen.<minus> (shen.<minus> V2318) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (- 0 (shen.hdtl Parse_shen.<number>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<plus> (shen.<plus> V2318) (if (not (= (fail) Parse_shen.<plus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<plus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<predigits> (shen.<predigits> V2318) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<postdigits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1)))) (fail))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<digits> (shen.<digits> V2318) (if (not (= (fail) Parse_shen.<digits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<digits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<predigits> (shen.<predigits> V2318) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (shen.pair (hd Parse_shen.<postdigits>) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digits> (shen.<digits> V2318) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))

(defun shen.<E> (V2320) (if (and (cons? (hd V2320)) (= 101 (hd (hd V2320)))) (shen.pair (hd (shen.pair (tl (hd V2320)) (shen.hdtl V2320))) shen.skip) (fail)))

(defun shen.<log10> (V2322) (let YaccParse (let Parse_shen.<minus> (shen.<minus> V2322) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (- 0 (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digits> (shen.<digits> V2322) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) YaccParse)))

(defun shen.<plus> (V2324) (if (cons? (hd V2324)) (let Parse_Char (hd (hd V2324)) (if (= Parse_Char 43) (shen.pair (hd (shen.pair (tl (hd V2324)) (shen.hdtl V2324))) Parse_Char) (fail))) (fail)))

(defun shen.<stop> (V2326) (if (cons? (hd V2326)) (let Parse_Char (hd (hd V2326)) (if (= Parse_Char 46) (shen.pair (hd (shen.pair (tl (hd V2326)) (shen.hdtl V2326))) Parse_Char) (fail))) (fail)))

(defun shen.<predigits> (V2328) (let YaccParse (let Parse_shen.<digits> (shen.<digits> V2328) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2328) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<postdigits> (V2330) (let Parse_shen.<digits> (shen.<digits> V2330) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))))

(defun shen.<digits> (V2332) (let YaccParse (let Parse_shen.<digit> (shen.<digit> V2332) (if (not (= (fail) Parse_shen.<digit>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<digit>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (cons (shen.hdtl Parse_shen.<digit>) (shen.hdtl Parse_shen.<digits>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digit> (shen.<digit> V2332) (if (not (= (fail) Parse_shen.<digit>)) (shen.pair (hd Parse_shen.<digit>) (cons (shen.hdtl Parse_shen.<digit>) ())) (fail))) YaccParse)))

(defun shen.<digit> (V2334) (if (cons? (hd V2334)) (let Parse_X (hd (hd V2334)) (if (shen.numbyte? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2334)) (shen.hdtl V2334))) (shen.byte->digit Parse_X)) (fail))) (fail)))

(defun shen.byte->digit (V2336) (cond ((= 48 V2336) 0) ((= 49 V2336) 1) ((= 50 V2336) 2) ((= 51 V2336) 3) ((= 52 V2336) 4) ((= 53 V2336) 5) ((= 54 V2336) 6) ((= 55 V2336) 7) ((= 56 V2336) 8) ((= 57 V2336) 9) (true (shen.f_error shen.byte->digit))))

(defun shen.pre (V2341 V2342) (cond ((= () V2341) 0) ((cons? V2341) (+ (* (shen.expt 10 V2342) (hd V2341)) (shen.pre (tl V2341) (+ V2342 1)))) (true (shen.f_error shen.pre))))

(defun shen.post (V2347 V2348) (cond ((= () V2347) 0) ((cons? V2347) (+ (* (shen.expt 10 (- 0 V2348)) (hd V2347)) (shen.post (tl V2347) (+ V2348 1)))) (true (shen.f_error shen.post))))

(defun shen.expt (V2353 V2354) (cond ((= 0 V2354) 1) ((> V2354 0) (* V2353 (shen.expt V2353 (- V2354 1)))) (true (* 1.0 (/ (shen.expt V2353 (+ V2354 1)) V2353)))))

(defun shen.<st_input1> (V2356) (let Parse_shen.<st_input> (shen.<st_input> V2356) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))))

(defun shen.<st_input2> (V2358) (let Parse_shen.<st_input> (shen.<st_input> V2358) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))))

(defun shen.<comment> (V2360) (let YaccParse (let Parse_shen.<singleline> (shen.<singleline> V2360) (if (not (= (fail) Parse_shen.<singleline>)) (shen.pair (hd Parse_shen.<singleline>) shen.skip) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<multiline> (shen.<multiline> V2360) (if (not (= (fail) Parse_shen.<multiline>)) (shen.pair (hd Parse_shen.<multiline>) shen.skip) (fail))) YaccParse)))

(defun shen.<singleline> (V2362) (let Parse_shen.<backslash> (shen.<backslash> V2362) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<anysingle>)) (let Parse_shen.<return> (shen.<return> Parse_shen.<anysingle>) (if (not (= (fail) Parse_shen.<return>)) (shen.pair (hd Parse_shen.<return>) shen.skip) (fail))) (fail))) (fail))) (fail))))

(defun shen.<backslash> (V2364) (if (and (cons? (hd V2364)) (= 92 (hd (hd V2364)))) (shen.pair (hd (shen.pair (tl (hd V2364)) (shen.hdtl V2364))) shen.skip) (fail)))

(defun shen.<anysingle> (V2366) (let YaccParse (let Parse_shen.<non-return> (shen.<non-return> V2366) (if (not (= (fail) Parse_shen.<non-return>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<non-return>) (if (not (= (fail) Parse_shen.<anysingle>)) (shen.pair (hd Parse_shen.<anysingle>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2366) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) shen.skip) (fail))) YaccParse)))

(defun shen.<non-return> (V2368) (if (cons? (hd V2368)) (let Parse_X (hd (hd V2368)) (if (not (element? Parse_X (cons 10 (cons 13 ())))) (shen.pair (hd (shen.pair (tl (hd V2368)) (shen.hdtl V2368))) shen.skip) (fail))) (fail)))

(defun shen.<return> (V2370) (if (cons? (hd V2370)) (let Parse_X (hd (hd V2370)) (if (element? Parse_X (cons 10 (cons 13 ()))) (shen.pair (hd (shen.pair (tl (hd V2370)) (shen.hdtl V2370))) shen.skip) (fail))) (fail)))

(defun shen.<multiline> (V2372) (let Parse_shen.<backslash> (shen.<backslash> V2372) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<times> (shen.<times> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (fail))))

(defun shen.<times> (V2374) (if (and (cons? (hd V2374)) (= 42 (hd (hd V2374)))) (shen.pair (hd (shen.pair (tl (hd V2374)) (shen.hdtl V2374))) shen.skip) (fail)))

(defun shen.<anymulti> (V2376) (let YaccParse (let Parse_shen.<comment> (shen.<comment> V2376) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<times> (shen.<times> V2376) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<backslash>)) (shen.pair (hd Parse_shen.<backslash>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (if (cons? (hd V2376)) (let Parse_X (hd (hd V2376)) (let Parse_shen.<anymulti> (shen.<anymulti> (shen.pair (tl (hd V2376)) (shen.hdtl V2376))) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail)))) (fail)) YaccParse)) YaccParse)))

(defun shen.<whitespaces> (V2378) (let YaccParse (let Parse_shen.<whitespace> (shen.<whitespace> V2378) (if (not (= (fail) Parse_shen.<whitespace>)) (let Parse_shen.<whitespaces> (shen.<whitespaces> Parse_shen.<whitespace>) (if (not (= (fail) Parse_shen.<whitespaces>)) (shen.pair (hd Parse_shen.<whitespaces>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<whitespace> (shen.<whitespace> V2378) (if (not (= (fail) Parse_shen.<whitespace>)) (shen.pair (hd Parse_shen.<whitespace>) shen.skip) (fail))) YaccParse)))

(defun shen.<whitespace> (V2380) (if (cons? (hd V2380)) (let Parse_X (hd (hd V2380)) (if (let Parse_Case Parse_X (or (= Parse_Case 32) (or (= Parse_Case 13) (or (= Parse_Case 10) (= Parse_Case 9))))) (shen.pair (hd (shen.pair (tl (hd V2380)) (shen.hdtl V2380))) shen.skip) (fail))) (fail)))

(defun shen.cons_form (V2382) (cond ((= () V2382) ()) ((and (cons? V2382) (and (cons? (tl V2382)) (and (cons? (tl (tl V2382))) (and (= () (tl (tl (tl V2382)))) (= (hd (tl V2382)) bar!))))) (cons cons (cons (hd V2382) (tl (tl V2382))))) ((cons? V2382) (cons cons (cons (hd V2382) (cons (shen.cons_form (tl V2382)) ())))) (true (shen.f_error shen.cons_form))))

(defun shen.package-macro (V2387 V2388) (cond ((and (cons? V2387) (and (= $ (hd V2387)) (and (cons? (tl V2387)) (= () (tl (tl V2387)))))) (append (explode (hd (tl V2387))) V2388)) ((and (cons? V2387) (and (= package (hd V2387)) (and (cons? (tl V2387)) (and (= null (hd (tl V2387))) (cons? (tl (tl V2387))))))) (append (tl (tl (tl V2387))) V2388)) ((and (cons? V2387) (and (= package (hd V2387)) (and (cons? (tl V2387)) (cons? (tl (tl V2387)))))) (let ListofExceptions (shen.eval-without-macros (hd (tl (tl V2387)))) (let External (shen.record-exceptions ListofExceptions (hd (tl V2387))) (let PackageNameDot (intern (cn (str (hd (tl V2387))) ".")) (let ExpPackageNameDot (explode PackageNameDot) (let Packaged (shen.packageh PackageNameDot ListofExceptions (tl (tl (tl V2387))) ExpPackageNameDot) (let Internal (shen.record-internal (hd (tl V2387)) (shen.internal-symbols ExpPackageNameDot Packaged)) (append Packaged V2388)))))))) (true (cons V2387 V2388))))

(defun shen.record-exceptions (V2391 V2392) (let CurrExceptions (get/or V2392 shen.external-symbols (freeze ()) (value *property-vector*)) (let AllExceptions (union V2391 CurrExceptions) (put V2392 shen.external-symbols AllExceptions (value *property-vector*)))))

(defun shen.record-internal (V2395 V2396) (put V2395 shen.internal-symbols (union V2396 (get/or V2395 shen.internal-symbols (freeze ()) (value *property-vector*))) (value *property-vector*)))

(defun shen.internal-symbols (V2407 V2408) (cond ((and (symbol? V2408) (shen.prefix? V2407 (explode V2408))) (cons V2408 ())) ((cons? V2408) (union (shen.internal-symbols V2407 (hd V2408)) (shen.internal-symbols V2407 (tl V2408)))) (true ())))

(defun shen.packageh (V2425 V2426 V2427 V2428) (cond ((cons? V2427) (cons (shen.packageh V2425 V2426 (hd V2427) V2428) (shen.packageh V2425 V2426 (tl V2427) V2428))) ((or (shen.sysfunc? V2427) (or (variable? V2427) (or (element? V2427 V2426) (or (shen.doubleunderline? V2427) (shen.singleunderline? V2427))))) V2427) ((and (symbol? V2427) (let ExplodeX (explode V2427) (and (not (shen.prefix? (cons "s" (cons "h" (cons "e" (cons "n" (cons "." ()))))) ExplodeX)) (not (shen.prefix? V2428 ExplodeX))))) (concat V2425 V2427)) (true V2427)))



