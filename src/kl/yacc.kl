"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.yacc (V4007) (cond ((and (cons? V4007) (and (= defcc (hd V4007)) (cons? (tl V4007)))) (shen.yacc->shen (hd (tl V4007)) (tl (tl V4007)))) (true (shen.f_error shen.yacc))))

(defun shen.yacc->shen (V4010 V4011) (let CCRules (shen.split_cc_rules true V4011 ()) (let CCBody (map (lambda X (shen.cc_body X)) CCRules) (let YaccCases (shen.yacc_cases CCBody) (cons define (cons V4010 (cons Stream (cons -> (cons (shen.kill-code YaccCases) ())))))))))

(defun shen.kill-code (V4013) (cond ((> (occurrences kill V4013) 0) (cons trap-error (cons V4013 (cons (cons lambda (cons E (cons (cons shen.analyse-kill (cons E ())) ()))) ())))) (true V4013)))

(defun kill () (simple-error "yacc kill"))

(defun shen.analyse-kill (V4015) (let String (error-to-string V4015) (if (= String "yacc kill") (fail) V4015)))

(defun shen.split_cc_rules (V4021 V4022 V4023) (cond ((and (= () V4022) (= () V4023)) ()) ((= () V4022) (cons (shen.split_cc_rule V4021 (reverse V4023) ()) ())) ((and (cons? V4022) (= ; (hd V4022))) (cons (shen.split_cc_rule V4021 (reverse V4023) ()) (shen.split_cc_rules V4021 (tl V4022) ()))) ((cons? V4022) (shen.split_cc_rules V4021 (tl V4022) (cons (hd V4022) V4023))) (true (shen.f_error shen.split_cc_rules))))

(defun shen.split_cc_rule (V4031 V4032 V4033) (cond ((and (cons? V4032) (and (= := (hd V4032)) (and (cons? (tl V4032)) (= () (tl (tl V4032)))))) (cons (reverse V4033) (tl V4032))) ((and (cons? V4032) (and (= := (hd V4032)) (and (cons? (tl V4032)) (and (cons? (tl (tl V4032))) (and (= where (hd (tl (tl V4032)))) (and (cons? (tl (tl (tl V4032)))) (= () (tl (tl (tl (tl V4032))))))))))) (cons (reverse V4033) (cons (cons where (cons (hd (tl (tl (tl V4032)))) (cons (hd (tl V4032)) ()))) ()))) ((= () V4032) (do (shen.semantic-completion-warning V4031 V4033) (shen.split_cc_rule V4031 (cons := (cons (shen.default_semantics (reverse V4033)) ())) V4033))) ((cons? V4032) (shen.split_cc_rule V4031 (tl V4032) (cons (hd V4032) V4033))) (true (shen.f_error shen.split_cc_rule))))

(defun shen.semantic-completion-warning (V4044 V4045) (cond ((= true V4044) (do (shen.prhush "warning: " (stoutput)) (do (map (lambda X (shen.prhush (shen.app X " " shen.a) (stoutput))) (reverse V4045)) (shen.prhush "has no semantics.
" (stoutput))))) (true shen.skip)))

(defun shen.default_semantics (V4047) (cond ((= () V4047) ()) ((and (cons? V4047) (and (= () (tl V4047)) (shen.grammar_symbol? (hd V4047)))) (hd V4047)) ((and (cons? V4047) (shen.grammar_symbol? (hd V4047))) (cons append (cons (hd V4047) (cons (shen.default_semantics (tl V4047)) ())))) ((cons? V4047) (cons cons (cons (hd V4047) (cons (shen.default_semantics (tl V4047)) ())))) (true (shen.f_error shen.default_semantics))))

(defun shen.grammar_symbol? (V4049) (and (symbol? V4049) (let Cs (shen.strip-pathname (explode V4049)) (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))

(defun shen.yacc_cases (V4051) (cond ((and (cons? V4051) (= () (tl V4051))) (hd V4051)) ((cons? V4051) (let P YaccParse (cons let (cons P (cons (hd V4051) (cons (cons if (cons (cons = (cons P (cons (cons fail ()) ()))) (cons (shen.yacc_cases (tl V4051)) (cons P ())))) ())))))) (true (shen.f_error shen.yacc_cases))))

(defun shen.cc_body (V4053) (cond ((and (cons? V4053) (and (cons? (tl V4053)) (= () (tl (tl V4053))))) (shen.syntax (hd V4053) Stream (hd (tl V4053)))) (true (shen.f_error shen.cc_body))))

(defun shen.syntax (V4057 V4058 V4059) (cond ((and (= () V4057) (and (cons? V4059) (and (= where (hd V4059)) (and (cons? (tl V4059)) (and (cons? (tl (tl V4059))) (= () (tl (tl (tl V4059))))))))) (cons if (cons (shen.semantics (hd (tl V4059))) (cons (cons shen.pair (cons (cons hd (cons V4058 ())) (cons (shen.semantics (hd (tl (tl V4059)))) ()))) (cons (cons fail ()) ()))))) ((= () V4057) (cons shen.pair (cons (cons hd (cons V4058 ())) (cons (shen.semantics V4059) ())))) ((cons? V4057) (if (shen.grammar_symbol? (hd V4057)) (shen.recursive_descent V4057 V4058 V4059) (if (variable? (hd V4057)) (shen.variable-match V4057 V4058 V4059) (if (shen.jump_stream? (hd V4057)) (shen.jump_stream V4057 V4058 V4059) (if (shen.terminal? (hd V4057)) (shen.check_stream V4057 V4058 V4059) (if (cons? (hd V4057)) (shen.list-stream (shen.decons (hd V4057)) (tl V4057) V4058 V4059) (simple-error (shen.app (hd V4057) " is not legal syntax
" shen.a)))))))) (true (shen.f_error shen.syntax))))

(defun shen.list-stream (V4064 V4065 V4066 V4067) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V4066 ())) ())) (cons (cons cons? (cons (cons hd (cons (cons hd (cons V4066 ())) ())) ())) ()))) (let Placeholder (gensym shen.place) (let RunOn (shen.syntax V4065 (cons shen.pair (cons (cons tl (cons (cons hd (cons V4066 ())) ())) (cons (cons hd (cons (cons tl (cons V4066 ())) ())) ()))) V4067) (let Action (shen.insert-runon RunOn Placeholder (shen.syntax V4064 (cons shen.pair (cons (cons hd (cons (cons hd (cons V4066 ())) ())) (cons (cons hd (cons (cons tl (cons V4066 ())) ())) ()))) Placeholder)) (cons if (cons Test (cons Action (cons (cons fail ()) ())))))))))

(defun shen.decons (V4069) (cond ((and (cons? V4069) (and (= cons (hd V4069)) (and (cons? (tl V4069)) (and (cons? (tl (tl V4069))) (and (= () (hd (tl (tl V4069)))) (= () (tl (tl (tl V4069))))))))) (cons (hd (tl V4069)) ())) ((and (cons? V4069) (and (= cons (hd V4069)) (and (cons? (tl V4069)) (and (cons? (tl (tl V4069))) (= () (tl (tl (tl V4069)))))))) (cons (hd (tl V4069)) (shen.decons (hd (tl (tl V4069)))))) (true V4069)))

(defun shen.insert-runon (V4084 V4085 V4086) (cond ((and (cons? V4086) (and (= shen.pair (hd V4086)) (and (cons? (tl V4086)) (and (cons? (tl (tl V4086))) (and (= () (tl (tl (tl V4086)))) (= (hd (tl (tl V4086))) V4085)))))) V4084) ((cons? V4086) (map (lambda Z (shen.insert-runon V4084 V4085 Z)) V4086)) (true V4086)))

(defun shen.strip-pathname (V4092) (cond ((not (element? "." V4092)) V4092) ((cons? V4092) (shen.strip-pathname (tl V4092))) (true (shen.f_error shen.strip-pathname))))

(defun shen.recursive_descent (V4096 V4097 V4098) (cond ((cons? V4096) (let Test (cons (hd V4096) (cons V4097 ())) (let Action (shen.syntax (tl V4096) (concat Parse_ (hd V4096)) V4098) (let Else (cons fail ()) (cons let (cons (concat Parse_ (hd V4096)) (cons Test (cons (cons if (cons (cons not (cons (cons = (cons (cons fail ()) (cons (concat Parse_ (hd V4096)) ()))) ())) (cons Action (cons Else ())))) ())))))))) (true (shen.f_error shen.recursive_descent))))

(defun shen.variable-match (V4102 V4103 V4104) (cond ((cons? V4102) (let Test (cons cons? (cons (cons hd (cons V4103 ())) ())) (let Action (cons let (cons (concat Parse_ (hd V4102)) (cons (cons hd (cons (cons hd (cons V4103 ())) ())) (cons (shen.syntax (tl V4102) (cons shen.pair (cons (cons tl (cons (cons hd (cons V4103 ())) ())) (cons (cons shen.hdtl (cons V4103 ())) ()))) V4104) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.variable-match))))

(defun shen.terminal? (V4114) (cond ((cons? V4114) false) ((variable? V4114) false) (true true)))

(defun shen.jump_stream? (V4120) (cond ((= V4120 _) true) (true false)))

(defun shen.check_stream (V4124 V4125 V4126) (cond ((cons? V4124) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V4125 ())) ())) (cons (cons = (cons (hd V4124) (cons (cons hd (cons (cons hd (cons V4125 ())) ())) ()))) ()))) (let Action (shen.syntax (tl V4124) (cons shen.pair (cons (cons tl (cons (cons hd (cons V4125 ())) ())) (cons (cons shen.hdtl (cons V4125 ())) ()))) V4126) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.check_stream))))

(defun shen.jump_stream (V4130 V4131 V4132) (cond ((cons? V4130) (let Test (cons cons? (cons (cons hd (cons V4131 ())) ())) (let Action (shen.syntax (tl V4130) (cons shen.pair (cons (cons tl (cons (cons hd (cons V4131 ())) ())) (cons (cons shen.hdtl (cons V4131 ())) ()))) V4132) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.jump_stream))))

(defun shen.semantics (V4134) (cond ((= () V4134) ()) ((shen.grammar_symbol? V4134) (cons shen.hdtl (cons (concat Parse_ V4134) ()))) ((variable? V4134) (concat Parse_ V4134)) ((cons? V4134) (map (lambda Z (shen.semantics Z)) V4134)) (true V4134)))

(defun shen.snd-or-fail (V4142) (cond ((and (cons? V4142) (and (cons? (tl V4142)) (= () (tl (tl V4142))))) (hd (tl V4142))) (true (fail))))

(defun fail () shen.fail!)(defun shen.pair (V4145 V4146) (cons V4145 (cons V4146 ())))

(defun shen.hdtl (V4148) (hd (tl V4148)))

(defun <!> (V4156) (cond ((and (cons? V4156) (and (cons? (tl V4156)) (= () (tl (tl V4156))))) (cons () (cons (hd V4156) ()))) (true (fail))))

(defun <e> (V4162) (cond ((and (cons? V4162) (and (cons? (tl V4162)) (= () (tl (tl V4162))))) (cons (hd V4162) (cons () ()))) (true (shen.f_error <e>))))



