"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.yacc (V4134) (cond ((and (cons? V4134) (and (= defcc (hd V4134)) (cons? (tl V4134)))) (shen.yacc->shen (hd (tl V4134)) (tl (tl V4134)))) (true (shen.f_error shen.yacc))))

(defun shen.yacc->shen (V4137 V4138) (let CCRules (shen.split_cc_rules true V4138 ()) (let CCBody (map (lambda X (shen.cc_body X)) CCRules) (let YaccCases (shen.yacc_cases CCBody) (cons define (cons V4137 (cons Stream (cons -> (cons (shen.kill-code YaccCases) ())))))))))

(defun shen.kill-code (V4140) (cond ((> (occurrences kill V4140) 0) (cons trap-error (cons V4140 (cons (cons lambda (cons E (cons (cons shen.analyse-kill (cons E ())) ()))) ())))) (true V4140)))

(defun kill () (simple-error "yacc kill"))

(defun shen.analyse-kill (V4142) (let String (error-to-string V4142) (if (= String "yacc kill") (fail) V4142)))

(defun shen.split_cc_rules (V4148 V4149 V4150) (cond ((and (= () V4149) (= () V4150)) ()) ((= () V4149) (cons (shen.split_cc_rule V4148 (reverse V4150) ()) ())) ((and (cons? V4149) (= ; (hd V4149))) (cons (shen.split_cc_rule V4148 (reverse V4150) ()) (shen.split_cc_rules V4148 (tl V4149) ()))) ((cons? V4149) (shen.split_cc_rules V4148 (tl V4149) (cons (hd V4149) V4150))) (true (shen.f_error shen.split_cc_rules))))

(defun shen.split_cc_rule (V4158 V4159 V4160) (cond ((and (cons? V4159) (and (= := (hd V4159)) (and (cons? (tl V4159)) (= () (tl (tl V4159)))))) (cons (reverse V4160) (tl V4159))) ((and (cons? V4159) (and (= := (hd V4159)) (and (cons? (tl V4159)) (and (cons? (tl (tl V4159))) (and (= where (hd (tl (tl V4159)))) (and (cons? (tl (tl (tl V4159)))) (= () (tl (tl (tl (tl V4159))))))))))) (cons (reverse V4160) (cons (cons where (cons (hd (tl (tl (tl V4159)))) (cons (hd (tl V4159)) ()))) ()))) ((= () V4159) (do (shen.semantic-completion-warning V4158 V4160) (shen.split_cc_rule V4158 (cons := (cons (shen.default_semantics (reverse V4160)) ())) V4160))) ((cons? V4159) (shen.split_cc_rule V4158 (tl V4159) (cons (hd V4159) V4160))) (true (shen.f_error shen.split_cc_rule))))

(defun shen.semantic-completion-warning (V4171 V4172) (cond ((= true V4171) (do (shen.prhush "warning: " (stoutput)) (do (for-each (lambda X (shen.prhush (shen.app X " " shen.a) (stoutput))) (reverse V4172)) (shen.prhush "has no semantics.
" (stoutput))))) (true shen.skip)))

(defun shen.default_semantics (V4174) (cond ((= () V4174) ()) ((and (cons? V4174) (and (= () (tl V4174)) (shen.grammar_symbol? (hd V4174)))) (hd V4174)) ((and (cons? V4174) (shen.grammar_symbol? (hd V4174))) (cons append (cons (hd V4174) (cons (shen.default_semantics (tl V4174)) ())))) ((cons? V4174) (cons cons (cons (hd V4174) (cons (shen.default_semantics (tl V4174)) ())))) (true (shen.f_error shen.default_semantics))))

(defun shen.grammar_symbol? (V4176) (and (symbol? V4176) (let Cs (shen.strip-pathname (explode V4176)) (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))

(defun shen.yacc_cases (V4178) (cond ((and (cons? V4178) (= () (tl V4178))) (hd V4178)) ((cons? V4178) (let P YaccParse (cons let (cons P (cons (hd V4178) (cons (cons if (cons (cons = (cons P (cons (cons fail ()) ()))) (cons (shen.yacc_cases (tl V4178)) (cons P ())))) ())))))) (true (shen.f_error shen.yacc_cases))))

(defun shen.cc_body (V4180) (cond ((and (cons? V4180) (and (cons? (tl V4180)) (= () (tl (tl V4180))))) (shen.syntax (hd V4180) Stream (hd (tl V4180)))) (true (shen.f_error shen.cc_body))))

(defun shen.syntax (V4184 V4185 V4186) (cond ((and (= () V4184) (and (cons? V4186) (and (= where (hd V4186)) (and (cons? (tl V4186)) (and (cons? (tl (tl V4186))) (= () (tl (tl (tl V4186))))))))) (cons if (cons (shen.semantics (hd (tl V4186))) (cons (cons shen.pair (cons (cons hd (cons V4185 ())) (cons (shen.semantics (hd (tl (tl V4186)))) ()))) (cons (cons fail ()) ()))))) ((= () V4184) (cons shen.pair (cons (cons hd (cons V4185 ())) (cons (shen.semantics V4186) ())))) ((cons? V4184) (if (shen.grammar_symbol? (hd V4184)) (shen.recursive_descent V4184 V4185 V4186) (if (variable? (hd V4184)) (shen.variable-match V4184 V4185 V4186) (if (shen.jump_stream? (hd V4184)) (shen.jump_stream V4184 V4185 V4186) (if (shen.terminal? (hd V4184)) (shen.check_stream V4184 V4185 V4186) (if (cons? (hd V4184)) (shen.list-stream (shen.decons (hd V4184)) (tl V4184) V4185 V4186) (simple-error (shen.app (hd V4184) " is not legal syntax
" shen.a)))))))) (true (shen.f_error shen.syntax))))

(defun shen.list-stream (V4191 V4192 V4193 V4194) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V4193 ())) ())) (cons (cons cons? (cons (cons hd (cons (cons hd (cons V4193 ())) ())) ())) ()))) (let Placeholder (gensym shen.place) (let RunOn (shen.syntax V4192 (cons shen.pair (cons (cons tl (cons (cons hd (cons V4193 ())) ())) (cons (cons hd (cons (cons tl (cons V4193 ())) ())) ()))) V4194) (let Action (shen.insert-runon RunOn Placeholder (shen.syntax V4191 (cons shen.pair (cons (cons hd (cons (cons hd (cons V4193 ())) ())) (cons (cons hd (cons (cons tl (cons V4193 ())) ())) ()))) Placeholder)) (cons if (cons Test (cons Action (cons (cons fail ()) ())))))))))

(defun shen.decons (V4196) (cond ((and (cons? V4196) (and (= cons (hd V4196)) (and (cons? (tl V4196)) (and (cons? (tl (tl V4196))) (and (= () (hd (tl (tl V4196)))) (= () (tl (tl (tl V4196))))))))) (cons (hd (tl V4196)) ())) ((and (cons? V4196) (and (= cons (hd V4196)) (and (cons? (tl V4196)) (and (cons? (tl (tl V4196))) (= () (tl (tl (tl V4196)))))))) (cons (hd (tl V4196)) (shen.decons (hd (tl (tl V4196)))))) (true V4196)))

(defun shen.insert-runon (V4211 V4212 V4213) (cond ((and (cons? V4213) (and (= shen.pair (hd V4213)) (and (cons? (tl V4213)) (and (cons? (tl (tl V4213))) (and (= () (tl (tl (tl V4213)))) (= (hd (tl (tl V4213))) V4212)))))) V4211) ((cons? V4213) (map (lambda Z (shen.insert-runon V4211 V4212 Z)) V4213)) (true V4213)))

(defun shen.strip-pathname (V4219) (cond ((not (element? "." V4219)) V4219) ((cons? V4219) (shen.strip-pathname (tl V4219))) (true (shen.f_error shen.strip-pathname))))

(defun shen.recursive_descent (V4223 V4224 V4225) (cond ((cons? V4223) (let Test (cons (hd V4223) (cons V4224 ())) (let Action (shen.syntax (tl V4223) (concat Parse_ (hd V4223)) V4225) (let Else (cons fail ()) (cons let (cons (concat Parse_ (hd V4223)) (cons Test (cons (cons if (cons (cons not (cons (cons = (cons (cons fail ()) (cons (concat Parse_ (hd V4223)) ()))) ())) (cons Action (cons Else ())))) ())))))))) (true (shen.f_error shen.recursive_descent))))

(defun shen.variable-match (V4229 V4230 V4231) (cond ((cons? V4229) (let Test (cons cons? (cons (cons hd (cons V4230 ())) ())) (let Action (cons let (cons (concat Parse_ (hd V4229)) (cons (cons hd (cons (cons hd (cons V4230 ())) ())) (cons (shen.syntax (tl V4229) (cons shen.pair (cons (cons tl (cons (cons hd (cons V4230 ())) ())) (cons (cons shen.hdtl (cons V4230 ())) ()))) V4231) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.variable-match))))

(defun shen.terminal? (V4241) (cond ((cons? V4241) false) ((variable? V4241) false) (true true)))

(defun shen.jump_stream? (V4247) (cond ((= V4247 _) true) (true false)))

(defun shen.check_stream (V4251 V4252 V4253) (cond ((cons? V4251) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V4252 ())) ())) (cons (cons = (cons (hd V4251) (cons (cons hd (cons (cons hd (cons V4252 ())) ())) ()))) ()))) (let Action (shen.syntax (tl V4251) (cons shen.pair (cons (cons tl (cons (cons hd (cons V4252 ())) ())) (cons (cons shen.hdtl (cons V4252 ())) ()))) V4253) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.check_stream))))

(defun shen.jump_stream (V4257 V4258 V4259) (cond ((cons? V4257) (let Test (cons cons? (cons (cons hd (cons V4258 ())) ())) (let Action (shen.syntax (tl V4257) (cons shen.pair (cons (cons tl (cons (cons hd (cons V4258 ())) ())) (cons (cons shen.hdtl (cons V4258 ())) ()))) V4259) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.jump_stream))))

(defun shen.semantics (V4261) (cond ((= () V4261) ()) ((shen.grammar_symbol? V4261) (cons shen.hdtl (cons (concat Parse_ V4261) ()))) ((variable? V4261) (concat Parse_ V4261)) ((cons? V4261) (map (lambda Z (shen.semantics Z)) V4261)) (true V4261)))

(defun shen.snd-or-fail (V4269) (cond ((and (cons? V4269) (and (cons? (tl V4269)) (= () (tl (tl V4269))))) (hd (tl V4269))) (true (fail))))

(defun fail () shen.fail!)(defun shen.pair (V4272 V4273) (cons V4272 (cons V4273 ())))

(defun shen.hdtl (V4275) (hd (tl V4275)))

(defun <!> (V4283) (cond ((and (cons? V4283) (and (cons? (tl V4283)) (= () (tl (tl V4283))))) (cons () (cons (hd V4283) ()))) (true (fail))))

(defun <e> (V4289) (cond ((and (cons? V4289) (and (cons? (tl V4289)) (= () (tl (tl V4289))))) (cons (hd V4289) (cons () ()))) (true (shen.f_error <e>))))



