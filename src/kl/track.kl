"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.f_error (V3782) (do (shen.prhush (cn "partial function " (shen.app V3782 ";
" shen.a)) (stoutput)) (do (if (and (not (shen.tracked? V3782)) (y-or-n? (cn "track " (shen.app V3782 "? " shen.a)))) (shen.track-function (ps V3782)) shen.ok) (simple-error "aborted"))))

(defun shen.tracked? (V3784) (element? V3784 (value shen.*tracking*)))

(defun track (V3786) (let Source (ps V3786) (shen.track-function Source)))

(defun shen.track-function (V3788) (cond ((and (cons? V3788) (and (= defun (hd V3788)) (and (cons? (tl V3788)) (and (cons? (tl (tl V3788))) (and (cons? (tl (tl (tl V3788)))) (= () (tl (tl (tl (tl V3788)))))))))) (let KL (cons defun (cons (hd (tl V3788)) (cons (hd (tl (tl V3788))) (cons (shen.insert-tracking-code (hd (tl V3788)) (hd (tl (tl V3788))) (hd (tl (tl (tl V3788))))) ())))) (let Ob (eval-kl KL) (let Tr (set shen.*tracking* (cons Ob (value shen.*tracking*))) Ob)))) (true (shen.f_error shen.track-function))))

(defun shen.insert-tracking-code (V3792 V3793 V3794) (cons do (cons (cons set (cons shen.*call* (cons (cons + (cons (cons value (cons shen.*call* ())) (cons 1 ()))) ()))) (cons (cons do (cons (cons shen.input-track (cons (cons value (cons shen.*call* ())) (cons V3792 (cons (shen.cons_form V3793) ())))) (cons (cons do (cons (cons shen.terpri-or-read-char ()) (cons (cons let (cons Result (cons V3794 (cons (cons do (cons (cons shen.output-track (cons (cons value (cons shen.*call* ())) (cons V3792 (cons Result ())))) (cons (cons do (cons (cons set (cons shen.*call* (cons (cons - (cons (cons value (cons shen.*call* ())) (cons 1 ()))) ()))) (cons (cons do (cons (cons shen.terpri-or-read-char ()) (cons Result ()))) ()))) ()))) ())))) ()))) ()))) ()))))

(set shen.*step* false)

(defun step (V3800) (cond ((= + V3800) (set shen.*step* true)) ((= - V3800) (set shen.*step* false)) (true (simple-error "step expects a + or a -.
"))))

(defun spy (V3806) (cond ((= + V3806) (set shen.*spy* true)) ((= - V3806) (set shen.*spy* false)) (true (simple-error "spy expects a + or a -.
"))))

(defun shen.terpri-or-read-char () (if (value shen.*step*) (shen.check-byte (read-byte (value *stinput*))) (nl 1)))

(defun shen.check-byte (V3812) (cond ((= V3812 (shen.hat)) (simple-error "aborted")) (true true)))

(defun shen.input-track (V3816 V3817 V3818) (do (shen.prhush (cn "
" (shen.app (shen.spaces V3816) (cn "<" (shen.app V3816 (cn "> Inputs to " (shen.app V3817 (cn " 
" (shen.app (shen.spaces V3816) "" shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)) (shen.recursively-print V3818)))

(defun shen.recursively-print (V3820) (cond ((= () V3820) (shen.prhush " ==>" (stoutput))) ((cons? V3820) (do (print (hd V3820)) (do (shen.prhush ", " (stoutput)) (shen.recursively-print (tl V3820))))) (true (shen.f_error shen.recursively-print))))

(defun shen.spaces (V3822) (cond ((= 0 V3822) "") (true (cn " " (shen.spaces (- V3822 1))))))

(defun shen.output-track (V3826 V3827 V3828) (shen.prhush (cn "
" (shen.app (shen.spaces V3826) (cn "<" (shen.app V3826 (cn "> Output from " (shen.app V3827 (cn " 
" (shen.app (shen.spaces V3826) (cn "==> " (shen.app V3828 "" shen.s)) shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)))

(defun untrack (V3830) (let Tracking (value shen.*tracking*) (let Tracking (set shen.*tracking* (remove V3830 Tracking)) (eval (ps V3830)))))

(defun profile (V3832) (shen.profile-help (ps V3832)))

(defun shen.profile-help (V3838) (cond ((and (cons? V3838) (and (= defun (hd V3838)) (and (cons? (tl V3838)) (and (cons? (tl (tl V3838))) (and (cons? (tl (tl (tl V3838)))) (= () (tl (tl (tl (tl V3838)))))))))) (let G (gensym shen.f) (let Profile (cons defun (cons (hd (tl V3838)) (cons (hd (tl (tl V3838))) (cons (shen.profile-func (hd (tl V3838)) (hd (tl (tl V3838))) (cons G (hd (tl (tl V3838))))) ())))) (let Def (cons defun (cons G (cons (hd (tl (tl V3838))) (cons (subst G (hd (tl V3838)) (hd (tl (tl (tl V3838))))) ())))) (let CompileProfile (shen.eval-without-macros Profile) (let CompileG (shen.eval-without-macros Def) (hd (tl V3838)))))))) (true (simple-error "Cannot profile.
"))))

(defun unprofile (V3840) (untrack V3840))

(defun shen.profile-func (V3844 V3845 V3846) (cons let (cons Start (cons (cons get-time (cons run ())) (cons (cons let (cons Result (cons V3846 (cons (cons let (cons Finish (cons (cons - (cons (cons get-time (cons run ())) (cons Start ()))) (cons (cons let (cons Record (cons (cons shen.put-profile (cons V3844 (cons (cons + (cons (cons shen.get-profile (cons V3844 ())) (cons Finish ()))) ()))) (cons Result ())))) ())))) ())))) ())))))

(defun profile-results (V3848) (let Results (shen.get-profile V3848) (let Initialise (shen.put-profile V3848 0) (@p V3848 Results))))

(defun shen.get-profile (V3850) (trap-error (get V3850 profile (value *property-vector*)) (lambda E 0)))

(defun shen.put-profile (V3853 V3854) (put V3853 profile V3854 (value *property-vector*)))



