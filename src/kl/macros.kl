"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun macroexpand (V1530) (let Y (shen.compose (value *macros*) V1530) (if (= V1530 Y) V1530 (shen.walk (lambda Z (macroexpand Z)) Y))))

(defun shen.error-macro (V1532) (cond ((and (cons? V1532) (and (= error (hd V1532)) (cons? (tl V1532)))) (cons simple-error (cons (shen.mkstr (hd (tl V1532)) (tl (tl V1532))) ()))) (true V1532)))

(defun shen.output-macro (V1534) (cond ((and (cons? V1534) (and (= output (hd V1534)) (cons? (tl V1534)))) (cons shen.prhush (cons (shen.mkstr (hd (tl V1534)) (tl (tl V1534))) (cons (cons stoutput ()) ())))) ((and (cons? V1534) (and (= pr (hd V1534)) (and (cons? (tl V1534)) (= () (tl (tl V1534)))))) (cons pr (cons (hd (tl V1534)) (cons (cons stoutput ()) ())))) (true V1534)))

(defun shen.make-string-macro (V1536) (cond ((and (cons? V1536) (and (= make-string (hd V1536)) (cons? (tl V1536)))) (shen.mkstr (hd (tl V1536)) (tl (tl V1536)))) (true V1536)))

(defun shen.input-macro (V1538) (cond ((and (cons? V1538) (and (= lineread (hd V1538)) (= () (tl V1538)))) (cons lineread (cons (cons stinput ()) ()))) ((and (cons? V1538) (and (= input (hd V1538)) (= () (tl V1538)))) (cons input (cons (cons stinput ()) ()))) ((and (cons? V1538) (and (= read (hd V1538)) (= () (tl V1538)))) (cons read (cons (cons stinput ()) ()))) ((and (cons? V1538) (and (= input+ (hd V1538)) (and (cons? (tl V1538)) (= () (tl (tl V1538)))))) (cons input+ (cons (hd (tl V1538)) (cons (cons stinput ()) ())))) ((and (cons? V1538) (and (= read-byte (hd V1538)) (= () (tl V1538)))) (cons read-byte (cons (cons stinput ()) ()))) (true V1538)))

(defun shen.compose (V1541 V1542) (cond ((= () V1541) V1542) ((cons? V1541) (shen.compose (tl V1541) ((hd V1541) V1542))) (true (shen.f_error shen.compose))))

(defun shen.compile-macro (V1544) (cond ((and (cons? V1544) (and (= compile (hd V1544)) (and (cons? (tl V1544)) (and (cons? (tl (tl V1544))) (= () (tl (tl (tl V1544)))))))) (cons compile (cons (hd (tl V1544)) (cons (hd (tl (tl V1544))) (cons (cons lambda (cons E (cons (cons if (cons (cons cons? (cons E ())) (cons (cons error (cons "parse error here: ~S~%" (cons E ()))) (cons (cons error (cons "parse error~%" ())) ())))) ()))) ()))))) (true V1544)))

(defun shen.prolog-macro (V1546) (cond ((and (cons? V1546) (= prolog? (hd V1546))) (let F (gensym shen.f) (let Receive (shen.receive-terms (tl V1546)) (let PrologDef (eval (append (cons defprolog (cons F ())) (append Receive (append (cons <-- ()) (append (shen.pass-literals (tl V1546)) (cons ; ())))))) (let Query (cons F (append Receive (cons (cons shen.start-new-prolog-process ()) (cons (cons freeze (cons true ())) ())))) Query))))) (true V1546)))

(defun shen.receive-terms (V1552) (cond ((= () V1552) ()) ((and (cons? V1552) (and (cons? (hd V1552)) (and (= receive (hd (hd V1552))) (and (cons? (tl (hd V1552))) (= () (tl (tl (hd V1552)))))))) (cons (hd (tl (hd V1552))) (shen.receive-terms (tl V1552)))) ((cons? V1552) (shen.receive-terms (tl V1552))) (true (shen.f_error shen.receive-terms))))

(defun shen.pass-literals (V1556) (cond ((= () V1556) ()) ((and (cons? V1556) (and (cons? (hd V1556)) (and (= receive (hd (hd V1556))) (and (cons? (tl (hd V1556))) (= () (tl (tl (hd V1556)))))))) (shen.pass-literals (tl V1556))) ((cons? V1556) (cons (hd V1556) (shen.pass-literals (tl V1556)))) (true (shen.f_error shen.pass-literals))))

(defun shen.defprolog-macro (V1558) (cond ((and (cons? V1558) (and (= defprolog (hd V1558)) (cons? (tl V1558)))) (compile (lambda Y (shen.<defprolog> Y)) (tl V1558) (lambda Y (shen.prolog-error (hd (tl V1558)) Y)))) (true V1558)))

(defun shen.datatype-macro (V1560) (cond ((and (cons? V1560) (and (= datatype (hd V1560)) (cons? (tl V1560)))) (cons shen.process-datatype (cons (shen.intern-type (hd (tl V1560))) (cons (cons compile (cons (cons lambda (cons X (cons (cons shen.<datatype-rules> (cons X ())) ()))) (cons (shen.rcons_form (tl (tl V1560))) (cons (cons function (cons shen.datatype-error ())) ())))) ())))) (true V1560)))

(defun shen.intern-type (V1562) (intern (cn "type#" (str V1562))))

(defun shen.@s-macro (V1564) (cond ((and (cons? V1564) (and (= @s (hd V1564)) (and (cons? (tl V1564)) (and (cons? (tl (tl V1564))) (cons? (tl (tl (tl V1564)))))))) (cons @s (cons (hd (tl V1564)) (cons (shen.@s-macro (cons @s (tl (tl V1564)))) ())))) ((and (cons? V1564) (and (= @s (hd V1564)) (and (cons? (tl V1564)) (and (cons? (tl (tl V1564))) (and (= () (tl (tl (tl V1564)))) (string? (hd (tl V1564)))))))) (let E (explode (hd (tl V1564))) (if (> (length E) 1) (shen.@s-macro (cons @s (append E (tl (tl V1564))))) V1564))) (true V1564)))

(defun shen.synonyms-macro (V1566) (cond ((and (cons? V1566) (= synonyms (hd V1566))) (cons shen.synonyms-help (cons (shen.rcons_form (shen.curry-synonyms (tl V1566))) ()))) (true V1566)))

(defun shen.curry-synonyms (V1568) (map (lambda X (shen.curry-type X)) V1568))

(defun shen.nl-macro (V1570) (cond ((and (cons? V1570) (and (= nl (hd V1570)) (= () (tl V1570)))) (cons nl (cons 1 ()))) (true V1570)))

(defun shen.assoc-macro (V1572) (cond ((and (cons? V1572) (and (cons? (tl V1572)) (and (cons? (tl (tl V1572))) (and (cons? (tl (tl (tl V1572)))) (element? (hd V1572) (cons @p (cons @v (cons append (cons and (cons or (cons + (cons * (cons do ()))))))))))))) (cons (hd V1572) (cons (hd (tl V1572)) (cons (shen.assoc-macro (cons (hd V1572) (tl (tl V1572)))) ())))) (true V1572)))

(defun shen.let-macro (V1574) (cond ((and (cons? V1574) (and (= let (hd V1574)) (and (cons? (tl V1574)) (and (cons? (tl (tl V1574))) (and (cons? (tl (tl (tl V1574)))) (cons? (tl (tl (tl (tl V1574)))))))))) (cons let (cons (hd (tl V1574)) (cons (hd (tl (tl V1574))) (cons (shen.let-macro (cons let (tl (tl (tl V1574))))) ()))))) (true V1574)))

(defun shen.abs-macro (V1576) (cond ((and (cons? V1576) (and (= /. (hd V1576)) (and (cons? (tl V1576)) (and (cons? (tl (tl V1576))) (cons? (tl (tl (tl V1576)))))))) (cons lambda (cons (hd (tl V1576)) (cons (shen.abs-macro (cons /. (tl (tl V1576)))) ())))) ((and (cons? V1576) (and (= /. (hd V1576)) (and (cons? (tl V1576)) (and (cons? (tl (tl V1576))) (= () (tl (tl (tl V1576)))))))) (cons lambda (tl V1576))) (true V1576)))

(defun shen.cases-macro (V1580) (cond ((and (cons? V1580) (and (= cases (hd V1580)) (and (cons? (tl V1580)) (and (= true (hd (tl V1580))) (cons? (tl (tl V1580))))))) (hd (tl (tl V1580)))) ((and (cons? V1580) (and (= cases (hd V1580)) (and (cons? (tl V1580)) (and (cons? (tl (tl V1580))) (= () (tl (tl (tl V1580)))))))) (cons if (cons (hd (tl V1580)) (cons (hd (tl (tl V1580))) (cons (cons simple-error (cons "error: cases exhausted" ())) ()))))) ((and (cons? V1580) (and (= cases (hd V1580)) (and (cons? (tl V1580)) (cons? (tl (tl V1580)))))) (cons if (cons (hd (tl V1580)) (cons (hd (tl (tl V1580))) (cons (shen.cases-macro (cons cases (tl (tl (tl V1580))))) ()))))) ((and (cons? V1580) (and (= cases (hd V1580)) (and (cons? (tl V1580)) (= () (tl (tl V1580)))))) (simple-error "error: odd number of case elements
")) (true V1580)))

(defun shen.timer-macro (V1582) (cond ((and (cons? V1582) (and (= time (hd V1582)) (and (cons? (tl V1582)) (= () (tl (tl V1582)))))) (shen.let-macro (cons let (cons Start (cons (cons get-time (cons run ())) (cons Result (cons (hd (tl V1582)) (cons Finish (cons (cons get-time (cons run ())) (cons Time (cons (cons - (cons Finish (cons Start ()))) (cons Message (cons (cons shen.prhush (cons (cons cn (cons "
run time: " (cons (cons cn (cons (cons str (cons Time ())) (cons " secs
" ()))) ()))) (cons (cons stoutput ()) ()))) (cons Result ())))))))))))))) (true V1582)))

(defun shen.tuple-up (V1584) (cond ((cons? V1584) (cons @p (cons (hd V1584) (cons (shen.tuple-up (tl V1584)) ())))) (true V1584)))

(defun shen.put/get-macro (V1586) (cond ((and (cons? V1586) (and (= put (hd V1586)) (and (cons? (tl V1586)) (and (cons? (tl (tl V1586))) (and (cons? (tl (tl (tl V1586)))) (= () (tl (tl (tl (tl V1586)))))))))) (cons put (cons (hd (tl V1586)) (cons (hd (tl (tl V1586))) (cons (hd (tl (tl (tl V1586)))) (cons (cons value (cons *property-vector* ())) ())))))) ((and (cons? V1586) (and (= get (hd V1586)) (and (cons? (tl V1586)) (and (cons? (tl (tl V1586))) (= () (tl (tl (tl V1586)))))))) (cons get (cons (hd (tl V1586)) (cons (hd (tl (tl V1586))) (cons (cons value (cons *property-vector* ())) ()))))) ((and (cons? V1586) (and (= unput (hd V1586)) (and (cons? (tl V1586)) (and (cons? (tl (tl V1586))) (= () (tl (tl (tl V1586)))))))) (cons unput (cons (hd (tl V1586)) (cons (hd (tl (tl V1586))) (cons (cons value (cons *property-vector* ())) ()))))) (true V1586)))

(defun shen.function-macro (V1588) (cond ((and (cons? V1588) (and (= function (hd V1588)) (and (cons? (tl V1588)) (= () (tl (tl V1588)))))) (shen.function-abstraction (hd (tl V1588)) (arity (hd (tl V1588))))) (true V1588)))

(defun shen.function-abstraction (V1591 V1592) (cond ((= 0 V1592) (simple-error (shen.app V1591 " has no lambda form
" shen.a))) ((= -1 V1592) (cons function (cons V1591 ()))) (true (shen.function-abstraction-help V1591 V1592 ()))))

(defun shen.function-abstraction-help (V1596 V1597 V1598) (cond ((= 0 V1597) (cons V1596 V1598)) (true (let X (gensym V) (cons /. (cons X (cons (shen.function-abstraction-help V1596 (- V1597 1) (append V1598 (cons X ()))) ())))))))

(defun undefmacro (V1600) (let MacroReg (value shen.*macroreg*) (let Pos (shen.findpos V1600 MacroReg) (let Remove1 (set shen.*macroreg* (remove V1600 MacroReg)) (let Remove2 (set *macros* (shen.remove-nth Pos (value *macros*))) V1600)))))

(defun shen.findpos (V1610 V1611) (cond ((= () V1611) (simple-error (shen.app V1610 " is not a macro
" shen.a))) ((and (cons? V1611) (= (hd V1611) V1610)) 1) ((cons? V1611) (+ 1 (shen.findpos V1610 (tl V1611)))) (true (shen.f_error shen.findpos))))

(defun shen.remove-nth (V1616 V1617) (cond ((and (= 1 V1616) (cons? V1617)) (tl V1617)) ((cons? V1617) (cons (hd V1617) (shen.remove-nth (- V1616 1) (tl V1617)))) (true (shen.f_error shen.remove-nth))))



