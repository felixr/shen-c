"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.datatype-error (V2434) (cond ((and (cons? V2434) (and (cons? (tl V2434)) (= () (tl (tl V2434))))) (simple-error (cn "datatype syntax error here:

 " (shen.app (shen.next-50 50 (hd V2434)) "
" shen.a)))) (true (shen.f_error shen.datatype-error))))

(defun shen.<datatype-rules> (V2436) (let YaccParse (let Parse_shen.<datatype-rule> (shen.<datatype-rule> V2436) (if (not (= (fail) Parse_shen.<datatype-rule>)) (let Parse_shen.<datatype-rules> (shen.<datatype-rules> Parse_shen.<datatype-rule>) (if (not (= (fail) Parse_shen.<datatype-rules>)) (shen.pair (hd Parse_shen.<datatype-rules>) (cons (shen.hdtl Parse_shen.<datatype-rule>) (shen.hdtl Parse_shen.<datatype-rules>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2436) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<datatype-rule> (V2438) (let YaccParse (let Parse_shen.<side-conditions> (shen.<side-conditions> V2438) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<singleunderline> (shen.<singleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<singleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<singleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.single (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<side-conditions> (shen.<side-conditions> V2438) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<doubleunderline> (shen.<doubleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<doubleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<doubleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.double (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) YaccParse)))

(defun shen.<side-conditions> (V2440) (let YaccParse (let Parse_shen.<side-condition> (shen.<side-condition> V2440) (if (not (= (fail) Parse_shen.<side-condition>)) (let Parse_shen.<side-conditions> (shen.<side-conditions> Parse_shen.<side-condition>) (if (not (= (fail) Parse_shen.<side-conditions>)) (shen.pair (hd Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<side-condition>) (shen.hdtl Parse_shen.<side-conditions>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2440) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<side-condition> (V2442) (let YaccParse (if (and (cons? (hd V2442)) (= if (hd (hd V2442)))) (let Parse_shen.<expr> (shen.<expr> (shen.pair (tl (hd V2442)) (shen.hdtl V2442))) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons if (cons (shen.hdtl Parse_shen.<expr>) ()))) (fail))) (fail)) (if (= YaccParse (fail)) (if (and (cons? (hd V2442)) (= let (hd (hd V2442)))) (let Parse_shen.<variable?> (shen.<variable?> (shen.pair (tl (hd V2442)) (shen.hdtl V2442))) (if (not (= (fail) Parse_shen.<variable?>)) (let Parse_shen.<expr> (shen.<expr> Parse_shen.<variable?>) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons let (cons (shen.hdtl Parse_shen.<variable?>) (cons (shen.hdtl Parse_shen.<expr>) ())))) (fail))) (fail))) (fail)) YaccParse)))

(defun shen.<variable?> (V2444) (if (cons? (hd V2444)) (let Parse_X (hd (hd V2444)) (if (variable? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2444)) (shen.hdtl V2444))) Parse_X) (fail))) (fail)))

(defun shen.<expr> (V2446) (if (cons? (hd V2446)) (let Parse_X (hd (hd V2446)) (if (not (or (element? Parse_X (cons >> (cons ; ()))) (or (shen.singleunderline? Parse_X) (shen.doubleunderline? Parse_X)))) (shen.pair (hd (shen.pair (tl (hd V2446)) (shen.hdtl V2446))) (shen.remove-bar Parse_X)) (fail))) (fail)))

(defun shen.remove-bar (V2448) (cond ((and (cons? V2448) (and (cons? (tl V2448)) (and (cons? (tl (tl V2448))) (and (= () (tl (tl (tl V2448)))) (= (hd (tl V2448)) bar!))))) (cons (hd V2448) (hd (tl (tl V2448))))) ((cons? V2448) (cons (shen.remove-bar (hd V2448)) (shen.remove-bar (tl V2448)))) (true V2448)))

(defun shen.<premises> (V2450) (let YaccParse (let Parse_shen.<premise> (shen.<premise> V2450) (if (not (= (fail) Parse_shen.<premise>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<premise>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<semicolon-symbol>) (if (not (= (fail) Parse_shen.<premises>)) (shen.pair (hd Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<premise>) (shen.hdtl Parse_shen.<premises>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2450) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<semicolon-symbol> (V2452) (if (cons? (hd V2452)) (let Parse_X (hd (hd V2452)) (if (= Parse_X ;) (shen.pair (hd (shen.pair (tl (hd V2452)) (shen.hdtl V2452))) shen.skip) (fail))) (fail)))

(defun shen.<premise> (V2454) (let YaccParse (if (and (cons? (hd V2454)) (= ! (hd (hd V2454)))) (shen.pair (hd (shen.pair (tl (hd V2454)) (shen.hdtl V2454))) !) (fail)) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2454) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2454) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) YaccParse)) YaccParse)))

(defun shen.<conclusion> (V2456) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2456) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2456) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) YaccParse)))

(defun shen.sequent (V2459 V2460) (@p V2459 V2460))

(defun shen.<formulae> (V2462) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2462) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<comma-symbol> (shen.<comma-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<comma-symbol>)) (let Parse_shen.<formulae> (shen.<formulae> Parse_shen.<comma-symbol>) (if (not (= (fail) Parse_shen.<formulae>)) (shen.pair (hd Parse_shen.<formulae>) (cons (shen.hdtl Parse_shen.<formula>) (shen.hdtl Parse_shen.<formulae>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2462) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (cons (shen.hdtl Parse_shen.<formula>) ())) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2462) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)))

(defun shen.<comma-symbol> (V2464) (if (cons? (hd V2464)) (let Parse_X (hd (hd V2464)) (if (= Parse_X (intern ",")) (shen.pair (hd (shen.pair (tl (hd V2464)) (shen.hdtl V2464))) shen.skip) (fail))) (fail)))

(defun shen.<formula> (V2466) (let YaccParse (let Parse_shen.<expr> (shen.<expr> V2466) (if (not (= (fail) Parse_shen.<expr>)) (if (and (cons? (hd Parse_shen.<expr>)) (= : (hd (hd Parse_shen.<expr>)))) (let Parse_shen.<type> (shen.<type> (shen.pair (tl (hd Parse_shen.<expr>)) (shen.hdtl Parse_shen.<expr>))) (if (not (= (fail) Parse_shen.<type>)) (shen.pair (hd Parse_shen.<type>) (cons (shen.curry (shen.hdtl Parse_shen.<expr>)) (cons : (cons (shen.demodulate (shen.hdtl Parse_shen.<type>)) ())))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<expr> (shen.<expr> V2466) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.hdtl Parse_shen.<expr>)) (fail))) YaccParse)))

(defun shen.<type> (V2468) (let Parse_shen.<expr> (shen.<expr> V2468) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.curry-type (shen.hdtl Parse_shen.<expr>))) (fail))))

(defun shen.<doubleunderline> (V2470) (if (cons? (hd V2470)) (let Parse_X (hd (hd V2470)) (if (shen.doubleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2470)) (shen.hdtl V2470))) Parse_X) (fail))) (fail)))

(defun shen.<singleunderline> (V2472) (if (cons? (hd V2472)) (let Parse_X (hd (hd V2472)) (if (shen.singleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2472)) (shen.hdtl V2472))) Parse_X) (fail))) (fail)))

(defun shen.singleunderline? (V2474) (and (symbol? V2474) (shen.sh? (str V2474))))

(defun shen.sh? (V2476) (cond ((= "_" V2476) true) (true (and (= (pos V2476 0) "_") (shen.sh? (tlstr V2476))))))

(defun shen.doubleunderline? (V2478) (and (symbol? V2478) (shen.dh? (str V2478))))

(defun shen.dh? (V2480) (cond ((= "=" V2480) true) (true (and (= (pos V2480 0) "=") (shen.dh? (tlstr V2480))))))

(defun shen.process-datatype (V2483 V2484) (shen.remember-datatype (shen.s-prolog (shen.rules->horn-clauses V2483 V2484))))

(defun shen.remember-datatype (V2490) (cond ((cons? V2490) (do (set shen.*datatypes* (adjoin (hd V2490) (value shen.*datatypes*))) (do (set shen.*alldatatypes* (adjoin (hd V2490) (value shen.*alldatatypes*))) (hd V2490)))) (true (shen.f_error shen.remember-datatype))))

(defun shen.rules->horn-clauses (V2495 V2496) (cond ((= () V2496) ()) ((and (cons? V2496) (and (tuple? (hd V2496)) (= shen.single (fst (hd V2496))))) (cons (shen.rule->horn-clause V2495 (snd (hd V2496))) (shen.rules->horn-clauses V2495 (tl V2496)))) ((and (cons? V2496) (and (tuple? (hd V2496)) (= shen.double (fst (hd V2496))))) (shen.rules->horn-clauses V2495 (append (shen.double->singles (snd (hd V2496))) (tl V2496)))) (true (shen.f_error shen.rules->horn-clauses))))

(defun shen.double->singles (V2498) (cons (shen.right-rule V2498) (cons (shen.left-rule V2498) ())))

(defun shen.right-rule (V2500) (@p shen.single V2500))

(defun shen.left-rule (V2502) (cond ((and (cons? V2502) (and (cons? (tl V2502)) (and (cons? (tl (tl V2502))) (and (tuple? (hd (tl (tl V2502)))) (and (= () (fst (hd (tl (tl V2502))))) (= () (tl (tl (tl V2502))))))))) (let Q (gensym Qv) (let NewConclusion (@p (cons (snd (hd (tl (tl V2502)))) ()) Q) (let NewPremises (cons (@p (map (lambda X (shen.right->left X)) (hd (tl V2502))) Q) ()) (@p shen.single (cons (hd V2502) (cons NewPremises (cons NewConclusion ())))))))) (true (shen.f_error shen.left-rule))))

(defun shen.right->left (V2508) (cond ((and (tuple? V2508) (= () (fst V2508))) (snd V2508)) (true (simple-error "syntax error with ==========
"))))

(defun shen.rule->horn-clause (V2511 V2512) (cond ((and (cons? V2512) (and (cons? (tl V2512)) (and (cons? (tl (tl V2512))) (and (tuple? (hd (tl (tl V2512)))) (= () (tl (tl (tl V2512)))))))) (cons (shen.rule->horn-clause-head V2511 (snd (hd (tl (tl V2512))))) (cons :- (cons (shen.rule->horn-clause-body (hd V2512) (hd (tl V2512)) (fst (hd (tl (tl V2512))))) ())))) (true (shen.f_error shen.rule->horn-clause))))

(defun shen.rule->horn-clause-head (V2515 V2516) (cons V2515 (cons (shen.mode-ify V2516) (cons Context_1957 ()))))

(defun shen.mode-ify (V2518) (cond ((and (cons? V2518) (and (cons? (tl V2518)) (and (= : (hd (tl V2518))) (and (cons? (tl (tl V2518))) (= () (tl (tl (tl V2518)))))))) (cons mode (cons (cons (hd V2518) (cons : (cons (cons mode (cons (hd (tl (tl V2518))) (cons + ()))) ()))) (cons - ())))) (true V2518)))

(defun shen.rule->horn-clause-body (V2522 V2523 V2524) (let Variables (map (lambda X (shen.extract_vars X)) V2524) (let Predicates (map (lambda X (gensym shen.cl)) V2524) (let SearchLiterals (shen.construct-search-literals Predicates Variables Context_1957 Context1_1957) (let SearchClauses (shen.construct-search-clauses Predicates V2524 Variables) (let SideLiterals (shen.construct-side-literals V2522) (let PremissLiterals (map (lambda X (shen.construct-premiss-literal X (empty? V2524))) V2523) (append SearchLiterals (append SideLiterals PremissLiterals)))))))))

(defun shen.construct-search-literals (V2533 V2534 V2535 V2536) (cond ((and (= () V2533) (= () V2534)) ()) (true (shen.csl-help V2533 V2534 V2535 V2536))))

(defun shen.csl-help (V2543 V2544 V2545 V2546) (cond ((and (= () V2543) (= () V2544)) (cons (cons bind (cons ContextOut_1957 (cons V2545 ()))) ())) ((and (cons? V2543) (cons? V2544)) (cons (cons (hd V2543) (cons V2545 (cons V2546 (hd V2544)))) (shen.csl-help (tl V2543) (tl V2544) V2546 (gensym Context)))) (true (shen.f_error shen.csl-help))))

(defun shen.construct-search-clauses (V2550 V2551 V2552) (cond ((and (= () V2550) (and (= () V2551) (= () V2552))) shen.skip) ((and (cons? V2550) (and (cons? V2551) (cons? V2552))) (do (shen.construct-search-clause (hd V2550) (hd V2551) (hd V2552)) (shen.construct-search-clauses (tl V2550) (tl V2551) (tl V2552)))) (true (shen.f_error shen.construct-search-clauses))))

(defun shen.construct-search-clause (V2556 V2557 V2558) (shen.s-prolog (cons (shen.construct-base-search-clause V2556 V2557 V2558) (cons (shen.construct-recursive-search-clause V2556 V2557 V2558) ()))))

(defun shen.construct-base-search-clause (V2562 V2563 V2564) (cons (cons V2562 (cons (cons (shen.mode-ify V2563) In_1957) (cons In_1957 V2564))) (cons :- (cons () ()))))

(defun shen.construct-recursive-search-clause (V2568 V2569 V2570) (cons (cons V2568 (cons (cons Assumption_1957 Assumptions_1957) (cons (cons Assumption_1957 Out_1957) V2570))) (cons :- (cons (cons (cons V2568 (cons Assumptions_1957 (cons Out_1957 V2570))) ()) ()))))

(defun shen.construct-side-literals (V2576) (cond ((= () V2576) ()) ((and (cons? V2576) (and (cons? (hd V2576)) (and (= if (hd (hd V2576))) (and (cons? (tl (hd V2576))) (= () (tl (tl (hd V2576)))))))) (cons (cons when (tl (hd V2576))) (shen.construct-side-literals (tl V2576)))) ((and (cons? V2576) (and (cons? (hd V2576)) (and (= let (hd (hd V2576))) (and (cons? (tl (hd V2576))) (and (cons? (tl (tl (hd V2576)))) (= () (tl (tl (tl (hd V2576)))))))))) (cons (cons is (tl (hd V2576))) (shen.construct-side-literals (tl V2576)))) ((cons? V2576) (shen.construct-side-literals (tl V2576))) (true (shen.f_error shen.construct-side-literals))))

(defun shen.construct-premiss-literal (V2583 V2584) (cond ((tuple? V2583) (cons shen.t* (cons (shen.recursive_cons_form (snd V2583)) (cons (shen.construct-context V2584 (fst V2583)) ())))) ((= ! V2583) (cons cut (cons Throwcontrol ()))) (true (shen.f_error shen.construct-premiss-literal))))

(defun shen.construct-context (V2587 V2588) (cond ((and (= true V2587) (= () V2588)) Context_1957) ((and (= false V2587) (= () V2588)) ContextOut_1957) ((cons? V2588) (cons cons (cons (shen.recursive_cons_form (hd V2588)) (cons (shen.construct-context V2587 (tl V2588)) ())))) (true (shen.f_error shen.construct-context))))

(defun shen.recursive_cons_form (V2590) (cond ((cons? V2590) (cons cons (cons (shen.recursive_cons_form (hd V2590)) (cons (shen.recursive_cons_form (tl V2590)) ())))) (true V2590)))

(defun preclude (V2592) (shen.preclude-h (map (lambda X (shen.intern-type X)) V2592)))

(defun shen.preclude-h (V2594) (let FilterDatatypes (set shen.*datatypes* (difference (value shen.*datatypes*) V2594)) (value shen.*datatypes*)))

(defun include (V2596) (shen.include-h (map (lambda X (shen.intern-type X)) V2596)))

(defun shen.include-h (V2598) (let ValidTypes (intersection V2598 (value shen.*alldatatypes*)) (let NewDatatypes (set shen.*datatypes* (union ValidTypes (value shen.*datatypes*))) (value shen.*datatypes*))))

(defun preclude-all-but (V2600) (shen.preclude-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V2600))))

(defun include-all-but (V2602) (shen.include-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V2602))))

(defun shen.synonyms-help (V2608) (cond ((= () V2608) (shen.update-demodulation-function (value shen.*tc*) (mapcan (lambda X (shen.demod-rule X)) (value shen.*synonyms*)))) ((and (cons? V2608) (cons? (tl V2608))) (let Vs (difference (shen.extract_vars (hd (tl V2608))) (shen.extract_vars (hd V2608))) (if (empty? Vs) (do (shen.pushnew (cons (hd V2608) (cons (hd (tl V2608)) ())) shen.*synonyms*) (shen.synonyms-help (tl (tl V2608)))) (shen.free_variable_warnings (hd (tl V2608)) Vs)))) (true (simple-error "odd number of synonyms
"))))

(defun shen.pushnew (V2611 V2612) (if (element? V2611 (value V2612)) (value V2612) (set V2612 (cons V2611 (value V2612)))))

(defun shen.demod-rule (V2614) (cond ((and (cons? V2614) (and (cons? (tl V2614)) (= () (tl (tl V2614))))) (cons (shen.rcons_form (hd V2614)) (cons -> (cons (shen.rcons_form (hd (tl V2614))) ())))) (true (shen.f_error shen.demod-rule))))

(defun shen.lambda-of-defun (V2620) (cond ((and (cons? V2620) (and (= defun (hd V2620)) (and (cons? (tl V2620)) (and (cons? (tl (tl V2620))) (and (cons? (hd (tl (tl V2620)))) (and (= () (tl (hd (tl (tl V2620))))) (and (cons? (tl (tl (tl V2620)))) (= () (tl (tl (tl (tl V2620)))))))))))) (eval (cons /. (cons (hd (hd (tl (tl V2620)))) (tl (tl (tl V2620))))))) (true (shen.f_error shen.lambda-of-defun))))

(defun shen.update-demodulation-function (V2623 V2624) (do (tc -) (do (set shen.*demodulation-function* (shen.lambda-of-defun (shen.elim-def (cons define (cons shen.demod (append V2624 (shen.default-rule))))))) (do (if V2623 (tc +) shen.skip) synonyms))))

(defun shen.default-rule () (cons X (cons -> (cons X ()))))



