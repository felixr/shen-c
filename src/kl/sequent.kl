"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.datatype-error (V2613) (cond ((and (cons? V2613) (and (cons? (tl V2613)) (= () (tl (tl V2613))))) (simple-error (cn "datatype syntax error here:

 " (shen.app (shen.next-50 50 (hd V2613)) "
" shen.a)))) (true (shen.f_error shen.datatype-error))))

(defun shen.<datatype-rules> (V2615) (let YaccParse (let Parse_shen.<datatype-rule> (shen.<datatype-rule> V2615) (if (not (= (fail) Parse_shen.<datatype-rule>)) (let Parse_shen.<datatype-rules> (shen.<datatype-rules> Parse_shen.<datatype-rule>) (if (not (= (fail) Parse_shen.<datatype-rules>)) (shen.pair (hd Parse_shen.<datatype-rules>) (cons (shen.hdtl Parse_shen.<datatype-rule>) (shen.hdtl Parse_shen.<datatype-rules>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2615) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<datatype-rule> (V2617) (let YaccParse (let Parse_shen.<side-conditions> (shen.<side-conditions> V2617) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<singleunderline> (shen.<singleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<singleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<singleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.single (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<side-conditions> (shen.<side-conditions> V2617) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<doubleunderline> (shen.<doubleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<doubleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<doubleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.double (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) YaccParse)))

(defun shen.<side-conditions> (V2619) (let YaccParse (let Parse_shen.<side-condition> (shen.<side-condition> V2619) (if (not (= (fail) Parse_shen.<side-condition>)) (let Parse_shen.<side-conditions> (shen.<side-conditions> Parse_shen.<side-condition>) (if (not (= (fail) Parse_shen.<side-conditions>)) (shen.pair (hd Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<side-condition>) (shen.hdtl Parse_shen.<side-conditions>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2619) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<side-condition> (V2621) (let YaccParse (if (and (cons? (hd V2621)) (= if (hd (hd V2621)))) (let Parse_shen.<expr> (shen.<expr> (shen.pair (tl (hd V2621)) (shen.hdtl V2621))) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons if (cons (shen.hdtl Parse_shen.<expr>) ()))) (fail))) (fail)) (if (= YaccParse (fail)) (if (and (cons? (hd V2621)) (= let (hd (hd V2621)))) (let Parse_shen.<variable?> (shen.<variable?> (shen.pair (tl (hd V2621)) (shen.hdtl V2621))) (if (not (= (fail) Parse_shen.<variable?>)) (let Parse_shen.<expr> (shen.<expr> Parse_shen.<variable?>) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons let (cons (shen.hdtl Parse_shen.<variable?>) (cons (shen.hdtl Parse_shen.<expr>) ())))) (fail))) (fail))) (fail)) YaccParse)))

(defun shen.<variable?> (V2623) (if (cons? (hd V2623)) (let Parse_X (hd (hd V2623)) (if (variable? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2623)) (shen.hdtl V2623))) Parse_X) (fail))) (fail)))

(defun shen.<expr> (V2625) (if (cons? (hd V2625)) (let Parse_X (hd (hd V2625)) (if (not (or (element? Parse_X (cons >> (cons ; ()))) (or (shen.singleunderline? Parse_X) (shen.doubleunderline? Parse_X)))) (shen.pair (hd (shen.pair (tl (hd V2625)) (shen.hdtl V2625))) (shen.remove-bar Parse_X)) (fail))) (fail)))

(defun shen.remove-bar (V2627) (cond ((and (cons? V2627) (and (cons? (tl V2627)) (and (cons? (tl (tl V2627))) (and (= () (tl (tl (tl V2627)))) (= (hd (tl V2627)) bar!))))) (cons (hd V2627) (hd (tl (tl V2627))))) ((cons? V2627) (cons (shen.remove-bar (hd V2627)) (shen.remove-bar (tl V2627)))) (true V2627)))

(defun shen.<premises> (V2629) (let YaccParse (let Parse_shen.<premise> (shen.<premise> V2629) (if (not (= (fail) Parse_shen.<premise>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<premise>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<semicolon-symbol>) (if (not (= (fail) Parse_shen.<premises>)) (shen.pair (hd Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<premise>) (shen.hdtl Parse_shen.<premises>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2629) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<semicolon-symbol> (V2631) (if (cons? (hd V2631)) (let Parse_X (hd (hd V2631)) (if (= Parse_X ;) (shen.pair (hd (shen.pair (tl (hd V2631)) (shen.hdtl V2631))) shen.skip) (fail))) (fail)))

(defun shen.<premise> (V2633) (let YaccParse (if (and (cons? (hd V2633)) (= ! (hd (hd V2633)))) (shen.pair (hd (shen.pair (tl (hd V2633)) (shen.hdtl V2633))) !) (fail)) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2633) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2633) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) YaccParse)) YaccParse)))

(defun shen.<conclusion> (V2635) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2635) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2635) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) YaccParse)))

(defun shen.sequent (V2638 V2639) (@p V2638 V2639))

(defun shen.<formulae> (V2641) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2641) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<comma-symbol> (shen.<comma-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<comma-symbol>)) (let Parse_shen.<formulae> (shen.<formulae> Parse_shen.<comma-symbol>) (if (not (= (fail) Parse_shen.<formulae>)) (shen.pair (hd Parse_shen.<formulae>) (cons (shen.hdtl Parse_shen.<formula>) (shen.hdtl Parse_shen.<formulae>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2641) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (cons (shen.hdtl Parse_shen.<formula>) ())) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2641) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)))

(defun shen.<comma-symbol> (V2643) (if (cons? (hd V2643)) (let Parse_X (hd (hd V2643)) (if (= Parse_X (intern ",")) (shen.pair (hd (shen.pair (tl (hd V2643)) (shen.hdtl V2643))) shen.skip) (fail))) (fail)))

(defun shen.<formula> (V2645) (let YaccParse (let Parse_shen.<expr> (shen.<expr> V2645) (if (not (= (fail) Parse_shen.<expr>)) (if (and (cons? (hd Parse_shen.<expr>)) (= : (hd (hd Parse_shen.<expr>)))) (let Parse_shen.<type> (shen.<type> (shen.pair (tl (hd Parse_shen.<expr>)) (shen.hdtl Parse_shen.<expr>))) (if (not (= (fail) Parse_shen.<type>)) (shen.pair (hd Parse_shen.<type>) (cons (shen.curry (shen.hdtl Parse_shen.<expr>)) (cons : (cons (shen.demodulate (shen.hdtl Parse_shen.<type>)) ())))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<expr> (shen.<expr> V2645) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.hdtl Parse_shen.<expr>)) (fail))) YaccParse)))

(defun shen.<type> (V2647) (let Parse_shen.<expr> (shen.<expr> V2647) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.curry-type (shen.hdtl Parse_shen.<expr>))) (fail))))

(defun shen.<doubleunderline> (V2649) (if (cons? (hd V2649)) (let Parse_X (hd (hd V2649)) (if (shen.doubleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2649)) (shen.hdtl V2649))) Parse_X) (fail))) (fail)))

(defun shen.<singleunderline> (V2651) (if (cons? (hd V2651)) (let Parse_X (hd (hd V2651)) (if (shen.singleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2651)) (shen.hdtl V2651))) Parse_X) (fail))) (fail)))

(defun shen.singleunderline? (V2653) (and (symbol? V2653) (shen.sh? (str V2653))))

(defun shen.sh? (V2655) (cond ((= "_" V2655) true) (true (and (= (pos V2655 0) "_") (shen.sh? (tlstr V2655))))))

(defun shen.doubleunderline? (V2657) (and (symbol? V2657) (shen.dh? (str V2657))))

(defun shen.dh? (V2659) (cond ((= "=" V2659) true) (true (and (= (pos V2659 0) "=") (shen.dh? (tlstr V2659))))))

(defun shen.process-datatype (V2662 V2663) (shen.remember-datatype (shen.s-prolog (shen.rules->horn-clauses V2662 V2663))))

(defun shen.remember-datatype (V2669) (cond ((cons? V2669) (do (set shen.*datatypes* (adjoin (hd V2669) (value shen.*datatypes*))) (do (set shen.*alldatatypes* (adjoin (hd V2669) (value shen.*alldatatypes*))) (hd V2669)))) (true (shen.f_error shen.remember-datatype))))

(defun shen.rules->horn-clauses (V2674 V2675) (cond ((= () V2675) ()) ((and (cons? V2675) (and (tuple? (hd V2675)) (= shen.single (fst (hd V2675))))) (cons (shen.rule->horn-clause V2674 (snd (hd V2675))) (shen.rules->horn-clauses V2674 (tl V2675)))) ((and (cons? V2675) (and (tuple? (hd V2675)) (= shen.double (fst (hd V2675))))) (shen.rules->horn-clauses V2674 (append (shen.double->singles (snd (hd V2675))) (tl V2675)))) (true (shen.f_error shen.rules->horn-clauses))))

(defun shen.double->singles (V2677) (cons (shen.right-rule V2677) (cons (shen.left-rule V2677) ())))

(defun shen.right-rule (V2679) (@p shen.single V2679))

(defun shen.left-rule (V2681) (cond ((and (cons? V2681) (and (cons? (tl V2681)) (and (cons? (tl (tl V2681))) (and (tuple? (hd (tl (tl V2681)))) (and (= () (fst (hd (tl (tl V2681))))) (= () (tl (tl (tl V2681))))))))) (let Q (gensym Qv) (let NewConclusion (@p (cons (snd (hd (tl (tl V2681)))) ()) Q) (let NewPremises (cons (@p (map (lambda X (shen.right->left X)) (hd (tl V2681))) Q) ()) (@p shen.single (cons (hd V2681) (cons NewPremises (cons NewConclusion ())))))))) (true (shen.f_error shen.left-rule))))

(defun shen.right->left (V2687) (cond ((and (tuple? V2687) (= () (fst V2687))) (snd V2687)) (true (simple-error "syntax error with ==========
"))))

(defun shen.rule->horn-clause (V2690 V2691) (cond ((and (cons? V2691) (and (cons? (tl V2691)) (and (cons? (tl (tl V2691))) (and (tuple? (hd (tl (tl V2691)))) (= () (tl (tl (tl V2691)))))))) (cons (shen.rule->horn-clause-head V2690 (snd (hd (tl (tl V2691))))) (cons :- (cons (shen.rule->horn-clause-body (hd V2691) (hd (tl V2691)) (fst (hd (tl (tl V2691))))) ())))) (true (shen.f_error shen.rule->horn-clause))))

(defun shen.rule->horn-clause-head (V2694 V2695) (cons V2694 (cons (shen.mode-ify V2695) (cons Context_1957 ()))))

(defun shen.mode-ify (V2697) (cond ((and (cons? V2697) (and (cons? (tl V2697)) (and (= : (hd (tl V2697))) (and (cons? (tl (tl V2697))) (= () (tl (tl (tl V2697)))))))) (cons mode (cons (cons (hd V2697) (cons : (cons (cons mode (cons (hd (tl (tl V2697))) (cons + ()))) ()))) (cons - ())))) (true V2697)))

(defun shen.rule->horn-clause-body (V2701 V2702 V2703) (let Variables (map (lambda X (shen.extract_vars X)) V2703) (let Predicates (map (lambda X (gensym shen.cl)) V2703) (let SearchLiterals (shen.construct-search-literals Predicates Variables Context_1957 Context1_1957) (let SearchClauses (shen.construct-search-clauses Predicates V2703 Variables) (let SideLiterals (shen.construct-side-literals V2701) (let PremissLiterals (map (lambda X (shen.construct-premiss-literal X (empty? V2703))) V2702) (append SearchLiterals (append SideLiterals PremissLiterals)))))))))

(defun shen.construct-search-literals (V2712 V2713 V2714 V2715) (cond ((and (= () V2712) (= () V2713)) ()) (true (shen.csl-help V2712 V2713 V2714 V2715))))

(defun shen.csl-help (V2722 V2723 V2724 V2725) (cond ((and (= () V2722) (= () V2723)) (cons (cons bind (cons ContextOut_1957 (cons V2724 ()))) ())) ((and (cons? V2722) (cons? V2723)) (cons (cons (hd V2722) (cons V2724 (cons V2725 (hd V2723)))) (shen.csl-help (tl V2722) (tl V2723) V2725 (gensym Context)))) (true (shen.f_error shen.csl-help))))

(defun shen.construct-search-clauses (V2729 V2730 V2731) (cond ((and (= () V2729) (and (= () V2730) (= () V2731))) shen.skip) ((and (cons? V2729) (and (cons? V2730) (cons? V2731))) (do (shen.construct-search-clause (hd V2729) (hd V2730) (hd V2731)) (shen.construct-search-clauses (tl V2729) (tl V2730) (tl V2731)))) (true (shen.f_error shen.construct-search-clauses))))

(defun shen.construct-search-clause (V2735 V2736 V2737) (shen.s-prolog (cons (shen.construct-base-search-clause V2735 V2736 V2737) (cons (shen.construct-recursive-search-clause V2735 V2736 V2737) ()))))

(defun shen.construct-base-search-clause (V2741 V2742 V2743) (cons (cons V2741 (cons (cons (shen.mode-ify V2742) In_1957) (cons In_1957 V2743))) (cons :- (cons () ()))))

(defun shen.construct-recursive-search-clause (V2747 V2748 V2749) (cons (cons V2747 (cons (cons Assumption_1957 Assumptions_1957) (cons (cons Assumption_1957 Out_1957) V2749))) (cons :- (cons (cons (cons V2747 (cons Assumptions_1957 (cons Out_1957 V2749))) ()) ()))))

(defun shen.construct-side-literals (V2755) (cond ((= () V2755) ()) ((and (cons? V2755) (and (cons? (hd V2755)) (and (= if (hd (hd V2755))) (and (cons? (tl (hd V2755))) (= () (tl (tl (hd V2755)))))))) (cons (cons when (tl (hd V2755))) (shen.construct-side-literals (tl V2755)))) ((and (cons? V2755) (and (cons? (hd V2755)) (and (= let (hd (hd V2755))) (and (cons? (tl (hd V2755))) (and (cons? (tl (tl (hd V2755)))) (= () (tl (tl (tl (hd V2755)))))))))) (cons (cons is (tl (hd V2755))) (shen.construct-side-literals (tl V2755)))) ((cons? V2755) (shen.construct-side-literals (tl V2755))) (true (shen.f_error shen.construct-side-literals))))

(defun shen.construct-premiss-literal (V2762 V2763) (cond ((tuple? V2762) (cons shen.t* (cons (shen.recursive_cons_form (snd V2762)) (cons (shen.construct-context V2763 (fst V2762)) ())))) ((= ! V2762) (cons cut (cons Throwcontrol ()))) (true (shen.f_error shen.construct-premiss-literal))))

(defun shen.construct-context (V2766 V2767) (cond ((and (= true V2766) (= () V2767)) Context_1957) ((and (= false V2766) (= () V2767)) ContextOut_1957) ((cons? V2767) (cons cons (cons (shen.recursive_cons_form (hd V2767)) (cons (shen.construct-context V2766 (tl V2767)) ())))) (true (shen.f_error shen.construct-context))))

(defun shen.recursive_cons_form (V2769) (cond ((cons? V2769) (cons cons (cons (shen.recursive_cons_form (hd V2769)) (cons (shen.recursive_cons_form (tl V2769)) ())))) (true V2769)))

(defun preclude (V2771) (shen.preclude-h (map (lambda X (shen.intern-type X)) V2771)))

(defun shen.preclude-h (V2773) (let FilterDatatypes (set shen.*datatypes* (difference (value shen.*datatypes*) V2773)) (value shen.*datatypes*)))

(defun include (V2775) (shen.include-h (map (lambda X (shen.intern-type X)) V2775)))

(defun shen.include-h (V2777) (let ValidTypes (intersection V2777 (value shen.*alldatatypes*)) (let NewDatatypes (set shen.*datatypes* (union ValidTypes (value shen.*datatypes*))) (value shen.*datatypes*))))

(defun preclude-all-but (V2779) (shen.preclude-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V2779))))

(defun include-all-but (V2781) (shen.include-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V2781))))

(defun shen.synonyms-help (V2787) (cond ((= () V2787) (shen.update-demodulation-function (value shen.*tc*) (mapcan (lambda X (shen.demod-rule X)) (value shen.*synonyms*)))) ((and (cons? V2787) (cons? (tl V2787))) (let Vs (difference (shen.extract_vars (hd (tl V2787))) (shen.extract_vars (hd V2787))) (if (empty? Vs) (do (shen.pushnew (cons (hd V2787) (cons (hd (tl V2787)) ())) shen.*synonyms*) (shen.synonyms-help (tl (tl V2787)))) (shen.free_variable_warnings (hd (tl V2787)) Vs)))) (true (simple-error "odd number of synonyms
"))))

(defun shen.pushnew (V2790 V2791) (if (element? V2790 (value V2791)) (value V2791) (set V2791 (cons V2790 (value V2791)))))

(defun shen.demod-rule (V2793) (cond ((and (cons? V2793) (and (cons? (tl V2793)) (= () (tl (tl V2793))))) (cons (shen.rcons_form (hd V2793)) (cons -> (cons (shen.rcons_form (hd (tl V2793))) ())))) (true (shen.f_error shen.demod-rule))))

(defun shen.lambda-of-defun (V2799) (cond ((and (cons? V2799) (and (= defun (hd V2799)) (and (cons? (tl V2799)) (and (cons? (tl (tl V2799))) (and (cons? (hd (tl (tl V2799)))) (and (= () (tl (hd (tl (tl V2799))))) (and (cons? (tl (tl (tl V2799)))) (= () (tl (tl (tl (tl V2799)))))))))))) (eval (cons /. (cons (hd (hd (tl (tl V2799)))) (tl (tl (tl V2799))))))) (true (shen.f_error shen.lambda-of-defun))))

(defun shen.update-demodulation-function (V2802 V2803) (do (tc -) (do (set shen.*demodulation-function* (shen.lambda-of-defun (shen.elim-def (cons define (cons shen.demod (append V2803 (shen.default-rule))))))) (do (if V2802 (tc +) shen.skip) synonyms))))

(defun shen.default-rule () (cons X (cons -> (cons X ()))))



