"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.datatype-error (V2431) (cond ((and (cons? V2431) (and (cons? (tl V2431)) (= () (tl (tl V2431))))) (simple-error (cn "datatype syntax error here:

 " (shen.app (shen.next-50 50 (hd V2431)) "
" shen.a)))) (true (shen.f_error shen.datatype-error))))

(defun shen.<datatype-rules> (V2433) (let YaccParse (let Parse_shen.<datatype-rule> (shen.<datatype-rule> V2433) (if (not (= (fail) Parse_shen.<datatype-rule>)) (let Parse_shen.<datatype-rules> (shen.<datatype-rules> Parse_shen.<datatype-rule>) (if (not (= (fail) Parse_shen.<datatype-rules>)) (shen.pair (hd Parse_shen.<datatype-rules>) (cons (shen.hdtl Parse_shen.<datatype-rule>) (shen.hdtl Parse_shen.<datatype-rules>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2433) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<datatype-rule> (V2435) (let YaccParse (let Parse_shen.<side-conditions> (shen.<side-conditions> V2435) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<singleunderline> (shen.<singleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<singleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<singleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.single (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<side-conditions> (shen.<side-conditions> V2435) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<doubleunderline> (shen.<doubleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<doubleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<doubleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.double (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) YaccParse)))

(defun shen.<side-conditions> (V2437) (let YaccParse (let Parse_shen.<side-condition> (shen.<side-condition> V2437) (if (not (= (fail) Parse_shen.<side-condition>)) (let Parse_shen.<side-conditions> (shen.<side-conditions> Parse_shen.<side-condition>) (if (not (= (fail) Parse_shen.<side-conditions>)) (shen.pair (hd Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<side-condition>) (shen.hdtl Parse_shen.<side-conditions>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2437) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<side-condition> (V2439) (let YaccParse (if (and (cons? (hd V2439)) (= if (hd (hd V2439)))) (let Parse_shen.<expr> (shen.<expr> (shen.pair (tl (hd V2439)) (shen.hdtl V2439))) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons if (cons (shen.hdtl Parse_shen.<expr>) ()))) (fail))) (fail)) (if (= YaccParse (fail)) (if (and (cons? (hd V2439)) (= let (hd (hd V2439)))) (let Parse_shen.<variable?> (shen.<variable?> (shen.pair (tl (hd V2439)) (shen.hdtl V2439))) (if (not (= (fail) Parse_shen.<variable?>)) (let Parse_shen.<expr> (shen.<expr> Parse_shen.<variable?>) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons let (cons (shen.hdtl Parse_shen.<variable?>) (cons (shen.hdtl Parse_shen.<expr>) ())))) (fail))) (fail))) (fail)) YaccParse)))

(defun shen.<variable?> (V2441) (if (cons? (hd V2441)) (let Parse_X (hd (hd V2441)) (if (variable? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2441)) (shen.hdtl V2441))) Parse_X) (fail))) (fail)))

(defun shen.<expr> (V2443) (if (cons? (hd V2443)) (let Parse_X (hd (hd V2443)) (if (not (or (element? Parse_X (cons >> (cons ; ()))) (or (shen.singleunderline? Parse_X) (shen.doubleunderline? Parse_X)))) (shen.pair (hd (shen.pair (tl (hd V2443)) (shen.hdtl V2443))) (shen.remove-bar Parse_X)) (fail))) (fail)))

(defun shen.remove-bar (V2445) (cond ((and (cons? V2445) (and (cons? (tl V2445)) (and (cons? (tl (tl V2445))) (and (= () (tl (tl (tl V2445)))) (= (hd (tl V2445)) bar!))))) (cons (hd V2445) (hd (tl (tl V2445))))) ((cons? V2445) (cons (shen.remove-bar (hd V2445)) (shen.remove-bar (tl V2445)))) (true V2445)))

(defun shen.<premises> (V2447) (let YaccParse (let Parse_shen.<premise> (shen.<premise> V2447) (if (not (= (fail) Parse_shen.<premise>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<premise>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<semicolon-symbol>) (if (not (= (fail) Parse_shen.<premises>)) (shen.pair (hd Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<premise>) (shen.hdtl Parse_shen.<premises>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2447) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<semicolon-symbol> (V2449) (if (cons? (hd V2449)) (let Parse_X (hd (hd V2449)) (if (= Parse_X ;) (shen.pair (hd (shen.pair (tl (hd V2449)) (shen.hdtl V2449))) shen.skip) (fail))) (fail)))

(defun shen.<premise> (V2451) (let YaccParse (if (and (cons? (hd V2451)) (= ! (hd (hd V2451)))) (shen.pair (hd (shen.pair (tl (hd V2451)) (shen.hdtl V2451))) !) (fail)) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2451) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2451) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) YaccParse)) YaccParse)))

(defun shen.<conclusion> (V2453) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2453) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2453) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) YaccParse)))

(defun shen.sequent (V2456 V2457) (@p V2456 V2457))

(defun shen.<formulae> (V2459) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2459) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<comma-symbol> (shen.<comma-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<comma-symbol>)) (let Parse_shen.<formulae> (shen.<formulae> Parse_shen.<comma-symbol>) (if (not (= (fail) Parse_shen.<formulae>)) (shen.pair (hd Parse_shen.<formulae>) (cons (shen.hdtl Parse_shen.<formula>) (shen.hdtl Parse_shen.<formulae>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2459) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (cons (shen.hdtl Parse_shen.<formula>) ())) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2459) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)))

(defun shen.<comma-symbol> (V2461) (if (cons? (hd V2461)) (let Parse_X (hd (hd V2461)) (if (= Parse_X (intern ",")) (shen.pair (hd (shen.pair (tl (hd V2461)) (shen.hdtl V2461))) shen.skip) (fail))) (fail)))

(defun shen.<formula> (V2463) (let YaccParse (let Parse_shen.<expr> (shen.<expr> V2463) (if (not (= (fail) Parse_shen.<expr>)) (if (and (cons? (hd Parse_shen.<expr>)) (= : (hd (hd Parse_shen.<expr>)))) (let Parse_shen.<type> (shen.<type> (shen.pair (tl (hd Parse_shen.<expr>)) (shen.hdtl Parse_shen.<expr>))) (if (not (= (fail) Parse_shen.<type>)) (shen.pair (hd Parse_shen.<type>) (cons (shen.curry (shen.hdtl Parse_shen.<expr>)) (cons : (cons (shen.demodulate (shen.hdtl Parse_shen.<type>)) ())))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<expr> (shen.<expr> V2463) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.hdtl Parse_shen.<expr>)) (fail))) YaccParse)))

(defun shen.<type> (V2465) (let Parse_shen.<expr> (shen.<expr> V2465) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.curry-type (shen.hdtl Parse_shen.<expr>))) (fail))))

(defun shen.<doubleunderline> (V2467) (if (cons? (hd V2467)) (let Parse_X (hd (hd V2467)) (if (shen.doubleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2467)) (shen.hdtl V2467))) Parse_X) (fail))) (fail)))

(defun shen.<singleunderline> (V2469) (if (cons? (hd V2469)) (let Parse_X (hd (hd V2469)) (if (shen.singleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2469)) (shen.hdtl V2469))) Parse_X) (fail))) (fail)))

(defun shen.singleunderline? (V2471) (and (symbol? V2471) (shen.sh? (str V2471))))

(defun shen.sh? (V2473) (cond ((= "_" V2473) true) (true (and (= (pos V2473 0) "_") (shen.sh? (tlstr V2473))))))

(defun shen.doubleunderline? (V2475) (and (symbol? V2475) (shen.dh? (str V2475))))

(defun shen.dh? (V2477) (cond ((= "=" V2477) true) (true (and (= (pos V2477 0) "=") (shen.dh? (tlstr V2477))))))

(defun shen.process-datatype (V2480 V2481) (shen.remember-datatype (shen.s-prolog (shen.rules->horn-clauses V2480 V2481))))

(defun shen.remember-datatype (V2487) (cond ((cons? V2487) (do (set shen.*datatypes* (adjoin (hd V2487) (value shen.*datatypes*))) (do (set shen.*alldatatypes* (adjoin (hd V2487) (value shen.*alldatatypes*))) (hd V2487)))) (true (shen.f_error shen.remember-datatype))))

(defun shen.rules->horn-clauses (V2492 V2493) (cond ((= () V2493) ()) ((and (cons? V2493) (and (tuple? (hd V2493)) (= shen.single (fst (hd V2493))))) (cons (shen.rule->horn-clause V2492 (snd (hd V2493))) (shen.rules->horn-clauses V2492 (tl V2493)))) ((and (cons? V2493) (and (tuple? (hd V2493)) (= shen.double (fst (hd V2493))))) (shen.rules->horn-clauses V2492 (append (shen.double->singles (snd (hd V2493))) (tl V2493)))) (true (shen.f_error shen.rules->horn-clauses))))

(defun shen.double->singles (V2495) (cons (shen.right-rule V2495) (cons (shen.left-rule V2495) ())))

(defun shen.right-rule (V2497) (@p shen.single V2497))

(defun shen.left-rule (V2499) (cond ((and (cons? V2499) (and (cons? (tl V2499)) (and (cons? (tl (tl V2499))) (and (tuple? (hd (tl (tl V2499)))) (and (= () (fst (hd (tl (tl V2499))))) (= () (tl (tl (tl V2499))))))))) (let Q (gensym Qv) (let NewConclusion (@p (cons (snd (hd (tl (tl V2499)))) ()) Q) (let NewPremises (cons (@p (map (lambda X (shen.right->left X)) (hd (tl V2499))) Q) ()) (@p shen.single (cons (hd V2499) (cons NewPremises (cons NewConclusion ())))))))) (true (shen.f_error shen.left-rule))))

(defun shen.right->left (V2505) (cond ((and (tuple? V2505) (= () (fst V2505))) (snd V2505)) (true (simple-error "syntax error with ==========
"))))

(defun shen.rule->horn-clause (V2508 V2509) (cond ((and (cons? V2509) (and (cons? (tl V2509)) (and (cons? (tl (tl V2509))) (and (tuple? (hd (tl (tl V2509)))) (= () (tl (tl (tl V2509)))))))) (cons (shen.rule->horn-clause-head V2508 (snd (hd (tl (tl V2509))))) (cons :- (cons (shen.rule->horn-clause-body (hd V2509) (hd (tl V2509)) (fst (hd (tl (tl V2509))))) ())))) (true (shen.f_error shen.rule->horn-clause))))

(defun shen.rule->horn-clause-head (V2512 V2513) (cons V2512 (cons (shen.mode-ify V2513) (cons Context_1957 ()))))

(defun shen.mode-ify (V2515) (cond ((and (cons? V2515) (and (cons? (tl V2515)) (and (= : (hd (tl V2515))) (and (cons? (tl (tl V2515))) (= () (tl (tl (tl V2515)))))))) (cons mode (cons (cons (hd V2515) (cons : (cons (cons mode (cons (hd (tl (tl V2515))) (cons + ()))) ()))) (cons - ())))) (true V2515)))

(defun shen.rule->horn-clause-body (V2519 V2520 V2521) (let Variables (map (lambda X (shen.extract_vars X)) V2521) (let Predicates (map (lambda X (gensym shen.cl)) V2521) (let SearchLiterals (shen.construct-search-literals Predicates Variables Context_1957 Context1_1957) (let SearchClauses (shen.construct-search-clauses Predicates V2521 Variables) (let SideLiterals (shen.construct-side-literals V2519) (let PremissLiterals (map (lambda X (shen.construct-premiss-literal X (empty? V2521))) V2520) (append SearchLiterals (append SideLiterals PremissLiterals)))))))))

(defun shen.construct-search-literals (V2530 V2531 V2532 V2533) (cond ((and (= () V2530) (= () V2531)) ()) (true (shen.csl-help V2530 V2531 V2532 V2533))))

(defun shen.csl-help (V2540 V2541 V2542 V2543) (cond ((and (= () V2540) (= () V2541)) (cons (cons bind (cons ContextOut_1957 (cons V2542 ()))) ())) ((and (cons? V2540) (cons? V2541)) (cons (cons (hd V2540) (cons V2542 (cons V2543 (hd V2541)))) (shen.csl-help (tl V2540) (tl V2541) V2543 (gensym Context)))) (true (shen.f_error shen.csl-help))))

(defun shen.construct-search-clauses (V2547 V2548 V2549) (cond ((and (= () V2547) (and (= () V2548) (= () V2549))) shen.skip) ((and (cons? V2547) (and (cons? V2548) (cons? V2549))) (do (shen.construct-search-clause (hd V2547) (hd V2548) (hd V2549)) (shen.construct-search-clauses (tl V2547) (tl V2548) (tl V2549)))) (true (shen.f_error shen.construct-search-clauses))))

(defun shen.construct-search-clause (V2553 V2554 V2555) (shen.s-prolog (cons (shen.construct-base-search-clause V2553 V2554 V2555) (cons (shen.construct-recursive-search-clause V2553 V2554 V2555) ()))))

(defun shen.construct-base-search-clause (V2559 V2560 V2561) (cons (cons V2559 (cons (cons (shen.mode-ify V2560) In_1957) (cons In_1957 V2561))) (cons :- (cons () ()))))

(defun shen.construct-recursive-search-clause (V2565 V2566 V2567) (cons (cons V2565 (cons (cons Assumption_1957 Assumptions_1957) (cons (cons Assumption_1957 Out_1957) V2567))) (cons :- (cons (cons (cons V2565 (cons Assumptions_1957 (cons Out_1957 V2567))) ()) ()))))

(defun shen.construct-side-literals (V2573) (cond ((= () V2573) ()) ((and (cons? V2573) (and (cons? (hd V2573)) (and (= if (hd (hd V2573))) (and (cons? (tl (hd V2573))) (= () (tl (tl (hd V2573)))))))) (cons (cons when (tl (hd V2573))) (shen.construct-side-literals (tl V2573)))) ((and (cons? V2573) (and (cons? (hd V2573)) (and (= let (hd (hd V2573))) (and (cons? (tl (hd V2573))) (and (cons? (tl (tl (hd V2573)))) (= () (tl (tl (tl (hd V2573)))))))))) (cons (cons is (tl (hd V2573))) (shen.construct-side-literals (tl V2573)))) ((cons? V2573) (shen.construct-side-literals (tl V2573))) (true (shen.f_error shen.construct-side-literals))))

(defun shen.construct-premiss-literal (V2580 V2581) (cond ((tuple? V2580) (cons shen.t* (cons (shen.recursive_cons_form (snd V2580)) (cons (shen.construct-context V2581 (fst V2580)) ())))) ((= ! V2580) (cons cut (cons Throwcontrol ()))) (true (shen.f_error shen.construct-premiss-literal))))

(defun shen.construct-context (V2584 V2585) (cond ((and (= true V2584) (= () V2585)) Context_1957) ((and (= false V2584) (= () V2585)) ContextOut_1957) ((cons? V2585) (cons cons (cons (shen.recursive_cons_form (hd V2585)) (cons (shen.construct-context V2584 (tl V2585)) ())))) (true (shen.f_error shen.construct-context))))

(defun shen.recursive_cons_form (V2587) (cond ((cons? V2587) (cons cons (cons (shen.recursive_cons_form (hd V2587)) (cons (shen.recursive_cons_form (tl V2587)) ())))) (true V2587)))

(defun preclude (V2589) (shen.preclude-h (map (lambda X (shen.intern-type X)) V2589)))

(defun shen.preclude-h (V2591) (let FilterDatatypes (set shen.*datatypes* (difference (value shen.*datatypes*) V2591)) (value shen.*datatypes*)))

(defun include (V2593) (shen.include-h (map (lambda X (shen.intern-type X)) V2593)))

(defun shen.include-h (V2595) (let ValidTypes (intersection V2595 (value shen.*alldatatypes*)) (let NewDatatypes (set shen.*datatypes* (union ValidTypes (value shen.*datatypes*))) (value shen.*datatypes*))))

(defun preclude-all-but (V2597) (shen.preclude-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V2597))))

(defun include-all-but (V2599) (shen.include-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V2599))))

(defun shen.synonyms-help (V2605) (cond ((= () V2605) (shen.demodulation-function (value shen.*tc*) (mapcan (lambda X (shen.demod-rule X)) (value shen.*synonyms*)))) ((and (cons? V2605) (cons? (tl V2605))) (let Vs (difference (shen.extract_vars (hd (tl V2605))) (shen.extract_vars (hd V2605))) (if (empty? Vs) (do (shen.pushnew (cons (hd V2605) (cons (hd (tl V2605)) ())) shen.*synonyms*) (shen.synonyms-help (tl (tl V2605)))) (shen.free_variable_warnings (hd (tl V2605)) Vs)))) (true (simple-error "odd number of synonyms
"))))

(defun shen.pushnew (V2608 V2609) (if (element? V2608 (value V2609)) (value V2609) (set V2609 (cons V2608 (value V2609)))))

(defun shen.demod-rule (V2611) (cond ((and (cons? V2611) (and (cons? (tl V2611)) (= () (tl (tl V2611))))) (cons (shen.rcons_form (hd V2611)) (cons -> (cons (shen.rcons_form (hd (tl V2611))) ())))) (true (shen.f_error shen.demod-rule))))

(defun shen.demodulation-function (V2614 V2615) (do (tc -) (do (eval (cons define (cons shen.demod (append V2615 (shen.default-rule))))) (do (if V2614 (tc +) shen.skip) synonyms))))

(defun shen.default-rule () (cons X (cons -> (cons X ()))))



