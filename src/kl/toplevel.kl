"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.shen () (do (shen.credits) (shen.loop)))

(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda E (pr (error-to-string E) (stoutput)))) (shen.loop)))))

(defun shen.credits () (do (shen.prhush "
Shen, copyright (C) 2010-2015 Mark Tarver
" (stoutput)) (do (shen.prhush (cn "www.shenlanguage.org, " (shen.app (value *version*) "
" shen.a)) (stoutput)) (do (shen.prhush (cn "running under " (shen.app (value *language*) (cn ", implementation: " (shen.app (value *implementation*) "" shen.a)) shen.a)) (stoutput)) (shen.prhush (cn "
port " (shen.app (value *port*) (cn " ported by " (shen.app (value *porters*) "
" shen.a)) shen.a)) (stoutput))))))

(defun shen.initialise_environment () (shen.multiple-set (cons shen.*call* (cons 0 (cons shen.*infs* (cons 0 (cons shen.*process-counter* (cons 0 (cons shen.*catch* (cons 0 ()))))))))))

(defun shen.multiple-set (V3671) (cond ((= () V3671) ()) ((and (cons? V3671) (cons? (tl V3671))) (do (set (hd V3671) (hd (tl V3671))) (shen.multiple-set (tl (tl V3671))))) (true (shen.f_error shen.multiple-set))))

(defun destroy (V3673) (declare V3673 symbol))

(set shen.*history* ())

(defun shen.read-evaluate-print () (let Lineread (shen.toplineread) (let History (value shen.*history*) (let NewLineread (shen.retrieve-from-history-if-needed Lineread History) (let NewHistory (shen.update_history NewLineread History) (let Parsed (fst NewLineread) (shen.toplevel Parsed)))))))

(defun shen.retrieve-from-history-if-needed (V3685 V3686) (cond ((and (tuple? V3685) (and (cons? (snd V3685)) (element? (hd (snd V3685)) (cons (shen.space) (cons (shen.newline) ()))))) (shen.retrieve-from-history-if-needed (@p (fst V3685) (tl (snd V3685))) V3686)) ((and (tuple? V3685) (and (cons? (snd V3685)) (and (cons? (tl (snd V3685))) (and (= () (tl (tl (snd V3685)))) (and (cons? V3686) (and (= (hd (snd V3685)) (shen.exclamation)) (= (hd (tl (snd V3685))) (shen.exclamation)))))))) (let PastPrint (shen.prbytes (snd (hd V3686))) (hd V3686))) ((and (tuple? V3685) (and (cons? (snd V3685)) (= (hd (snd V3685)) (shen.exclamation)))) (let Key? (shen.make-key (tl (snd V3685)) V3686) (let Find (head (shen.find-past-inputs Key? V3686)) (let PastPrint (shen.prbytes (snd Find)) Find)))) ((and (tuple? V3685) (and (cons? (snd V3685)) (and (= () (tl (snd V3685))) (= (hd (snd V3685)) (shen.percent))))) (do (shen.print-past-inputs (lambda X true) (reverse V3686) 0) (abort))) ((and (tuple? V3685) (and (cons? (snd V3685)) (= (hd (snd V3685)) (shen.percent)))) (let Key? (shen.make-key (tl (snd V3685)) V3686) (let Pastprint (shen.print-past-inputs Key? (reverse V3686) 0) (abort)))) (true V3685)))

(defun shen.percent () 37)

(defun shen.exclamation () 33)

(defun shen.prbytes (V3688) (do (map (lambda Byte (pr (n->string Byte) (stoutput))) V3688) (nl 1)))

(defun shen.update_history (V3691 V3692) (set shen.*history* (cons V3691 V3692)))

(defun shen.toplineread () (shen.toplineread_loop (read-byte (stinput)) ()))

(defun shen.toplineread_loop (V3696 V3697) (cond ((= V3696 (shen.hat)) (simple-error "line read aborted")) ((element? V3696 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda X (shen.<st_input> X)) V3697 (lambda E shen.nextline)) (let It (shen.record-it V3697) (if (or (= Line shen.nextline) (empty? Line)) (shen.toplineread_loop (read-byte (stinput)) (append V3697 (cons V3696 ()))) (@p Line V3697))))) (true (shen.toplineread_loop (read-byte (stinput)) (append V3697 (cons V3696 ()))))))

(defun shen.hat () 94)

(defun shen.newline () 10)

(defun shen.carriage-return () 13)

(defun tc (V3703) (cond ((= + V3703) (set shen.*tc* true)) ((= - V3703) (set shen.*tc* false)) (true (simple-error "tc expects a + or -"))))

(defun shen.prompt () (if (value shen.*tc*) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))

(defun shen.toplevel (V3705) (shen.toplevel_evaluate V3705 (value shen.*tc*)))

(defun shen.find-past-inputs (V3708 V3709) (let F (shen.find V3708 V3709) (if (empty? F) (simple-error "input not found
") F)))

(defun shen.make-key (V3712 V3713) (let Atom (hd (compile (lambda X (shen.<st_input> X)) V3712 (lambda E (if (cons? E) (simple-error (cn "parse error here: " (shen.app E "
" shen.s))) (simple-error "parse error
"))))) (if (integer? Atom) (lambda X (= X (nth (+ Atom 1) (reverse V3713)))) (lambda X (shen.prefix? V3712 (shen.trim-gubbins (snd X)))))))

(defun shen.trim-gubbins (V3715) (cond ((and (cons? V3715) (= (hd V3715) (shen.space))) (shen.trim-gubbins (tl V3715))) ((and (cons? V3715) (= (hd V3715) (shen.newline))) (shen.trim-gubbins (tl V3715))) ((and (cons? V3715) (= (hd V3715) (shen.carriage-return))) (shen.trim-gubbins (tl V3715))) ((and (cons? V3715) (= (hd V3715) (shen.tab))) (shen.trim-gubbins (tl V3715))) ((and (cons? V3715) (= (hd V3715) (shen.left-round))) (shen.trim-gubbins (tl V3715))) (true V3715)))

(defun shen.space () 32)

(defun shen.tab () 9)

(defun shen.left-round () 40)

(defun shen.find (V3724 V3725) (cond ((= () V3725) ()) ((and (cons? V3725) (V3724 (hd V3725))) (cons (hd V3725) (shen.find V3724 (tl V3725)))) ((cons? V3725) (shen.find V3724 (tl V3725))) (true (shen.f_error shen.find))))

(defun shen.prefix? (V3739 V3740) (cond ((= () V3739) true) ((and (cons? V3739) (and (cons? V3740) (= (hd V3740) (hd V3739)))) (shen.prefix? (tl V3739) (tl V3740))) (true false)))

(defun shen.print-past-inputs (V3752 V3753 V3754) (cond ((= () V3753) _) ((and (cons? V3753) (not (V3752 (hd V3753)))) (shen.print-past-inputs V3752 (tl V3753) (+ V3754 1))) ((and (cons? V3753) (tuple? (hd V3753))) (do (shen.prhush (shen.app V3754 ". " shen.a) (stoutput)) (do (shen.prbytes (snd (hd V3753))) (shen.print-past-inputs V3752 (tl V3753) (+ V3754 1))))) (true (shen.f_error shen.print-past-inputs))))

(defun shen.toplevel_evaluate (V3757 V3758) (cond ((and (cons? V3757) (and (cons? (tl V3757)) (and (= : (hd (tl V3757))) (and (cons? (tl (tl V3757))) (and (= () (tl (tl (tl V3757)))) (= true V3758)))))) (shen.typecheck-and-evaluate (hd V3757) (hd (tl (tl V3757))))) ((and (cons? V3757) (cons? (tl V3757))) (do (shen.toplevel_evaluate (cons (hd V3757) ()) V3758) (do (nl 1) (shen.toplevel_evaluate (tl V3757) V3758)))) ((and (cons? V3757) (and (= () (tl V3757)) (= true V3758))) (shen.typecheck-and-evaluate (hd V3757) (gensym A))) ((and (cons? V3757) (and (= () (tl V3757)) (= false V3758))) (let Eval (shen.eval-without-macros (hd V3757)) (print Eval))) (true (shen.f_error shen.toplevel_evaluate))))

(defun shen.typecheck-and-evaluate (V3761 V3762) (let Typecheck (shen.typecheck V3761 V3762) (if (= Typecheck false) (simple-error "type error
") (let Eval (shen.eval-without-macros V3761) (let Type (shen.pretty-type Typecheck) (shen.prhush (shen.app Eval (cn " : " (shen.app Type "" shen.r)) shen.s) (stoutput)))))))

(defun shen.pretty-type (V3764) (shen.mult_subst (value shen.*alphabet*) (shen.extract-pvars V3764) V3764))

(defun shen.extract-pvars (V3770) (cond ((shen.pvar? V3770) (cons V3770 ())) ((cons? V3770) (union (shen.extract-pvars (hd V3770)) (shen.extract-pvars (tl V3770)))) (true ())))

(defun shen.mult_subst (V3778 V3779 V3780) (cond ((= () V3778) V3780) ((= () V3779) V3780) ((and (cons? V3778) (cons? V3779)) (shen.mult_subst (tl V3778) (tl V3779) (subst (hd V3778) (hd V3779) V3780))) (true (shen.f_error shen.mult_subst))))



