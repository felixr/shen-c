"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.shen () (do (shen.credits) (shen.loop)))

(set shen.*continue-repl-loop* true)

(defun exit (V3794) (set shen.*continue-repl-loop* false))

(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda E (pr (error-to-string E) (stoutput)))) (if (value shen.*continue-repl-loop*) (shen.loop) exit)))))

(defun shen.credits () (do (shen.prhush "
Shen, copyright (C) 2010-2015 Mark Tarver
" (stoutput)) (do (shen.prhush (cn "www.shenlanguage.org, " (shen.app (value *version*) "
" shen.a)) (stoutput)) (do (shen.prhush (cn "running under " (shen.app (value *language*) (cn ", implementation: " (shen.app (value *implementation*) "" shen.a)) shen.a)) (stoutput)) (shen.prhush (cn "
port " (shen.app (value *port*) (cn " ported by " (shen.app (value *porters*) "
" shen.a)) shen.a)) (stoutput))))))

(defun shen.initialise_environment () (shen.multiple-set (cons shen.*call* (cons 0 (cons shen.*infs* (cons 0 (cons shen.*process-counter* (cons 0 (cons shen.*catch* (cons 0 ()))))))))))

(defun shen.multiple-set (V3796) (cond ((= () V3796) ()) ((and (cons? V3796) (cons? (tl V3796))) (do (set (hd V3796) (hd (tl V3796))) (shen.multiple-set (tl (tl V3796))))) (true (shen.f_error shen.multiple-set))))

(defun destroy (V3798) (declare V3798 symbol))

(set shen.*history* ())

(defun shen.read-evaluate-print () (let Lineread (shen.toplineread) (let History (value shen.*history*) (let NewLineread (shen.retrieve-from-history-if-needed Lineread History) (let NewHistory (shen.update_history NewLineread History) (let Parsed (fst NewLineread) (shen.toplevel Parsed)))))))

(defun shen.retrieve-from-history-if-needed (V3810 V3811) (cond ((and (tuple? V3810) (and (cons? (snd V3810)) (element? (hd (snd V3810)) (cons (shen.space) (cons (shen.newline) ()))))) (shen.retrieve-from-history-if-needed (@p (fst V3810) (tl (snd V3810))) V3811)) ((and (tuple? V3810) (and (cons? (snd V3810)) (and (cons? (tl (snd V3810))) (and (= () (tl (tl (snd V3810)))) (and (cons? V3811) (and (= (hd (snd V3810)) (shen.exclamation)) (= (hd (tl (snd V3810))) (shen.exclamation)))))))) (let PastPrint (shen.prbytes (snd (hd V3811))) (hd V3811))) ((and (tuple? V3810) (and (cons? (snd V3810)) (= (hd (snd V3810)) (shen.exclamation)))) (let Key? (shen.make-key (tl (snd V3810)) V3811) (let Find (head (shen.find-past-inputs Key? V3811)) (let PastPrint (shen.prbytes (snd Find)) Find)))) ((and (tuple? V3810) (and (cons? (snd V3810)) (and (= () (tl (snd V3810))) (= (hd (snd V3810)) (shen.percent))))) (do (shen.print-past-inputs (lambda X true) (reverse V3811) 0) (abort))) ((and (tuple? V3810) (and (cons? (snd V3810)) (= (hd (snd V3810)) (shen.percent)))) (let Key? (shen.make-key (tl (snd V3810)) V3811) (let Pastprint (shen.print-past-inputs Key? (reverse V3811) 0) (abort)))) (true V3810)))

(defun shen.percent () 37)

(defun shen.exclamation () 33)

(defun shen.prbytes (V3813) (do (for-each (lambda Byte (pr (n->string Byte) (stoutput))) V3813) (nl 1)))

(defun shen.update_history (V3816 V3817) (set shen.*history* (cons V3816 V3817)))

(defun shen.toplineread () (shen.toplineread_loop (read-char-code (stinput)) ()))

(defun shen.toplineread_loop (V3821 V3822) (cond ((and (= -1 V3821) (= () V3822)) (exit 0)) ((= V3821 (shen.hat)) (simple-error "line read aborted")) ((element? V3821 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda X (shen.<st_input> X)) V3822 (lambda E shen.nextline)) (let It (shen.record-it V3822) (if (or (= Line shen.nextline) (empty? Line)) (shen.toplineread_loop (read-char-code (stinput)) (append V3822 (cons V3821 ()))) (@p Line V3822))))) (true (shen.toplineread_loop (read-char-code (stinput)) (if (= V3821 -1) V3822 (append V3822 (cons V3821 ())))))))

(defun shen.hat () 94)

(defun shen.newline () 10)

(defun shen.carriage-return () 13)

(defun tc (V3828) (cond ((= + V3828) (set shen.*tc* true)) ((= - V3828) (set shen.*tc* false)) (true (simple-error "tc expects a + or -"))))

(defun shen.prompt () (if (value shen.*tc*) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))

(defun shen.toplevel (V3830) (shen.toplevel_evaluate V3830 (value shen.*tc*)))

(defun shen.find-past-inputs (V3833 V3834) (let F (shen.find V3833 V3834) (if (empty? F) (simple-error "input not found
") F)))

(defun shen.make-key (V3837 V3838) (let Atom (hd (compile (lambda X (shen.<st_input> X)) V3837 (lambda E (if (cons? E) (simple-error (cn "parse error here: " (shen.app E "
" shen.s))) (simple-error "parse error
"))))) (if (integer? Atom) (lambda X (= X (nth (+ Atom 1) (reverse V3838)))) (lambda X (shen.prefix? V3837 (shen.trim-gubbins (snd X)))))))

(defun shen.trim-gubbins (V3840) (cond ((and (cons? V3840) (= (hd V3840) (shen.space))) (shen.trim-gubbins (tl V3840))) ((and (cons? V3840) (= (hd V3840) (shen.newline))) (shen.trim-gubbins (tl V3840))) ((and (cons? V3840) (= (hd V3840) (shen.carriage-return))) (shen.trim-gubbins (tl V3840))) ((and (cons? V3840) (= (hd V3840) (shen.tab))) (shen.trim-gubbins (tl V3840))) ((and (cons? V3840) (= (hd V3840) (shen.left-round))) (shen.trim-gubbins (tl V3840))) (true V3840)))

(defun shen.space () 32)

(defun shen.tab () 9)

(defun shen.left-round () 40)

(defun shen.find (V3849 V3850) (cond ((= () V3850) ()) ((and (cons? V3850) (V3849 (hd V3850))) (cons (hd V3850) (shen.find V3849 (tl V3850)))) ((cons? V3850) (shen.find V3849 (tl V3850))) (true (shen.f_error shen.find))))

(defun shen.prefix? (V3864 V3865) (cond ((= () V3864) true) ((and (cons? V3864) (and (cons? V3865) (= (hd V3865) (hd V3864)))) (shen.prefix? (tl V3864) (tl V3865))) (true false)))

(defun shen.print-past-inputs (V3877 V3878 V3879) (cond ((= () V3878) _) ((and (cons? V3878) (not (V3877 (hd V3878)))) (shen.print-past-inputs V3877 (tl V3878) (+ V3879 1))) ((and (cons? V3878) (tuple? (hd V3878))) (do (shen.prhush (shen.app V3879 ". " shen.a) (stoutput)) (do (shen.prbytes (snd (hd V3878))) (shen.print-past-inputs V3877 (tl V3878) (+ V3879 1))))) (true (shen.f_error shen.print-past-inputs))))

(defun shen.toplevel_evaluate (V3882 V3883) (cond ((and (cons? V3882) (and (cons? (tl V3882)) (and (= : (hd (tl V3882))) (and (cons? (tl (tl V3882))) (and (= () (tl (tl (tl V3882)))) (= true V3883)))))) (shen.typecheck-and-evaluate (hd V3882) (hd (tl (tl V3882))))) ((and (cons? V3882) (cons? (tl V3882))) (do (shen.toplevel_evaluate (cons (hd V3882) ()) V3883) (do (nl 1) (shen.toplevel_evaluate (tl V3882) V3883)))) ((and (cons? V3882) (and (= () (tl V3882)) (= true V3883))) (shen.typecheck-and-evaluate (hd V3882) (gensym A))) ((and (cons? V3882) (and (= () (tl V3882)) (= false V3883))) (let Eval (shen.eval-without-macros (hd V3882)) (print Eval))) (true (shen.f_error shen.toplevel_evaluate))))

(defun shen.typecheck-and-evaluate (V3886 V3887) (let Typecheck (shen.typecheck V3886 V3887) (if (= Typecheck false) (simple-error "type error
") (let Eval (shen.eval-without-macros V3886) (let Type (shen.pretty-type Typecheck) (shen.prhush (shen.app Eval (cn " : " (shen.app Type "" shen.r)) shen.s) (stoutput)))))))

(defun shen.pretty-type (V3889) (shen.mult_subst (value shen.*alphabet*) (shen.extract-pvars V3889) V3889))

(defun shen.extract-pvars (V3895) (cond ((shen.pvar? V3895) (cons V3895 ())) ((cons? V3895) (union (shen.extract-pvars (hd V3895)) (shen.extract-pvars (tl V3895)))) (true ())))

(defun shen.mult_subst (V3903 V3904 V3905) (cond ((= () V3903) V3905) ((= () V3904) V3905) ((and (cons? V3903) (cons? V3904)) (shen.mult_subst (tl V3903) (tl V3904) (subst (hd V3903) (hd V3904) V3905))) (true (shen.f_error shen.mult_subst))))



